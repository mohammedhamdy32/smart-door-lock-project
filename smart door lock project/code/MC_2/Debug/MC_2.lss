
MC_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003968  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  00003968  000039fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800084  00800084  00003a20  2**0
                  ALLOC
  3 .stab         00003840  00000000  00000000  00003a20  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014c0  00000000  00000000  00007260  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008720  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008860  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000089d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a619  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b504  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c2b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c414  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c6a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ce6f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 95 07 	jmp	0xf2a	; 0xf2a <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 c2 07 	jmp	0xf84	; 0xf84 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e6       	ldi	r30, 0x68	; 104
      68:	f9 e3       	ldi	r31, 0x39	; 57
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 38       	cpi	r26, 0x84	; 132
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e8       	ldi	r26, 0x84	; 132
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 38       	cpi	r26, 0x8B	; 139
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 cc 05 	call	0xb98	; 0xb98 <main>
      8a:	0c 94 b2 1c 	jmp	0x3964	; 0x3964 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 36 1c 	jmp	0x386c	; 0x386c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e7       	ldi	r26, 0x70	; 112
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 52 1c 	jmp	0x38a4	; 0x38a4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 42 1c 	jmp	0x3884	; 0x3884 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 5e 1c 	jmp	0x38bc	; 0x38bc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 42 1c 	jmp	0x3884	; 0x3884 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 5e 1c 	jmp	0x38bc	; 0x38bc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 36 1c 	jmp	0x386c	; 0x386c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e7       	ldi	r24, 0x70	; 112
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 52 1c 	jmp	0x38a4	; 0x38a4 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 42 1c 	jmp	0x3884	; 0x3884 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 5e 1c 	jmp	0x38bc	; 0x38bc <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 42 1c 	jmp	0x3884	; 0x3884 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 5e 1c 	jmp	0x38bc	; 0x38bc <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 42 1c 	jmp	0x3884	; 0x3884 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 5e 1c 	jmp	0x38bc	; 0x38bc <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 46 1c 	jmp	0x388c	; 0x388c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 62 1c 	jmp	0x38c4	; 0x38c4 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Buzzer_init>:
 */

#include "Buzzer.h"

void Buzzer_init()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID,OUTPUT);
     b4e:	83 e0       	ldi	r24, 0x03	; 3
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <GPIO_setupPinDirection>
	/*set buzzer direction pin*/
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, BUZZER_OFF);
     b58:	83 e0       	ldi	r24, 0x03	; 3
     b5a:	67 e0       	ldi	r22, 0x07	; 7
     b5c:	40 e0       	ldi	r20, 0x00	; 0
     b5e:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <GPIO_writePin>
}
     b62:	cf 91       	pop	r28
     b64:	df 91       	pop	r29
     b66:	08 95       	ret

00000b68 <Buzzer_on>:

void Buzzer_on(void)
{
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, BUZZER_ON);
     b70:	83 e0       	ldi	r24, 0x03	; 3
     b72:	67 e0       	ldi	r22, 0x07	; 7
     b74:	41 e0       	ldi	r20, 0x01	; 1
     b76:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <GPIO_writePin>
}
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	08 95       	ret

00000b80 <Buzzer_off>:

void Buzzer_off(void)
{
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, BUZZER_OFF);
     b88:	83 e0       	ldi	r24, 0x03	; 3
     b8a:	67 e0       	ldi	r22, 0x07	; 7
     b8c:	40 e0       	ldi	r20, 0x00	; 0
     b8e:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <GPIO_writePin>
}
     b92:	cf 91       	pop	r28
     b94:	df 91       	pop	r29
     b96:	08 95       	ret

00000b98 <main>:


#include "application.h"

int main(void)
{
     b98:	0f 93       	push	r16
     b9a:	1f 93       	push	r17
     b9c:	df 93       	push	r29
     b9e:	cf 93       	push	r28
     ba0:	cd b7       	in	r28, 0x3d	; 61
     ba2:	de b7       	in	r29, 0x3e	; 62
     ba4:	ed 97       	sbiw	r28, 0x3d	; 61
     ba6:	0f b6       	in	r0, 0x3f	; 63
     ba8:	f8 94       	cli
     baa:	de bf       	out	0x3e, r29	; 62
     bac:	0f be       	out	0x3f, r0	; 63
     bae:	cd bf       	out	0x3d, r28	; 61

	/******************INIT eeprom************************/
	UART_configType uart_conf = {DISABLE,ONE_BIT,BIT8,9600};
     bb0:	ce 01       	movw	r24, r28
     bb2:	83 96       	adiw	r24, 0x23	; 35
     bb4:	9d ab       	std	Y+53, r25	; 0x35
     bb6:	8c ab       	std	Y+52, r24	; 0x34
     bb8:	ed e7       	ldi	r30, 0x7D	; 125
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	ff ab       	std	Y+55, r31	; 0x37
     bbe:	ee ab       	std	Y+54, r30	; 0x36
     bc0:	f7 e0       	ldi	r31, 0x07	; 7
     bc2:	f8 af       	std	Y+56, r31	; 0x38
     bc4:	ee a9       	ldd	r30, Y+54	; 0x36
     bc6:	ff a9       	ldd	r31, Y+55	; 0x37
     bc8:	00 80       	ld	r0, Z
     bca:	8e a9       	ldd	r24, Y+54	; 0x36
     bcc:	9f a9       	ldd	r25, Y+55	; 0x37
     bce:	01 96       	adiw	r24, 0x01	; 1
     bd0:	9f ab       	std	Y+55, r25	; 0x37
     bd2:	8e ab       	std	Y+54, r24	; 0x36
     bd4:	ec a9       	ldd	r30, Y+52	; 0x34
     bd6:	fd a9       	ldd	r31, Y+53	; 0x35
     bd8:	00 82       	st	Z, r0
     bda:	8c a9       	ldd	r24, Y+52	; 0x34
     bdc:	9d a9       	ldd	r25, Y+53	; 0x35
     bde:	01 96       	adiw	r24, 0x01	; 1
     be0:	9d ab       	std	Y+53, r25	; 0x35
     be2:	8c ab       	std	Y+52, r24	; 0x34
     be4:	98 ad       	ldd	r25, Y+56	; 0x38
     be6:	91 50       	subi	r25, 0x01	; 1
     be8:	98 af       	std	Y+56, r25	; 0x38
     bea:	e8 ad       	ldd	r30, Y+56	; 0x38
     bec:	ee 23       	and	r30, r30
     bee:	51 f7       	brne	.-44     	; 0xbc4 <main+0x2c>
	UART_init(&uart_conf);
     bf0:	ce 01       	movw	r24, r28
     bf2:	83 96       	adiw	r24, 0x23	; 35
     bf4:	0e 94 71 08 	call	0x10e2	; 0x10e2 <UART_init>
	/******************INIT i2c************************/
	TWI_ConfigType twi_conf = {0b00000010,400000};
     bf8:	ce 01       	movw	r24, r28
     bfa:	8a 96       	adiw	r24, 0x2a	; 42
     bfc:	9a af       	std	Y+58, r25	; 0x3a
     bfe:	89 af       	std	Y+57, r24	; 0x39
     c00:	e8 e7       	ldi	r30, 0x78	; 120
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	fc af       	std	Y+60, r31	; 0x3c
     c06:	eb af       	std	Y+59, r30	; 0x3b
     c08:	f5 e0       	ldi	r31, 0x05	; 5
     c0a:	fd af       	std	Y+61, r31	; 0x3d
     c0c:	eb ad       	ldd	r30, Y+59	; 0x3b
     c0e:	fc ad       	ldd	r31, Y+60	; 0x3c
     c10:	00 80       	ld	r0, Z
     c12:	8b ad       	ldd	r24, Y+59	; 0x3b
     c14:	9c ad       	ldd	r25, Y+60	; 0x3c
     c16:	01 96       	adiw	r24, 0x01	; 1
     c18:	9c af       	std	Y+60, r25	; 0x3c
     c1a:	8b af       	std	Y+59, r24	; 0x3b
     c1c:	e9 ad       	ldd	r30, Y+57	; 0x39
     c1e:	fa ad       	ldd	r31, Y+58	; 0x3a
     c20:	00 82       	st	Z, r0
     c22:	89 ad       	ldd	r24, Y+57	; 0x39
     c24:	9a ad       	ldd	r25, Y+58	; 0x3a
     c26:	01 96       	adiw	r24, 0x01	; 1
     c28:	9a af       	std	Y+58, r25	; 0x3a
     c2a:	89 af       	std	Y+57, r24	; 0x39
     c2c:	9d ad       	ldd	r25, Y+61	; 0x3d
     c2e:	91 50       	subi	r25, 0x01	; 1
     c30:	9d af       	std	Y+61, r25	; 0x3d
     c32:	ed ad       	ldd	r30, Y+61	; 0x3d
     c34:	ee 23       	and	r30, r30
     c36:	51 f7       	brne	.-44     	; 0xc0c <main+0x74>
	TWI_init(&twi_conf); /*init I2C to send password to eeprom*/
     c38:	ce 01       	movw	r24, r28
     c3a:	8a 96       	adiw	r24, 0x2a	; 42
     c3c:	0e 94 75 1b 	call	0x36ea	; 0x36ea <TWI_init>
	/******************INIT Buzzer*********************/
	Buzzer_init();
     c40:	0e 94 a3 05 	call	0xb46	; 0xb46 <Buzzer_init>
   /*******************INIT motor*********************/
   DcMotor_Init();
     c44:	0e 94 23 0b 	call	0x1646	; 0x1646 <DcMotor_Init>

	uint8 recieved_byte;

	for(;;)
	{
		recieved_byte = UART_recieveByte();
     c48:	0e 94 0b 09 	call	0x1216	; 0x1216 <UART_recieveByte>
     c4c:	8a a3       	std	Y+34, r24	; 0x22

		if(recieved_byte == SEND_PASSWORD)/*MC2 will Writes the recived password in eeprom if SEND_PASSWORD byte is recived */
     c4e:	8a a1       	ldd	r24, Y+34	; 0x22
     c50:	8e 3f       	cpi	r24, 0xFE	; 254
     c52:	09 f0       	breq	.+2      	; 0xc56 <main+0xbe>
     c54:	95 c0       	rjmp	.+298    	; 0xd80 <main+0x1e8>
		{
			for(int j=0;j<PASS_SIZE;j++)
     c56:	19 a2       	std	Y+33, r1	; 0x21
     c58:	18 a2       	std	Y+32, r1	; 0x20
     c5a:	89 c0       	rjmp	.+274    	; 0xd6e <main+0x1d6>
			{
				g_pass[j] = UART_recieveByte();
     c5c:	08 a1       	ldd	r16, Y+32	; 0x20
     c5e:	19 a1       	ldd	r17, Y+33	; 0x21
     c60:	0e 94 0b 09 	call	0x1216	; 0x1216 <UART_recieveByte>
     c64:	f8 01       	movw	r30, r16
     c66:	ea 57       	subi	r30, 0x7A	; 122
     c68:	ff 4f       	sbci	r31, 0xFF	; 255
     c6a:	80 83       	st	Z, r24
     c6c:	80 e0       	ldi	r24, 0x00	; 0
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	a0 e2       	ldi	r26, 0x20	; 32
     c72:	b1 e4       	ldi	r27, 0x41	; 65
     c74:	89 8f       	std	Y+25, r24	; 0x19
     c76:	9a 8f       	std	Y+26, r25	; 0x1a
     c78:	ab 8f       	std	Y+27, r26	; 0x1b
     c7a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c7c:	69 8d       	ldd	r22, Y+25	; 0x19
     c7e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c80:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c82:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c84:	20 e0       	ldi	r18, 0x00	; 0
     c86:	30 e0       	ldi	r19, 0x00	; 0
     c88:	4a ef       	ldi	r20, 0xFA	; 250
     c8a:	54 e4       	ldi	r21, 0x44	; 68
     c8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c90:	dc 01       	movw	r26, r24
     c92:	cb 01       	movw	r24, r22
     c94:	8d 8b       	std	Y+21, r24	; 0x15
     c96:	9e 8b       	std	Y+22, r25	; 0x16
     c98:	af 8b       	std	Y+23, r26	; 0x17
     c9a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     c9c:	6d 89       	ldd	r22, Y+21	; 0x15
     c9e:	7e 89       	ldd	r23, Y+22	; 0x16
     ca0:	8f 89       	ldd	r24, Y+23	; 0x17
     ca2:	98 8d       	ldd	r25, Y+24	; 0x18
     ca4:	20 e0       	ldi	r18, 0x00	; 0
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	40 e8       	ldi	r20, 0x80	; 128
     caa:	5f e3       	ldi	r21, 0x3F	; 63
     cac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cb0:	88 23       	and	r24, r24
     cb2:	2c f4       	brge	.+10     	; 0xcbe <main+0x126>
		__ticks = 1;
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	9c 8b       	std	Y+20, r25	; 0x14
     cba:	8b 8b       	std	Y+19, r24	; 0x13
     cbc:	3f c0       	rjmp	.+126    	; 0xd3c <main+0x1a4>
	else if (__tmp > 65535)
     cbe:	6d 89       	ldd	r22, Y+21	; 0x15
     cc0:	7e 89       	ldd	r23, Y+22	; 0x16
     cc2:	8f 89       	ldd	r24, Y+23	; 0x17
     cc4:	98 8d       	ldd	r25, Y+24	; 0x18
     cc6:	20 e0       	ldi	r18, 0x00	; 0
     cc8:	3f ef       	ldi	r19, 0xFF	; 255
     cca:	4f e7       	ldi	r20, 0x7F	; 127
     ccc:	57 e4       	ldi	r21, 0x47	; 71
     cce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cd2:	18 16       	cp	r1, r24
     cd4:	4c f5       	brge	.+82     	; 0xd28 <main+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cd6:	69 8d       	ldd	r22, Y+25	; 0x19
     cd8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     cda:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cdc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cde:	20 e0       	ldi	r18, 0x00	; 0
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	40 e2       	ldi	r20, 0x20	; 32
     ce4:	51 e4       	ldi	r21, 0x41	; 65
     ce6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cea:	dc 01       	movw	r26, r24
     cec:	cb 01       	movw	r24, r22
     cee:	bc 01       	movw	r22, r24
     cf0:	cd 01       	movw	r24, r26
     cf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cf6:	dc 01       	movw	r26, r24
     cf8:	cb 01       	movw	r24, r22
     cfa:	9c 8b       	std	Y+20, r25	; 0x14
     cfc:	8b 8b       	std	Y+19, r24	; 0x13
     cfe:	0f c0       	rjmp	.+30     	; 0xd1e <main+0x186>
     d00:	88 ec       	ldi	r24, 0xC8	; 200
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	9a 8b       	std	Y+18, r25	; 0x12
     d06:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d08:	89 89       	ldd	r24, Y+17	; 0x11
     d0a:	9a 89       	ldd	r25, Y+18	; 0x12
     d0c:	01 97       	sbiw	r24, 0x01	; 1
     d0e:	f1 f7       	brne	.-4      	; 0xd0c <main+0x174>
     d10:	9a 8b       	std	Y+18, r25	; 0x12
     d12:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d14:	8b 89       	ldd	r24, Y+19	; 0x13
     d16:	9c 89       	ldd	r25, Y+20	; 0x14
     d18:	01 97       	sbiw	r24, 0x01	; 1
     d1a:	9c 8b       	std	Y+20, r25	; 0x14
     d1c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d1e:	8b 89       	ldd	r24, Y+19	; 0x13
     d20:	9c 89       	ldd	r25, Y+20	; 0x14
     d22:	00 97       	sbiw	r24, 0x00	; 0
     d24:	69 f7       	brne	.-38     	; 0xd00 <main+0x168>
     d26:	14 c0       	rjmp	.+40     	; 0xd50 <main+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d28:	6d 89       	ldd	r22, Y+21	; 0x15
     d2a:	7e 89       	ldd	r23, Y+22	; 0x16
     d2c:	8f 89       	ldd	r24, Y+23	; 0x17
     d2e:	98 8d       	ldd	r25, Y+24	; 0x18
     d30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d34:	dc 01       	movw	r26, r24
     d36:	cb 01       	movw	r24, r22
     d38:	9c 8b       	std	Y+20, r25	; 0x14
     d3a:	8b 8b       	std	Y+19, r24	; 0x13
     d3c:	8b 89       	ldd	r24, Y+19	; 0x13
     d3e:	9c 89       	ldd	r25, Y+20	; 0x14
     d40:	98 8b       	std	Y+16, r25	; 0x10
     d42:	8f 87       	std	Y+15, r24	; 0x0f
     d44:	8f 85       	ldd	r24, Y+15	; 0x0f
     d46:	98 89       	ldd	r25, Y+16	; 0x10
     d48:	01 97       	sbiw	r24, 0x01	; 1
     d4a:	f1 f7       	brne	.-4      	; 0xd48 <main+0x1b0>
     d4c:	98 8b       	std	Y+16, r25	; 0x10
     d4e:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(10);
				LCD_integerToString(g_pass[j]);
     d50:	88 a1       	ldd	r24, Y+32	; 0x20
     d52:	99 a1       	ldd	r25, Y+33	; 0x21
     d54:	fc 01       	movw	r30, r24
     d56:	ea 57       	subi	r30, 0x7A	; 122
     d58:	ff 4f       	sbci	r31, 0xFF	; 255
     d5a:	80 81       	ld	r24, Z
     d5c:	88 2f       	mov	r24, r24
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	0e 94 48 1b 	call	0x3690	; 0x3690 <LCD_integerToString>
	{
		recieved_byte = UART_recieveByte();

		if(recieved_byte == SEND_PASSWORD)/*MC2 will Writes the recived password in eeprom if SEND_PASSWORD byte is recived */
		{
			for(int j=0;j<PASS_SIZE;j++)
     d64:	88 a1       	ldd	r24, Y+32	; 0x20
     d66:	99 a1       	ldd	r25, Y+33	; 0x21
     d68:	01 96       	adiw	r24, 0x01	; 1
     d6a:	99 a3       	std	Y+33, r25	; 0x21
     d6c:	88 a3       	std	Y+32, r24	; 0x20
     d6e:	88 a1       	ldd	r24, Y+32	; 0x20
     d70:	99 a1       	ldd	r25, Y+33	; 0x21
     d72:	85 30       	cpi	r24, 0x05	; 5
     d74:	91 05       	cpc	r25, r1
     d76:	0c f4       	brge	.+2      	; 0xd7a <main+0x1e2>
     d78:	71 cf       	rjmp	.-286    	; 0xc5c <main+0xc4>
				g_pass[j] = UART_recieveByte();
				_delay_ms(10);
				LCD_integerToString(g_pass[j]);
			}

			write_pass_in_eeprom();
     d7a:	0e 94 90 09 	call	0x1320	; 0x1320 <write_pass_in_eeprom>
     d7e:	64 cf       	rjmp	.-312    	; 0xc48 <main+0xb0>

		}
		else if(recieved_byte == CHEAK_PASSWORD)/*MC2 will check the recived password if CHEAK_PASSWORD byte is recived */
     d80:	8a a1       	ldd	r24, Y+34	; 0x22
     d82:	8d 3f       	cpi	r24, 0xFD	; 253
     d84:	09 f0       	breq	.+2      	; 0xd88 <main+0x1f0>
     d86:	a3 c0       	rjmp	.+326    	; 0xece <main+0x336>
		{
			LCD_writeChar('i');
     d88:	89 e6       	ldi	r24, 0x69	; 105
     d8a:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <LCD_writeChar>
			uint8 pass[PASS_SIZE];
			for(int j=0;j<PASS_SIZE;j++)
     d8e:	1e 8e       	std	Y+30, r1	; 0x1e
     d90:	1d 8e       	std	Y+29, r1	; 0x1d
     d92:	8e c0       	rjmp	.+284    	; 0xeb0 <main+0x318>
			{
				pass[j] = UART_recieveByte();
     d94:	0d 8d       	ldd	r16, Y+29	; 0x1d
     d96:	1e 8d       	ldd	r17, Y+30	; 0x1e
     d98:	0e 94 0b 09 	call	0x1216	; 0x1216 <UART_recieveByte>
     d9c:	28 2f       	mov	r18, r24
     d9e:	ce 01       	movw	r24, r28
     da0:	8f 96       	adiw	r24, 0x2f	; 47
     da2:	fc 01       	movw	r30, r24
     da4:	e0 0f       	add	r30, r16
     da6:	f1 1f       	adc	r31, r17
     da8:	20 83       	st	Z, r18
     daa:	80 e0       	ldi	r24, 0x00	; 0
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	a0 e2       	ldi	r26, 0x20	; 32
     db0:	b1 e4       	ldi	r27, 0x41	; 65
     db2:	8b 87       	std	Y+11, r24	; 0x0b
     db4:	9c 87       	std	Y+12, r25	; 0x0c
     db6:	ad 87       	std	Y+13, r26	; 0x0d
     db8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dba:	6b 85       	ldd	r22, Y+11	; 0x0b
     dbc:	7c 85       	ldd	r23, Y+12	; 0x0c
     dbe:	8d 85       	ldd	r24, Y+13	; 0x0d
     dc0:	9e 85       	ldd	r25, Y+14	; 0x0e
     dc2:	20 e0       	ldi	r18, 0x00	; 0
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	4a ef       	ldi	r20, 0xFA	; 250
     dc8:	54 e4       	ldi	r21, 0x44	; 68
     dca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dce:	dc 01       	movw	r26, r24
     dd0:	cb 01       	movw	r24, r22
     dd2:	8f 83       	std	Y+7, r24	; 0x07
     dd4:	98 87       	std	Y+8, r25	; 0x08
     dd6:	a9 87       	std	Y+9, r26	; 0x09
     dd8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     dda:	6f 81       	ldd	r22, Y+7	; 0x07
     ddc:	78 85       	ldd	r23, Y+8	; 0x08
     dde:	89 85       	ldd	r24, Y+9	; 0x09
     de0:	9a 85       	ldd	r25, Y+10	; 0x0a
     de2:	20 e0       	ldi	r18, 0x00	; 0
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	40 e8       	ldi	r20, 0x80	; 128
     de8:	5f e3       	ldi	r21, 0x3F	; 63
     dea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dee:	88 23       	and	r24, r24
     df0:	2c f4       	brge	.+10     	; 0xdfc <main+0x264>
		__ticks = 1;
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	9e 83       	std	Y+6, r25	; 0x06
     df8:	8d 83       	std	Y+5, r24	; 0x05
     dfa:	3f c0       	rjmp	.+126    	; 0xe7a <main+0x2e2>
	else if (__tmp > 65535)
     dfc:	6f 81       	ldd	r22, Y+7	; 0x07
     dfe:	78 85       	ldd	r23, Y+8	; 0x08
     e00:	89 85       	ldd	r24, Y+9	; 0x09
     e02:	9a 85       	ldd	r25, Y+10	; 0x0a
     e04:	20 e0       	ldi	r18, 0x00	; 0
     e06:	3f ef       	ldi	r19, 0xFF	; 255
     e08:	4f e7       	ldi	r20, 0x7F	; 127
     e0a:	57 e4       	ldi	r21, 0x47	; 71
     e0c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e10:	18 16       	cp	r1, r24
     e12:	4c f5       	brge	.+82     	; 0xe66 <main+0x2ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e14:	6b 85       	ldd	r22, Y+11	; 0x0b
     e16:	7c 85       	ldd	r23, Y+12	; 0x0c
     e18:	8d 85       	ldd	r24, Y+13	; 0x0d
     e1a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e1c:	20 e0       	ldi	r18, 0x00	; 0
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	40 e2       	ldi	r20, 0x20	; 32
     e22:	51 e4       	ldi	r21, 0x41	; 65
     e24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e28:	dc 01       	movw	r26, r24
     e2a:	cb 01       	movw	r24, r22
     e2c:	bc 01       	movw	r22, r24
     e2e:	cd 01       	movw	r24, r26
     e30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e34:	dc 01       	movw	r26, r24
     e36:	cb 01       	movw	r24, r22
     e38:	9e 83       	std	Y+6, r25	; 0x06
     e3a:	8d 83       	std	Y+5, r24	; 0x05
     e3c:	0f c0       	rjmp	.+30     	; 0xe5c <main+0x2c4>
     e3e:	88 ec       	ldi	r24, 0xC8	; 200
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	9c 83       	std	Y+4, r25	; 0x04
     e44:	8b 83       	std	Y+3, r24	; 0x03
     e46:	8b 81       	ldd	r24, Y+3	; 0x03
     e48:	9c 81       	ldd	r25, Y+4	; 0x04
     e4a:	01 97       	sbiw	r24, 0x01	; 1
     e4c:	f1 f7       	brne	.-4      	; 0xe4a <main+0x2b2>
     e4e:	9c 83       	std	Y+4, r25	; 0x04
     e50:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e52:	8d 81       	ldd	r24, Y+5	; 0x05
     e54:	9e 81       	ldd	r25, Y+6	; 0x06
     e56:	01 97       	sbiw	r24, 0x01	; 1
     e58:	9e 83       	std	Y+6, r25	; 0x06
     e5a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e5c:	8d 81       	ldd	r24, Y+5	; 0x05
     e5e:	9e 81       	ldd	r25, Y+6	; 0x06
     e60:	00 97       	sbiw	r24, 0x00	; 0
     e62:	69 f7       	brne	.-38     	; 0xe3e <main+0x2a6>
     e64:	14 c0       	rjmp	.+40     	; 0xe8e <main+0x2f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e66:	6f 81       	ldd	r22, Y+7	; 0x07
     e68:	78 85       	ldd	r23, Y+8	; 0x08
     e6a:	89 85       	ldd	r24, Y+9	; 0x09
     e6c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e72:	dc 01       	movw	r26, r24
     e74:	cb 01       	movw	r24, r22
     e76:	9e 83       	std	Y+6, r25	; 0x06
     e78:	8d 83       	std	Y+5, r24	; 0x05
     e7a:	8d 81       	ldd	r24, Y+5	; 0x05
     e7c:	9e 81       	ldd	r25, Y+6	; 0x06
     e7e:	9a 83       	std	Y+2, r25	; 0x02
     e80:	89 83       	std	Y+1, r24	; 0x01
     e82:	89 81       	ldd	r24, Y+1	; 0x01
     e84:	9a 81       	ldd	r25, Y+2	; 0x02
     e86:	01 97       	sbiw	r24, 0x01	; 1
     e88:	f1 f7       	brne	.-4      	; 0xe86 <main+0x2ee>
     e8a:	9a 83       	std	Y+2, r25	; 0x02
     e8c:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(10);
				LCD_integerToString(pass[j]);
     e8e:	2d 8d       	ldd	r18, Y+29	; 0x1d
     e90:	3e 8d       	ldd	r19, Y+30	; 0x1e
     e92:	ce 01       	movw	r24, r28
     e94:	8f 96       	adiw	r24, 0x2f	; 47
     e96:	fc 01       	movw	r30, r24
     e98:	e2 0f       	add	r30, r18
     e9a:	f3 1f       	adc	r31, r19
     e9c:	80 81       	ld	r24, Z
     e9e:	88 2f       	mov	r24, r24
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	0e 94 48 1b 	call	0x3690	; 0x3690 <LCD_integerToString>
		}
		else if(recieved_byte == CHEAK_PASSWORD)/*MC2 will check the recived password if CHEAK_PASSWORD byte is recived */
		{
			LCD_writeChar('i');
			uint8 pass[PASS_SIZE];
			for(int j=0;j<PASS_SIZE;j++)
     ea6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ea8:	9e 8d       	ldd	r25, Y+30	; 0x1e
     eaa:	01 96       	adiw	r24, 0x01	; 1
     eac:	9e 8f       	std	Y+30, r25	; 0x1e
     eae:	8d 8f       	std	Y+29, r24	; 0x1d
     eb0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     eb2:	9e 8d       	ldd	r25, Y+30	; 0x1e
     eb4:	85 30       	cpi	r24, 0x05	; 5
     eb6:	91 05       	cpc	r25, r1
     eb8:	0c f4       	brge	.+2      	; 0xebc <main+0x324>
     eba:	6c cf       	rjmp	.-296    	; 0xd94 <main+0x1fc>
				_delay_ms(10);
				LCD_integerToString(pass[j]);
			}

			boolean is_right_pass;
			is_right_pass = compare_eeprom_pass_with_your_pass(pass);
     ebc:	ce 01       	movw	r24, r28
     ebe:	8f 96       	adiw	r24, 0x2f	; 47
     ec0:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <compare_eeprom_pass_with_your_pass>
     ec4:	8f 8f       	std	Y+31, r24	; 0x1f

			UART_sendByte(is_right_pass);
     ec6:	8f 8d       	ldd	r24, Y+31	; 0x1f
     ec8:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <UART_sendByte>
     ecc:	bd ce       	rjmp	.-646    	; 0xc48 <main+0xb0>

		}else if(recieved_byte == BUZZER_ON) /*MC2 will open buzzer if BUZZER_ON byte is recived */
     ece:	8a a1       	ldd	r24, Y+34	; 0x22
     ed0:	8c 3f       	cpi	r24, 0xFC	; 252
     ed2:	39 f4       	brne	.+14     	; 0xee2 <main+0x34a>
		{
			LCD_writeString("B ON");
     ed4:	80 e6       	ldi	r24, 0x60	; 96
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	0e 94 da 1a 	call	0x35b4	; 0x35b4 <LCD_writeString>
			Buzzer_on();
     edc:	0e 94 b4 05 	call	0xb68	; 0xb68 <Buzzer_on>
     ee0:	b3 ce       	rjmp	.-666    	; 0xc48 <main+0xb0>
		}else if(recieved_byte == BUZZER_OFF) /*MC2 will close buzzer if BUZZER_ON byte is recived */
     ee2:	8a a1       	ldd	r24, Y+34	; 0x22
     ee4:	8b 3f       	cpi	r24, 0xFB	; 251
     ee6:	39 f4       	brne	.+14     	; 0xef6 <main+0x35e>
		{
			Buzzer_off();
     ee8:	0e 94 c0 05 	call	0xb80	; 0xb80 <Buzzer_off>
			LCD_writeString("B OFF");
     eec:	85 e6       	ldi	r24, 0x65	; 101
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	0e 94 da 1a 	call	0x35b4	; 0x35b4 <LCD_writeString>
     ef4:	a9 ce       	rjmp	.-686    	; 0xc48 <main+0xb0>
		}else if( recieved_byte==C_START_MOTOR )/*MC2 will open motor in clock wise if C_START_MOTOR byte is recived */
     ef6:	8a a1       	ldd	r24, Y+34	; 0x22
     ef8:	8a 3f       	cpi	r24, 0xFA	; 250
     efa:	21 f4       	brne	.+8      	; 0xf04 <main+0x36c>
		{
            DcMotor_Rotate(CLOCK_WISE);
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	0e 94 3e 0b 	call	0x167c	; 0x167c <DcMotor_Rotate>
     f02:	a2 ce       	rjmp	.-700    	; 0xc48 <main+0xb0>
		}
		else if(recieved_byte==A_START_MOTOR) /*MC2 will open motor in anti clock wise if A_START_MOTOR byte is recived */
     f04:	8a a1       	ldd	r24, Y+34	; 0x22
     f06:	89 3f       	cpi	r24, 0xF9	; 249
     f08:	41 f4       	brne	.+16     	; 0xf1a <main+0x382>
		{
            DcMotor_Rotate(ANTI_CLOCK_WISE);
     f0a:	82 e0       	ldi	r24, 0x02	; 2
     f0c:	0e 94 3e 0b 	call	0x167c	; 0x167c <DcMotor_Rotate>
			LCD_writeString("stop");
     f10:	8b e6       	ldi	r24, 0x6B	; 107
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	0e 94 da 1a 	call	0x35b4	; 0x35b4 <LCD_writeString>
     f18:	97 ce       	rjmp	.-722    	; 0xc48 <main+0xb0>
		}
		else if(recieved_byte == STOP_MOTOR ) /*MC2 will open motor if STOP_MOTOR byte is recived */
     f1a:	8a a1       	ldd	r24, Y+34	; 0x22
     f1c:	88 3f       	cpi	r24, 0xF8	; 248
     f1e:	09 f0       	breq	.+2      	; 0xf22 <main+0x38a>
     f20:	93 ce       	rjmp	.-730    	; 0xc48 <main+0xb0>
		{
            DcMotor_Rotate(STOP);
     f22:	80 e0       	ldi	r24, 0x00	; 0
     f24:	0e 94 3e 0b 	call	0x167c	; 0x167c <DcMotor_Rotate>
     f28:	8f ce       	rjmp	.-738    	; 0xc48 <main+0xb0>

00000f2a <__vector_7>:
#include "avr/interrupt.h"

static volatile void (*g_callBackFun)(void)=NULL_PTR;

ISR(TIMER1_COMPA_vect)
{
     f2a:	1f 92       	push	r1
     f2c:	0f 92       	push	r0
     f2e:	0f b6       	in	r0, 0x3f	; 63
     f30:	0f 92       	push	r0
     f32:	11 24       	eor	r1, r1
     f34:	2f 93       	push	r18
     f36:	3f 93       	push	r19
     f38:	4f 93       	push	r20
     f3a:	5f 93       	push	r21
     f3c:	6f 93       	push	r22
     f3e:	7f 93       	push	r23
     f40:	8f 93       	push	r24
     f42:	9f 93       	push	r25
     f44:	af 93       	push	r26
     f46:	bf 93       	push	r27
     f48:	ef 93       	push	r30
     f4a:	ff 93       	push	r31
     f4c:	df 93       	push	r29
     f4e:	cf 93       	push	r28
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
	(*g_callBackFun)();
     f54:	e0 91 84 00 	lds	r30, 0x0084
     f58:	f0 91 85 00 	lds	r31, 0x0085
     f5c:	09 95       	icall
}
     f5e:	cf 91       	pop	r28
     f60:	df 91       	pop	r29
     f62:	ff 91       	pop	r31
     f64:	ef 91       	pop	r30
     f66:	bf 91       	pop	r27
     f68:	af 91       	pop	r26
     f6a:	9f 91       	pop	r25
     f6c:	8f 91       	pop	r24
     f6e:	7f 91       	pop	r23
     f70:	6f 91       	pop	r22
     f72:	5f 91       	pop	r21
     f74:	4f 91       	pop	r20
     f76:	3f 91       	pop	r19
     f78:	2f 91       	pop	r18
     f7a:	0f 90       	pop	r0
     f7c:	0f be       	out	0x3f, r0	; 63
     f7e:	0f 90       	pop	r0
     f80:	1f 90       	pop	r1
     f82:	18 95       	reti

00000f84 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
     f84:	1f 92       	push	r1
     f86:	0f 92       	push	r0
     f88:	0f b6       	in	r0, 0x3f	; 63
     f8a:	0f 92       	push	r0
     f8c:	11 24       	eor	r1, r1
     f8e:	2f 93       	push	r18
     f90:	3f 93       	push	r19
     f92:	4f 93       	push	r20
     f94:	5f 93       	push	r21
     f96:	6f 93       	push	r22
     f98:	7f 93       	push	r23
     f9a:	8f 93       	push	r24
     f9c:	9f 93       	push	r25
     f9e:	af 93       	push	r26
     fa0:	bf 93       	push	r27
     fa2:	ef 93       	push	r30
     fa4:	ff 93       	push	r31
     fa6:	df 93       	push	r29
     fa8:	cf 93       	push	r28
     faa:	cd b7       	in	r28, 0x3d	; 61
     fac:	de b7       	in	r29, 0x3e	; 62
	(*g_callBackFun)();
     fae:	e0 91 84 00 	lds	r30, 0x0084
     fb2:	f0 91 85 00 	lds	r31, 0x0085
     fb6:	09 95       	icall
}
     fb8:	cf 91       	pop	r28
     fba:	df 91       	pop	r29
     fbc:	ff 91       	pop	r31
     fbe:	ef 91       	pop	r30
     fc0:	bf 91       	pop	r27
     fc2:	af 91       	pop	r26
     fc4:	9f 91       	pop	r25
     fc6:	8f 91       	pop	r24
     fc8:	7f 91       	pop	r23
     fca:	6f 91       	pop	r22
     fcc:	5f 91       	pop	r21
     fce:	4f 91       	pop	r20
     fd0:	3f 91       	pop	r19
     fd2:	2f 91       	pop	r18
     fd4:	0f 90       	pop	r0
     fd6:	0f be       	out	0x3f, r0	; 63
     fd8:	0f 90       	pop	r0
     fda:	1f 90       	pop	r1
     fdc:	18 95       	reti

00000fde <Timer1_init>:

void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
     fde:	df 93       	push	r29
     fe0:	cf 93       	push	r28
     fe2:	00 d0       	rcall	.+0      	; 0xfe4 <Timer1_init+0x6>
     fe4:	cd b7       	in	r28, 0x3d	; 61
     fe6:	de b7       	in	r29, 0x3e	; 62
     fe8:	9a 83       	std	Y+2, r25	; 0x02
     fea:	89 83       	std	Y+1, r24	; 0x01
	TCCR1A = (1<<FOC1A) | (1<<FOC1A);  /*Non PWM mode*/
     fec:	ef e4       	ldi	r30, 0x4F	; 79
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	88 e0       	ldi	r24, 0x08	; 8
     ff2:	80 83       	st	Z, r24

	TCCR1B = Config_Ptr->prescaler;  /*to set the prescaler of timer*/
     ff4:	ae e4       	ldi	r26, 0x4E	; 78
     ff6:	b0 e0       	ldi	r27, 0x00	; 0
     ff8:	e9 81       	ldd	r30, Y+1	; 0x01
     ffa:	fa 81       	ldd	r31, Y+2	; 0x02
     ffc:	84 81       	ldd	r24, Z+4	; 0x04
     ffe:	8c 93       	st	X, r24

	TCCR1B |= (Config_Ptr->mode<<WGM12); /*set timer mode Normal or compare mode*/
    1000:	ae e4       	ldi	r26, 0x4E	; 78
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	ee e4       	ldi	r30, 0x4E	; 78
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	28 2f       	mov	r18, r24
    100c:	e9 81       	ldd	r30, Y+1	; 0x01
    100e:	fa 81       	ldd	r31, Y+2	; 0x02
    1010:	85 81       	ldd	r24, Z+5	; 0x05
    1012:	88 2f       	mov	r24, r24
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	88 0f       	add	r24, r24
    1018:	99 1f       	adc	r25, r25
    101a:	88 0f       	add	r24, r24
    101c:	99 1f       	adc	r25, r25
    101e:	88 0f       	add	r24, r24
    1020:	99 1f       	adc	r25, r25
    1022:	82 2b       	or	r24, r18
    1024:	8c 93       	st	X, r24

	TCNT1 = Config_Ptr->initial_value;  /*set initial value of timer*/
    1026:	ac e4       	ldi	r26, 0x4C	; 76
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	e9 81       	ldd	r30, Y+1	; 0x01
    102c:	fa 81       	ldd	r31, Y+2	; 0x02
    102e:	80 81       	ld	r24, Z
    1030:	91 81       	ldd	r25, Z+1	; 0x01
    1032:	11 96       	adiw	r26, 0x01	; 1
    1034:	9c 93       	st	X, r25
    1036:	8e 93       	st	-X, r24

	OCR1A = Config_Ptr->compare_value; /*set compare value*/
    1038:	aa e4       	ldi	r26, 0x4A	; 74
    103a:	b0 e0       	ldi	r27, 0x00	; 0
    103c:	e9 81       	ldd	r30, Y+1	; 0x01
    103e:	fa 81       	ldd	r31, Y+2	; 0x02
    1040:	82 81       	ldd	r24, Z+2	; 0x02
    1042:	93 81       	ldd	r25, Z+3	; 0x03
    1044:	11 96       	adiw	r26, 0x01	; 1
    1046:	9c 93       	st	X, r25
    1048:	8e 93       	st	-X, r24

	TIMSK |= (1<<TICIE1) | (1<<OCIE1A); /*open intrrupt for normal mode and compare */
    104a:	a9 e5       	ldi	r26, 0x59	; 89
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	e9 e5       	ldi	r30, 0x59	; 89
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	80 63       	ori	r24, 0x30	; 48
    1056:	8c 93       	st	X, r24

}
    1058:	0f 90       	pop	r0
    105a:	0f 90       	pop	r0
    105c:	cf 91       	pop	r28
    105e:	df 91       	pop	r29
    1060:	08 95       	ret

00001062 <Timer1_set_initial_value>:

void Timer1_set_initial_value(uint16 a_initial_value )
{
    1062:	df 93       	push	r29
    1064:	cf 93       	push	r28
    1066:	00 d0       	rcall	.+0      	; 0x1068 <Timer1_set_initial_value+0x6>
    1068:	cd b7       	in	r28, 0x3d	; 61
    106a:	de b7       	in	r29, 0x3e	; 62
    106c:	9a 83       	std	Y+2, r25	; 0x02
    106e:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = a_initial_value;
    1070:	ec e4       	ldi	r30, 0x4C	; 76
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	89 81       	ldd	r24, Y+1	; 0x01
    1076:	9a 81       	ldd	r25, Y+2	; 0x02
    1078:	91 83       	std	Z+1, r25	; 0x01
    107a:	80 83       	st	Z, r24
}
    107c:	0f 90       	pop	r0
    107e:	0f 90       	pop	r0
    1080:	cf 91       	pop	r28
    1082:	df 91       	pop	r29
    1084:	08 95       	ret

00001086 <Timer1_deInit>:

void Timer1_deInit(void)
{
    1086:	df 93       	push	r29
    1088:	cf 93       	push	r28
    108a:	cd b7       	in	r28, 0x3d	; 61
    108c:	de b7       	in	r29, 0x3e	; 62
	/*To deinit the timer we close the clock source to timer*/
	CLEAR_BIT(TCCR1B,CS10);
    108e:	ae e4       	ldi	r26, 0x4E	; 78
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	ee e4       	ldi	r30, 0x4E	; 78
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	8e 7f       	andi	r24, 0xFE	; 254
    109a:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,CS11);
    109c:	ae e4       	ldi	r26, 0x4E	; 78
    109e:	b0 e0       	ldi	r27, 0x00	; 0
    10a0:	ee e4       	ldi	r30, 0x4E	; 78
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	80 81       	ld	r24, Z
    10a6:	8d 7f       	andi	r24, 0xFD	; 253
    10a8:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,CS12);
    10aa:	ae e4       	ldi	r26, 0x4E	; 78
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
    10ae:	ee e4       	ldi	r30, 0x4E	; 78
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	8b 7f       	andi	r24, 0xFB	; 251
    10b6:	8c 93       	st	X, r24

}
    10b8:	cf 91       	pop	r28
    10ba:	df 91       	pop	r29
    10bc:	08 95       	ret

000010be <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void))
{
    10be:	df 93       	push	r29
    10c0:	cf 93       	push	r28
    10c2:	00 d0       	rcall	.+0      	; 0x10c4 <Timer1_setCallBack+0x6>
    10c4:	cd b7       	in	r28, 0x3d	; 61
    10c6:	de b7       	in	r29, 0x3e	; 62
    10c8:	9a 83       	std	Y+2, r25	; 0x02
    10ca:	89 83       	std	Y+1, r24	; 0x01
	g_callBackFun = a_ptr;
    10cc:	89 81       	ldd	r24, Y+1	; 0x01
    10ce:	9a 81       	ldd	r25, Y+2	; 0x02
    10d0:	90 93 85 00 	sts	0x0085, r25
    10d4:	80 93 84 00 	sts	0x0084, r24
}
    10d8:	0f 90       	pop	r0
    10da:	0f 90       	pop	r0
    10dc:	cf 91       	pop	r28
    10de:	df 91       	pop	r29
    10e0:	08 95       	ret

000010e2 <UART_init>:
#include "UART.h"
#include "avr/io.h"
#include "common_macros.h"

void UART_init(UART_configType *configPtr)
{
    10e2:	df 93       	push	r29
    10e4:	cf 93       	push	r28
    10e6:	00 d0       	rcall	.+0      	; 0x10e8 <UART_init+0x6>
    10e8:	0f 92       	push	r0
    10ea:	cd b7       	in	r28, 0x3d	; 61
    10ec:	de b7       	in	r29, 0x3e	; 62
    10ee:	9b 83       	std	Y+3, r25	; 0x03
    10f0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 ubrr_value;
	UCSRA= (1<<U2X);
    10f2:	eb e2       	ldi	r30, 0x2B	; 43
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	82 e0       	ldi	r24, 0x02	; 2
    10f8:	80 83       	st	Z, r24
	/*Double the USART Transmission Speed*/
	UCSRB = (1<<RXEN) | (1<<TXEN) | ( (GET_BIT(configPtr->char_size,2))<<2 );
    10fa:	aa e2       	ldi	r26, 0x2A	; 42
    10fc:	b0 e0       	ldi	r27, 0x00	; 0
    10fe:	ea 81       	ldd	r30, Y+2	; 0x02
    1100:	fb 81       	ldd	r31, Y+3	; 0x03
    1102:	82 81       	ldd	r24, Z+2	; 0x02
    1104:	84 70       	andi	r24, 0x04	; 4
    1106:	88 61       	ori	r24, 0x18	; 24
    1108:	8c 93       	st	X, r24
	/*
	 RXEN Enable the RX
	 TXEN Enable the TX
	 */
	UCSRC = (1<<URSEL) | ( (configPtr->stop_bit)<<USBS)
    110a:	a0 e4       	ldi	r26, 0x40	; 64
    110c:	b0 e0       	ldi	r27, 0x00	; 0
    110e:	ea 81       	ldd	r30, Y+2	; 0x02
    1110:	fb 81       	ldd	r31, Y+3	; 0x03
    1112:	81 81       	ldd	r24, Z+1	; 0x01
    1114:	88 2f       	mov	r24, r24
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	88 0f       	add	r24, r24
    111a:	99 1f       	adc	r25, r25
    111c:	88 0f       	add	r24, r24
    111e:	99 1f       	adc	r25, r25
    1120:	88 0f       	add	r24, r24
    1122:	99 1f       	adc	r25, r25
    1124:	28 2f       	mov	r18, r24
    1126:	20 68       	ori	r18, 0x80	; 128
    1128:	ea 81       	ldd	r30, Y+2	; 0x02
    112a:	fb 81       	ldd	r31, Y+3	; 0x03
    112c:	82 81       	ldd	r24, Z+2	; 0x02
    112e:	88 2f       	mov	r24, r24
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	81 70       	andi	r24, 0x01	; 1
    1134:	90 70       	andi	r25, 0x00	; 0
    1136:	88 0f       	add	r24, r24
    1138:	99 1f       	adc	r25, r25
    113a:	28 2b       	or	r18, r24
    113c:	ea 81       	ldd	r30, Y+2	; 0x02
    113e:	fb 81       	ldd	r31, Y+3	; 0x03
    1140:	82 81       	ldd	r24, Z+2	; 0x02
    1142:	88 2f       	mov	r24, r24
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	82 70       	andi	r24, 0x02	; 2
    1148:	90 70       	andi	r25, 0x00	; 0
    114a:	95 95       	asr	r25
    114c:	87 95       	ror	r24
    114e:	88 0f       	add	r24, r24
    1150:	99 1f       	adc	r25, r25
    1152:	88 0f       	add	r24, r24
    1154:	99 1f       	adc	r25, r25
    1156:	82 2b       	or	r24, r18
    1158:	8c 93       	st	X, r24
					| ((GET_BIT(configPtr->char_size,0))<< 1) | ( (GET_BIT(configPtr->char_size,1))<<2 );
	UCSRC = (UCSRC & 0xCF) | ( (configPtr->parity_mode)<<4 );
    115a:	a0 e4       	ldi	r26, 0x40	; 64
    115c:	b0 e0       	ldi	r27, 0x00	; 0
    115e:	e0 e4       	ldi	r30, 0x40	; 64
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	80 81       	ld	r24, Z
    1164:	28 2f       	mov	r18, r24
    1166:	2f 7c       	andi	r18, 0xCF	; 207
    1168:	ea 81       	ldd	r30, Y+2	; 0x02
    116a:	fb 81       	ldd	r31, Y+3	; 0x03
    116c:	80 81       	ld	r24, Z
    116e:	88 2f       	mov	r24, r24
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	82 95       	swap	r24
    1174:	92 95       	swap	r25
    1176:	90 7f       	andi	r25, 0xF0	; 240
    1178:	98 27       	eor	r25, r24
    117a:	80 7f       	andi	r24, 0xF0	; 240
    117c:	98 27       	eor	r25, r24
    117e:	82 2b       	or	r24, r18
    1180:	8c 93       	st	X, r24
	 Asynchronous operation
	 Parity mode is disable
	 1 bit for stop bit
	 */
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (configPtr->baud_rate * 8UL))) - 1);/*equation in data sheet*/
    1182:	ea 81       	ldd	r30, Y+2	; 0x02
    1184:	fb 81       	ldd	r31, Y+3	; 0x03
    1186:	83 81       	ldd	r24, Z+3	; 0x03
    1188:	94 81       	ldd	r25, Z+4	; 0x04
    118a:	a5 81       	ldd	r26, Z+5	; 0x05
    118c:	b6 81       	ldd	r27, Z+6	; 0x06
    118e:	88 0f       	add	r24, r24
    1190:	99 1f       	adc	r25, r25
    1192:	aa 1f       	adc	r26, r26
    1194:	bb 1f       	adc	r27, r27
    1196:	88 0f       	add	r24, r24
    1198:	99 1f       	adc	r25, r25
    119a:	aa 1f       	adc	r26, r26
    119c:	bb 1f       	adc	r27, r27
    119e:	88 0f       	add	r24, r24
    11a0:	99 1f       	adc	r25, r25
    11a2:	aa 1f       	adc	r26, r26
    11a4:	bb 1f       	adc	r27, r27
    11a6:	9c 01       	movw	r18, r24
    11a8:	ad 01       	movw	r20, r26
    11aa:	80 e4       	ldi	r24, 0x40	; 64
    11ac:	92 e4       	ldi	r25, 0x42	; 66
    11ae:	af e0       	ldi	r26, 0x0F	; 15
    11b0:	b0 e0       	ldi	r27, 0x00	; 0
    11b2:	bc 01       	movw	r22, r24
    11b4:	cd 01       	movw	r24, r26
    11b6:	0e 94 14 1c 	call	0x3828	; 0x3828 <__udivmodsi4>
    11ba:	da 01       	movw	r26, r20
    11bc:	c9 01       	movw	r24, r18
    11be:	81 50       	subi	r24, 0x01	; 1
    11c0:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    11c2:	e0 e4       	ldi	r30, 0x40	; 64
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	89 81       	ldd	r24, Y+1	; 0x01
    11c8:	88 2f       	mov	r24, r24
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	89 2f       	mov	r24, r25
    11ce:	99 0f       	add	r25, r25
    11d0:	99 0b       	sbc	r25, r25
    11d2:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    11d4:	e9 e2       	ldi	r30, 0x29	; 41
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	89 81       	ldd	r24, Y+1	; 0x01
    11da:	80 83       	st	Z, r24

}
    11dc:	0f 90       	pop	r0
    11de:	0f 90       	pop	r0
    11e0:	0f 90       	pop	r0
    11e2:	cf 91       	pop	r28
    11e4:	df 91       	pop	r29
    11e6:	08 95       	ret

000011e8 <UART_sendByte>:


void UART_sendByte(uint8 const data)
{
    11e8:	df 93       	push	r29
    11ea:	cf 93       	push	r28
    11ec:	0f 92       	push	r0
    11ee:	cd b7       	in	r28, 0x3d	; 61
    11f0:	de b7       	in	r29, 0x3e	; 62
    11f2:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(UCSRA,TXC));
	/*we make polling to make sure that we didn't end the function until all bits are shifted to shift register*/
	SET_BIT(UCSRA,TXC);
	/*To clear the flag*/
#else
	while(BIT_IS_CLEAR(UCSRA,UDRE));
    11f4:	eb e2       	ldi	r30, 0x2B	; 43
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	88 2f       	mov	r24, r24
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	80 72       	andi	r24, 0x20	; 32
    1200:	90 70       	andi	r25, 0x00	; 0
    1202:	00 97       	sbiw	r24, 0x00	; 0
    1204:	b9 f3       	breq	.-18     	; 0x11f4 <UART_sendByte+0xc>
	/*This bit is set if the transimeter is ready to receive another byte*/
	UDR = data;
    1206:	ec e2       	ldi	r30, 0x2C	; 44
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	89 81       	ldd	r24, Y+1	; 0x01
    120c:	80 83       	st	Z, r24
#endif
}
    120e:	0f 90       	pop	r0
    1210:	cf 91       	pop	r28
    1212:	df 91       	pop	r29
    1214:	08 95       	ret

00001216 <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    1216:	df 93       	push	r29
    1218:	cf 93       	push	r28
    121a:	cd b7       	in	r28, 0x3d	; 61
    121c:	de b7       	in	r29, 0x3e	; 62
	/*To wait until this bit is 1 ,becase this bit is set when
	  there are data which is ready to be read in UDR*/
	while(BIT_IS_CLEAR(UCSRA,RXC));
    121e:	eb e2       	ldi	r30, 0x2B	; 43
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 81       	ld	r24, Z
    1224:	88 23       	and	r24, r24
    1226:	dc f7       	brge	.-10     	; 0x121e <UART_recieveByte+0x8>
	return UDR;
    1228:	ec e2       	ldi	r30, 0x2C	; 44
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
}
    122e:	cf 91       	pop	r28
    1230:	df 91       	pop	r29
    1232:	08 95       	ret

00001234 <UART_sendString>:

void UART_sendString(const uint8 *str)
{
    1234:	df 93       	push	r29
    1236:	cf 93       	push	r28
    1238:	00 d0       	rcall	.+0      	; 0x123a <UART_sendString+0x6>
    123a:	00 d0       	rcall	.+0      	; 0x123c <UART_sendString+0x8>
    123c:	cd b7       	in	r28, 0x3d	; 61
    123e:	de b7       	in	r29, 0x3e	; 62
    1240:	9c 83       	std	Y+4, r25	; 0x04
    1242:	8b 83       	std	Y+3, r24	; 0x03
	uint16 i=0;
    1244:	1a 82       	std	Y+2, r1	; 0x02
    1246:	19 82       	std	Y+1, r1	; 0x01
    1248:	0f c0       	rjmp	.+30     	; 0x1268 <UART_sendString+0x34>
	while(str[i] != '\0')
	{
		UART_sendByte(str[i]);
    124a:	2b 81       	ldd	r18, Y+3	; 0x03
    124c:	3c 81       	ldd	r19, Y+4	; 0x04
    124e:	89 81       	ldd	r24, Y+1	; 0x01
    1250:	9a 81       	ldd	r25, Y+2	; 0x02
    1252:	f9 01       	movw	r30, r18
    1254:	e8 0f       	add	r30, r24
    1256:	f9 1f       	adc	r31, r25
    1258:	80 81       	ld	r24, Z
    125a:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <UART_sendByte>
		i++;
    125e:	89 81       	ldd	r24, Y+1	; 0x01
    1260:	9a 81       	ldd	r25, Y+2	; 0x02
    1262:	01 96       	adiw	r24, 0x01	; 1
    1264:	9a 83       	std	Y+2, r25	; 0x02
    1266:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *str)
{
	uint16 i=0;
	while(str[i] != '\0')
    1268:	2b 81       	ldd	r18, Y+3	; 0x03
    126a:	3c 81       	ldd	r19, Y+4	; 0x04
    126c:	89 81       	ldd	r24, Y+1	; 0x01
    126e:	9a 81       	ldd	r25, Y+2	; 0x02
    1270:	f9 01       	movw	r30, r18
    1272:	e8 0f       	add	r30, r24
    1274:	f9 1f       	adc	r31, r25
    1276:	80 81       	ld	r24, Z
    1278:	88 23       	and	r24, r24
    127a:	39 f7       	brne	.-50     	; 0x124a <UART_sendString+0x16>
	{
		UART_sendByte(str[i]);
		i++;
	}

}
    127c:	0f 90       	pop	r0
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
    1282:	0f 90       	pop	r0
    1284:	cf 91       	pop	r28
    1286:	df 91       	pop	r29
    1288:	08 95       	ret

0000128a <UART_recieveString>:


void UART_recieveString(uint8 *str)
{
    128a:	0f 93       	push	r16
    128c:	1f 93       	push	r17
    128e:	df 93       	push	r29
    1290:	cf 93       	push	r28
    1292:	00 d0       	rcall	.+0      	; 0x1294 <UART_recieveString+0xa>
    1294:	00 d0       	rcall	.+0      	; 0x1296 <UART_recieveString+0xc>
    1296:	0f 92       	push	r0
    1298:	cd b7       	in	r28, 0x3d	; 61
    129a:	de b7       	in	r29, 0x3e	; 62
    129c:	9c 83       	std	Y+4, r25	; 0x04
    129e:	8b 83       	std	Y+3, r24	; 0x03
	uint16 i=0;
    12a0:	1a 82       	std	Y+2, r1	; 0x02
    12a2:	19 82       	std	Y+1, r1	; 0x01
	str[i]=UART_recieveByte();
    12a4:	2b 81       	ldd	r18, Y+3	; 0x03
    12a6:	3c 81       	ldd	r19, Y+4	; 0x04
    12a8:	89 81       	ldd	r24, Y+1	; 0x01
    12aa:	9a 81       	ldd	r25, Y+2	; 0x02
    12ac:	89 01       	movw	r16, r18
    12ae:	08 0f       	add	r16, r24
    12b0:	19 1f       	adc	r17, r25
    12b2:	0e 94 0b 09 	call	0x1216	; 0x1216 <UART_recieveByte>
    12b6:	f8 01       	movw	r30, r16
    12b8:	80 83       	st	Z, r24
    12ba:	0b c0       	rjmp	.+22     	; 0x12d2 <UART_recieveString+0x48>

	while('#' != str[i++]){
		str[i]=UART_recieveByte();
    12bc:	2b 81       	ldd	r18, Y+3	; 0x03
    12be:	3c 81       	ldd	r19, Y+4	; 0x04
    12c0:	89 81       	ldd	r24, Y+1	; 0x01
    12c2:	9a 81       	ldd	r25, Y+2	; 0x02
    12c4:	89 01       	movw	r16, r18
    12c6:	08 0f       	add	r16, r24
    12c8:	19 1f       	adc	r17, r25
    12ca:	0e 94 0b 09 	call	0x1216	; 0x1216 <UART_recieveByte>
    12ce:	f8 01       	movw	r30, r16
    12d0:	80 83       	st	Z, r24
void UART_recieveString(uint8 *str)
{
	uint16 i=0;
	str[i]=UART_recieveByte();

	while('#' != str[i++]){
    12d2:	2b 81       	ldd	r18, Y+3	; 0x03
    12d4:	3c 81       	ldd	r19, Y+4	; 0x04
    12d6:	89 81       	ldd	r24, Y+1	; 0x01
    12d8:	9a 81       	ldd	r25, Y+2	; 0x02
    12da:	f9 01       	movw	r30, r18
    12dc:	e8 0f       	add	r30, r24
    12de:	f9 1f       	adc	r31, r25
    12e0:	80 81       	ld	r24, Z
    12e2:	1d 82       	std	Y+5, r1	; 0x05
    12e4:	83 32       	cpi	r24, 0x23	; 35
    12e6:	11 f0       	breq	.+4      	; 0x12ec <UART_recieveString+0x62>
    12e8:	f1 e0       	ldi	r31, 0x01	; 1
    12ea:	fd 83       	std	Y+5, r31	; 0x05
    12ec:	89 81       	ldd	r24, Y+1	; 0x01
    12ee:	9a 81       	ldd	r25, Y+2	; 0x02
    12f0:	01 96       	adiw	r24, 0x01	; 1
    12f2:	9a 83       	std	Y+2, r25	; 0x02
    12f4:	89 83       	std	Y+1, r24	; 0x01
    12f6:	8d 81       	ldd	r24, Y+5	; 0x05
    12f8:	88 23       	and	r24, r24
    12fa:	01 f7       	brne	.-64     	; 0x12bc <UART_recieveString+0x32>
		str[i]=UART_recieveByte();
	  }

	str[i]='\0';
    12fc:	8b 81       	ldd	r24, Y+3	; 0x03
    12fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1300:	29 81       	ldd	r18, Y+1	; 0x01
    1302:	3a 81       	ldd	r19, Y+2	; 0x02
    1304:	fc 01       	movw	r30, r24
    1306:	e2 0f       	add	r30, r18
    1308:	f3 1f       	adc	r31, r19
    130a:	10 82       	st	Z, r1
}
    130c:	0f 90       	pop	r0
    130e:	0f 90       	pop	r0
    1310:	0f 90       	pop	r0
    1312:	0f 90       	pop	r0
    1314:	0f 90       	pop	r0
    1316:	cf 91       	pop	r28
    1318:	df 91       	pop	r29
    131a:	1f 91       	pop	r17
    131c:	0f 91       	pop	r16
    131e:	08 95       	ret

00001320 <write_pass_in_eeprom>:
 *
 * Args   : void
 * return : void
 ************************************************************/
void write_pass_in_eeprom(void)
{
    1320:	df 93       	push	r29
    1322:	cf 93       	push	r28
    1324:	cd b7       	in	r28, 0x3d	; 61
    1326:	de b7       	in	r29, 0x3e	; 62
    1328:	60 97       	sbiw	r28, 0x10	; 16
    132a:	0f b6       	in	r0, 0x3f	; 63
    132c:	f8 94       	cli
    132e:	de bf       	out	0x3e, r29	; 62
    1330:	0f be       	out	0x3f, r0	; 63
    1332:	cd bf       	out	0x3d, r28	; 61
	for(int k=0;k<PASS_SIZE;k++)
    1334:	18 8a       	std	Y+16, r1	; 0x10
    1336:	1f 86       	std	Y+15, r1	; 0x0f
    1338:	86 c0       	rjmp	.+268    	; 0x1446 <write_pass_in_eeprom+0x126>
	{
		EEPROM_writeByte(PASSWORD_ADDERESS+k, g_pass[k]);
    133a:	8f 85       	ldd	r24, Y+15	; 0x0f
    133c:	98 89       	ldd	r25, Y+16	; 0x10
    133e:	8f 5e       	subi	r24, 0xEF	; 239
    1340:	9c 4f       	sbci	r25, 0xFC	; 252
    1342:	9c 01       	movw	r18, r24
    1344:	8f 85       	ldd	r24, Y+15	; 0x0f
    1346:	98 89       	ldd	r25, Y+16	; 0x10
    1348:	fc 01       	movw	r30, r24
    134a:	ea 57       	subi	r30, 0x7A	; 122
    134c:	ff 4f       	sbci	r31, 0xFF	; 255
    134e:	40 81       	ld	r20, Z
    1350:	c9 01       	movw	r24, r18
    1352:	64 2f       	mov	r22, r20
    1354:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <EEPROM_writeByte>
    1358:	80 e0       	ldi	r24, 0x00	; 0
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	a0 e2       	ldi	r26, 0x20	; 32
    135e:	b1 e4       	ldi	r27, 0x41	; 65
    1360:	8b 87       	std	Y+11, r24	; 0x0b
    1362:	9c 87       	std	Y+12, r25	; 0x0c
    1364:	ad 87       	std	Y+13, r26	; 0x0d
    1366:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1368:	6b 85       	ldd	r22, Y+11	; 0x0b
    136a:	7c 85       	ldd	r23, Y+12	; 0x0c
    136c:	8d 85       	ldd	r24, Y+13	; 0x0d
    136e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1370:	20 e0       	ldi	r18, 0x00	; 0
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	4a ef       	ldi	r20, 0xFA	; 250
    1376:	54 e4       	ldi	r21, 0x44	; 68
    1378:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    137c:	dc 01       	movw	r26, r24
    137e:	cb 01       	movw	r24, r22
    1380:	8f 83       	std	Y+7, r24	; 0x07
    1382:	98 87       	std	Y+8, r25	; 0x08
    1384:	a9 87       	std	Y+9, r26	; 0x09
    1386:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1388:	6f 81       	ldd	r22, Y+7	; 0x07
    138a:	78 85       	ldd	r23, Y+8	; 0x08
    138c:	89 85       	ldd	r24, Y+9	; 0x09
    138e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1390:	20 e0       	ldi	r18, 0x00	; 0
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	40 e8       	ldi	r20, 0x80	; 128
    1396:	5f e3       	ldi	r21, 0x3F	; 63
    1398:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    139c:	88 23       	and	r24, r24
    139e:	2c f4       	brge	.+10     	; 0x13aa <write_pass_in_eeprom+0x8a>
		__ticks = 1;
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	9e 83       	std	Y+6, r25	; 0x06
    13a6:	8d 83       	std	Y+5, r24	; 0x05
    13a8:	3f c0       	rjmp	.+126    	; 0x1428 <write_pass_in_eeprom+0x108>
	else if (__tmp > 65535)
    13aa:	6f 81       	ldd	r22, Y+7	; 0x07
    13ac:	78 85       	ldd	r23, Y+8	; 0x08
    13ae:	89 85       	ldd	r24, Y+9	; 0x09
    13b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    13b2:	20 e0       	ldi	r18, 0x00	; 0
    13b4:	3f ef       	ldi	r19, 0xFF	; 255
    13b6:	4f e7       	ldi	r20, 0x7F	; 127
    13b8:	57 e4       	ldi	r21, 0x47	; 71
    13ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13be:	18 16       	cp	r1, r24
    13c0:	4c f5       	brge	.+82     	; 0x1414 <write_pass_in_eeprom+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    13c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    13c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    13c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    13ca:	20 e0       	ldi	r18, 0x00	; 0
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	40 e2       	ldi	r20, 0x20	; 32
    13d0:	51 e4       	ldi	r21, 0x41	; 65
    13d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13d6:	dc 01       	movw	r26, r24
    13d8:	cb 01       	movw	r24, r22
    13da:	bc 01       	movw	r22, r24
    13dc:	cd 01       	movw	r24, r26
    13de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13e2:	dc 01       	movw	r26, r24
    13e4:	cb 01       	movw	r24, r22
    13e6:	9e 83       	std	Y+6, r25	; 0x06
    13e8:	8d 83       	std	Y+5, r24	; 0x05
    13ea:	0f c0       	rjmp	.+30     	; 0x140a <write_pass_in_eeprom+0xea>
    13ec:	88 ec       	ldi	r24, 0xC8	; 200
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	9c 83       	std	Y+4, r25	; 0x04
    13f2:	8b 83       	std	Y+3, r24	; 0x03
    13f4:	8b 81       	ldd	r24, Y+3	; 0x03
    13f6:	9c 81       	ldd	r25, Y+4	; 0x04
    13f8:	01 97       	sbiw	r24, 0x01	; 1
    13fa:	f1 f7       	brne	.-4      	; 0x13f8 <write_pass_in_eeprom+0xd8>
    13fc:	9c 83       	std	Y+4, r25	; 0x04
    13fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1400:	8d 81       	ldd	r24, Y+5	; 0x05
    1402:	9e 81       	ldd	r25, Y+6	; 0x06
    1404:	01 97       	sbiw	r24, 0x01	; 1
    1406:	9e 83       	std	Y+6, r25	; 0x06
    1408:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    140a:	8d 81       	ldd	r24, Y+5	; 0x05
    140c:	9e 81       	ldd	r25, Y+6	; 0x06
    140e:	00 97       	sbiw	r24, 0x00	; 0
    1410:	69 f7       	brne	.-38     	; 0x13ec <write_pass_in_eeprom+0xcc>
    1412:	14 c0       	rjmp	.+40     	; 0x143c <write_pass_in_eeprom+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1414:	6f 81       	ldd	r22, Y+7	; 0x07
    1416:	78 85       	ldd	r23, Y+8	; 0x08
    1418:	89 85       	ldd	r24, Y+9	; 0x09
    141a:	9a 85       	ldd	r25, Y+10	; 0x0a
    141c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1420:	dc 01       	movw	r26, r24
    1422:	cb 01       	movw	r24, r22
    1424:	9e 83       	std	Y+6, r25	; 0x06
    1426:	8d 83       	std	Y+5, r24	; 0x05
    1428:	8d 81       	ldd	r24, Y+5	; 0x05
    142a:	9e 81       	ldd	r25, Y+6	; 0x06
    142c:	9a 83       	std	Y+2, r25	; 0x02
    142e:	89 83       	std	Y+1, r24	; 0x01
    1430:	89 81       	ldd	r24, Y+1	; 0x01
    1432:	9a 81       	ldd	r25, Y+2	; 0x02
    1434:	01 97       	sbiw	r24, 0x01	; 1
    1436:	f1 f7       	brne	.-4      	; 0x1434 <write_pass_in_eeprom+0x114>
    1438:	9a 83       	std	Y+2, r25	; 0x02
    143a:	89 83       	std	Y+1, r24	; 0x01
 * Args   : void
 * return : void
 ************************************************************/
void write_pass_in_eeprom(void)
{
	for(int k=0;k<PASS_SIZE;k++)
    143c:	8f 85       	ldd	r24, Y+15	; 0x0f
    143e:	98 89       	ldd	r25, Y+16	; 0x10
    1440:	01 96       	adiw	r24, 0x01	; 1
    1442:	98 8b       	std	Y+16, r25	; 0x10
    1444:	8f 87       	std	Y+15, r24	; 0x0f
    1446:	8f 85       	ldd	r24, Y+15	; 0x0f
    1448:	98 89       	ldd	r25, Y+16	; 0x10
    144a:	85 30       	cpi	r24, 0x05	; 5
    144c:	91 05       	cpc	r25, r1
    144e:	0c f4       	brge	.+2      	; 0x1452 <write_pass_in_eeprom+0x132>
    1450:	74 cf       	rjmp	.-280    	; 0x133a <write_pass_in_eeprom+0x1a>
	{
		EEPROM_writeByte(PASSWORD_ADDERESS+k, g_pass[k]);
		_delay_ms(10);
	}
	LCD_moveCursor(1,0);
    1452:	81 e0       	ldi	r24, 0x01	; 1
    1454:	60 e0       	ldi	r22, 0x00	; 0
    1456:	0e 94 05 1b 	call	0x360a	; 0x360a <LCD_moveCursor>
}
    145a:	60 96       	adiw	r28, 0x10	; 16
    145c:	0f b6       	in	r0, 0x3f	; 63
    145e:	f8 94       	cli
    1460:	de bf       	out	0x3e, r29	; 62
    1462:	0f be       	out	0x3f, r0	; 63
    1464:	cd bf       	out	0x3d, r28	; 61
    1466:	cf 91       	pop	r28
    1468:	df 91       	pop	r29
    146a:	08 95       	ret

0000146c <read_pass_from_eeprom>:
 *
 * Args   : void
 * return : void
 ************************************************************/
static void read_pass_from_eeprom(uint8* a_temp_pass)
{
    146c:	df 93       	push	r29
    146e:	cf 93       	push	r28
    1470:	cd b7       	in	r28, 0x3d	; 61
    1472:	de b7       	in	r29, 0x3e	; 62
    1474:	62 97       	sbiw	r28, 0x12	; 18
    1476:	0f b6       	in	r0, 0x3f	; 63
    1478:	f8 94       	cli
    147a:	de bf       	out	0x3e, r29	; 62
    147c:	0f be       	out	0x3f, r0	; 63
    147e:	cd bf       	out	0x3d, r28	; 61
    1480:	9a 8b       	std	Y+18, r25	; 0x12
    1482:	89 8b       	std	Y+17, r24	; 0x11
	for(int k=0;k<PASS_SIZE;k++)
    1484:	18 8a       	std	Y+16, r1	; 0x10
    1486:	1f 86       	std	Y+15, r1	; 0x0f
    1488:	86 c0       	rjmp	.+268    	; 0x1596 <read_pass_from_eeprom+0x12a>
	{
		EEPROM_readByte(PASSWORD_ADDERESS+k, &a_temp_pass[k]);
    148a:	8f 85       	ldd	r24, Y+15	; 0x0f
    148c:	98 89       	ldd	r25, Y+16	; 0x10
    148e:	8f 5e       	subi	r24, 0xEF	; 239
    1490:	9c 4f       	sbci	r25, 0xFC	; 252
    1492:	ac 01       	movw	r20, r24
    1494:	2f 85       	ldd	r18, Y+15	; 0x0f
    1496:	38 89       	ldd	r19, Y+16	; 0x10
    1498:	89 89       	ldd	r24, Y+17	; 0x11
    149a:	9a 89       	ldd	r25, Y+18	; 0x12
    149c:	28 0f       	add	r18, r24
    149e:	39 1f       	adc	r19, r25
    14a0:	ca 01       	movw	r24, r20
    14a2:	b9 01       	movw	r22, r18
    14a4:	0e 94 9e 0b 	call	0x173c	; 0x173c <EEPROM_readByte>
    14a8:	80 e0       	ldi	r24, 0x00	; 0
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	a0 e2       	ldi	r26, 0x20	; 32
    14ae:	b1 e4       	ldi	r27, 0x41	; 65
    14b0:	8b 87       	std	Y+11, r24	; 0x0b
    14b2:	9c 87       	std	Y+12, r25	; 0x0c
    14b4:	ad 87       	std	Y+13, r26	; 0x0d
    14b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    14ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    14bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    14be:	9e 85       	ldd	r25, Y+14	; 0x0e
    14c0:	20 e0       	ldi	r18, 0x00	; 0
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	4a ef       	ldi	r20, 0xFA	; 250
    14c6:	54 e4       	ldi	r21, 0x44	; 68
    14c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14cc:	dc 01       	movw	r26, r24
    14ce:	cb 01       	movw	r24, r22
    14d0:	8f 83       	std	Y+7, r24	; 0x07
    14d2:	98 87       	std	Y+8, r25	; 0x08
    14d4:	a9 87       	std	Y+9, r26	; 0x09
    14d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14d8:	6f 81       	ldd	r22, Y+7	; 0x07
    14da:	78 85       	ldd	r23, Y+8	; 0x08
    14dc:	89 85       	ldd	r24, Y+9	; 0x09
    14de:	9a 85       	ldd	r25, Y+10	; 0x0a
    14e0:	20 e0       	ldi	r18, 0x00	; 0
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	40 e8       	ldi	r20, 0x80	; 128
    14e6:	5f e3       	ldi	r21, 0x3F	; 63
    14e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14ec:	88 23       	and	r24, r24
    14ee:	2c f4       	brge	.+10     	; 0x14fa <read_pass_from_eeprom+0x8e>
		__ticks = 1;
    14f0:	81 e0       	ldi	r24, 0x01	; 1
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	9e 83       	std	Y+6, r25	; 0x06
    14f6:	8d 83       	std	Y+5, r24	; 0x05
    14f8:	3f c0       	rjmp	.+126    	; 0x1578 <read_pass_from_eeprom+0x10c>
	else if (__tmp > 65535)
    14fa:	6f 81       	ldd	r22, Y+7	; 0x07
    14fc:	78 85       	ldd	r23, Y+8	; 0x08
    14fe:	89 85       	ldd	r24, Y+9	; 0x09
    1500:	9a 85       	ldd	r25, Y+10	; 0x0a
    1502:	20 e0       	ldi	r18, 0x00	; 0
    1504:	3f ef       	ldi	r19, 0xFF	; 255
    1506:	4f e7       	ldi	r20, 0x7F	; 127
    1508:	57 e4       	ldi	r21, 0x47	; 71
    150a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    150e:	18 16       	cp	r1, r24
    1510:	4c f5       	brge	.+82     	; 0x1564 <read_pass_from_eeprom+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1512:	6b 85       	ldd	r22, Y+11	; 0x0b
    1514:	7c 85       	ldd	r23, Y+12	; 0x0c
    1516:	8d 85       	ldd	r24, Y+13	; 0x0d
    1518:	9e 85       	ldd	r25, Y+14	; 0x0e
    151a:	20 e0       	ldi	r18, 0x00	; 0
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	40 e2       	ldi	r20, 0x20	; 32
    1520:	51 e4       	ldi	r21, 0x41	; 65
    1522:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1526:	dc 01       	movw	r26, r24
    1528:	cb 01       	movw	r24, r22
    152a:	bc 01       	movw	r22, r24
    152c:	cd 01       	movw	r24, r26
    152e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1532:	dc 01       	movw	r26, r24
    1534:	cb 01       	movw	r24, r22
    1536:	9e 83       	std	Y+6, r25	; 0x06
    1538:	8d 83       	std	Y+5, r24	; 0x05
    153a:	0f c0       	rjmp	.+30     	; 0x155a <read_pass_from_eeprom+0xee>
    153c:	88 ec       	ldi	r24, 0xC8	; 200
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	9c 83       	std	Y+4, r25	; 0x04
    1542:	8b 83       	std	Y+3, r24	; 0x03
    1544:	8b 81       	ldd	r24, Y+3	; 0x03
    1546:	9c 81       	ldd	r25, Y+4	; 0x04
    1548:	01 97       	sbiw	r24, 0x01	; 1
    154a:	f1 f7       	brne	.-4      	; 0x1548 <read_pass_from_eeprom+0xdc>
    154c:	9c 83       	std	Y+4, r25	; 0x04
    154e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1550:	8d 81       	ldd	r24, Y+5	; 0x05
    1552:	9e 81       	ldd	r25, Y+6	; 0x06
    1554:	01 97       	sbiw	r24, 0x01	; 1
    1556:	9e 83       	std	Y+6, r25	; 0x06
    1558:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    155a:	8d 81       	ldd	r24, Y+5	; 0x05
    155c:	9e 81       	ldd	r25, Y+6	; 0x06
    155e:	00 97       	sbiw	r24, 0x00	; 0
    1560:	69 f7       	brne	.-38     	; 0x153c <read_pass_from_eeprom+0xd0>
    1562:	14 c0       	rjmp	.+40     	; 0x158c <read_pass_from_eeprom+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1564:	6f 81       	ldd	r22, Y+7	; 0x07
    1566:	78 85       	ldd	r23, Y+8	; 0x08
    1568:	89 85       	ldd	r24, Y+9	; 0x09
    156a:	9a 85       	ldd	r25, Y+10	; 0x0a
    156c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1570:	dc 01       	movw	r26, r24
    1572:	cb 01       	movw	r24, r22
    1574:	9e 83       	std	Y+6, r25	; 0x06
    1576:	8d 83       	std	Y+5, r24	; 0x05
    1578:	8d 81       	ldd	r24, Y+5	; 0x05
    157a:	9e 81       	ldd	r25, Y+6	; 0x06
    157c:	9a 83       	std	Y+2, r25	; 0x02
    157e:	89 83       	std	Y+1, r24	; 0x01
    1580:	89 81       	ldd	r24, Y+1	; 0x01
    1582:	9a 81       	ldd	r25, Y+2	; 0x02
    1584:	01 97       	sbiw	r24, 0x01	; 1
    1586:	f1 f7       	brne	.-4      	; 0x1584 <read_pass_from_eeprom+0x118>
    1588:	9a 83       	std	Y+2, r25	; 0x02
    158a:	89 83       	std	Y+1, r24	; 0x01
 * Args   : void
 * return : void
 ************************************************************/
static void read_pass_from_eeprom(uint8* a_temp_pass)
{
	for(int k=0;k<PASS_SIZE;k++)
    158c:	8f 85       	ldd	r24, Y+15	; 0x0f
    158e:	98 89       	ldd	r25, Y+16	; 0x10
    1590:	01 96       	adiw	r24, 0x01	; 1
    1592:	98 8b       	std	Y+16, r25	; 0x10
    1594:	8f 87       	std	Y+15, r24	; 0x0f
    1596:	8f 85       	ldd	r24, Y+15	; 0x0f
    1598:	98 89       	ldd	r25, Y+16	; 0x10
    159a:	85 30       	cpi	r24, 0x05	; 5
    159c:	91 05       	cpc	r25, r1
    159e:	0c f4       	brge	.+2      	; 0x15a2 <read_pass_from_eeprom+0x136>
    15a0:	74 cf       	rjmp	.-280    	; 0x148a <read_pass_from_eeprom+0x1e>
	{
		EEPROM_readByte(PASSWORD_ADDERESS+k, &a_temp_pass[k]);
		_delay_ms(10);
	}
}
    15a2:	62 96       	adiw	r28, 0x12	; 18
    15a4:	0f b6       	in	r0, 0x3f	; 63
    15a6:	f8 94       	cli
    15a8:	de bf       	out	0x3e, r29	; 62
    15aa:	0f be       	out	0x3f, r0	; 63
    15ac:	cd bf       	out	0x3d, r28	; 61
    15ae:	cf 91       	pop	r28
    15b0:	df 91       	pop	r29
    15b2:	08 95       	ret

000015b4 <compare_eeprom_pass_with_your_pass>:
 *
 * Args   : void
 * return : boolean
 ************************************************************/
boolean compare_eeprom_pass_with_your_pass(uint8 *a_your_pass)
{
    15b4:	df 93       	push	r29
    15b6:	cf 93       	push	r28
    15b8:	cd b7       	in	r28, 0x3d	; 61
    15ba:	de b7       	in	r29, 0x3e	; 62
    15bc:	2a 97       	sbiw	r28, 0x0a	; 10
    15be:	0f b6       	in	r0, 0x3f	; 63
    15c0:	f8 94       	cli
    15c2:	de bf       	out	0x3e, r29	; 62
    15c4:	0f be       	out	0x3f, r0	; 63
    15c6:	cd bf       	out	0x3d, r28	; 61
    15c8:	99 87       	std	Y+9, r25	; 0x09
    15ca:	88 87       	std	Y+8, r24	; 0x08
	int i;
	uint8 eemprom_pass[PASS_SIZE];
	read_pass_from_eeprom(eemprom_pass);
    15cc:	ce 01       	movw	r24, r28
    15ce:	03 96       	adiw	r24, 0x03	; 3
    15d0:	0e 94 36 0a 	call	0x146c	; 0x146c <read_pass_from_eeprom>

	LCD_integerToString(eemprom_pass[0]);
    15d4:	8b 81       	ldd	r24, Y+3	; 0x03
    15d6:	88 2f       	mov	r24, r24
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	0e 94 48 1b 	call	0x3690	; 0x3690 <LCD_integerToString>
	LCD_integerToString(a_your_pass[0]);
    15de:	e8 85       	ldd	r30, Y+8	; 0x08
    15e0:	f9 85       	ldd	r31, Y+9	; 0x09
    15e2:	80 81       	ld	r24, Z
    15e4:	88 2f       	mov	r24, r24
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	0e 94 48 1b 	call	0x3690	; 0x3690 <LCD_integerToString>

	for(i=0;i<PASS_SIZE;i++)
    15ec:	1a 82       	std	Y+2, r1	; 0x02
    15ee:	19 82       	std	Y+1, r1	; 0x01
    15f0:	19 c0       	rjmp	.+50     	; 0x1624 <compare_eeprom_pass_with_your_pass+0x70>
	{
		if(eemprom_pass[i] != a_your_pass[i] )
    15f2:	29 81       	ldd	r18, Y+1	; 0x01
    15f4:	3a 81       	ldd	r19, Y+2	; 0x02
    15f6:	ce 01       	movw	r24, r28
    15f8:	03 96       	adiw	r24, 0x03	; 3
    15fa:	fc 01       	movw	r30, r24
    15fc:	e2 0f       	add	r30, r18
    15fe:	f3 1f       	adc	r31, r19
    1600:	40 81       	ld	r20, Z
    1602:	29 81       	ldd	r18, Y+1	; 0x01
    1604:	3a 81       	ldd	r19, Y+2	; 0x02
    1606:	88 85       	ldd	r24, Y+8	; 0x08
    1608:	99 85       	ldd	r25, Y+9	; 0x09
    160a:	fc 01       	movw	r30, r24
    160c:	e2 0f       	add	r30, r18
    160e:	f3 1f       	adc	r31, r19
    1610:	80 81       	ld	r24, Z
    1612:	48 17       	cp	r20, r24
    1614:	11 f0       	breq	.+4      	; 0x161a <compare_eeprom_pass_with_your_pass+0x66>
			return FALSE; /*will return false if they are not same*/
    1616:	1a 86       	std	Y+10, r1	; 0x0a
    1618:	0c c0       	rjmp	.+24     	; 0x1632 <compare_eeprom_pass_with_your_pass+0x7e>
	read_pass_from_eeprom(eemprom_pass);

	LCD_integerToString(eemprom_pass[0]);
	LCD_integerToString(a_your_pass[0]);

	for(i=0;i<PASS_SIZE;i++)
    161a:	89 81       	ldd	r24, Y+1	; 0x01
    161c:	9a 81       	ldd	r25, Y+2	; 0x02
    161e:	01 96       	adiw	r24, 0x01	; 1
    1620:	9a 83       	std	Y+2, r25	; 0x02
    1622:	89 83       	std	Y+1, r24	; 0x01
    1624:	89 81       	ldd	r24, Y+1	; 0x01
    1626:	9a 81       	ldd	r25, Y+2	; 0x02
    1628:	85 30       	cpi	r24, 0x05	; 5
    162a:	91 05       	cpc	r25, r1
    162c:	14 f3       	brlt	.-60     	; 0x15f2 <compare_eeprom_pass_with_your_pass+0x3e>
	{
		if(eemprom_pass[i] != a_your_pass[i] )
			return FALSE; /*will return false if they are not same*/
	}

	return TRUE; /*will return true if two passwords are same*/
    162e:	81 e0       	ldi	r24, 0x01	; 1
    1630:	8a 87       	std	Y+10, r24	; 0x0a
    1632:	8a 85       	ldd	r24, Y+10	; 0x0a
}
    1634:	2a 96       	adiw	r28, 0x0a	; 10
    1636:	0f b6       	in	r0, 0x3f	; 63
    1638:	f8 94       	cli
    163a:	de bf       	out	0x3e, r29	; 62
    163c:	0f be       	out	0x3f, r0	; 63
    163e:	cd bf       	out	0x3d, r28	; 61
    1640:	cf 91       	pop	r28
    1642:	df 91       	pop	r29
    1644:	08 95       	ret

00001646 <DcMotor_Init>:
#include "common_macros.h"



void DcMotor_Init(void)
{
    1646:	df 93       	push	r29
    1648:	cf 93       	push	r28
    164a:	cd b7       	in	r28, 0x3d	; 61
    164c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(H_BRIDGE_PORT_ID,H_BRIDGR_PIN0, OUTPUT);
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	60 e0       	ldi	r22, 0x00	; 0
    1652:	41 e0       	ldi	r20, 0x01	; 1
    1654:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(H_BRIDGE_PORT_ID,H_BRIDGR_PIN1,OUTPUT);  /*set two pins of H bridge */
    1658:	81 e0       	ldi	r24, 0x01	; 1
    165a:	61 e0       	ldi	r22, 0x01	; 1
    165c:	41 e0       	ldi	r20, 0x01	; 1
    165e:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <GPIO_setupPinDirection>

	GPIO_writePin(H_BRIDGE_PORT_ID , H_BRIDGR_PIN0 , LOGIC_LOW);
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	60 e0       	ldi	r22, 0x00	; 0
    1666:	40 e0       	ldi	r20, 0x00	; 0
    1668:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <GPIO_writePin>
	GPIO_writePin(H_BRIDGE_PORT_ID , H_BRIDGR_PIN1 , LOGIC_LOW);
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	61 e0       	ldi	r22, 0x01	; 1
    1670:	40 e0       	ldi	r20, 0x00	; 0
    1672:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <GPIO_writePin>

}
    1676:	cf 91       	pop	r28
    1678:	df 91       	pop	r29
    167a:	08 95       	ret

0000167c <DcMotor_Rotate>:

void DcMotor_Rotate(DcMotor_State state)
{
    167c:	df 93       	push	r29
    167e:	cf 93       	push	r28
    1680:	0f 92       	push	r0
    1682:	cd b7       	in	r28, 0x3d	; 61
    1684:	de b7       	in	r29, 0x3e	; 62
    1686:	89 83       	std	Y+1, r24	; 0x01
    GPIO_writePin(H_BRIDGE_PORT_ID , H_BRIDGR_PIN0 , GET_BIT(state,0));
    1688:	89 81       	ldd	r24, Y+1	; 0x01
    168a:	98 2f       	mov	r25, r24
    168c:	91 70       	andi	r25, 0x01	; 1
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	60 e0       	ldi	r22, 0x00	; 0
    1692:	49 2f       	mov	r20, r25
    1694:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <GPIO_writePin>
    GPIO_writePin(H_BRIDGE_PORT_ID , H_BRIDGR_PIN1 , GET_BIT(state,1));
    1698:	89 81       	ldd	r24, Y+1	; 0x01
    169a:	88 2f       	mov	r24, r24
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	82 70       	andi	r24, 0x02	; 2
    16a0:	90 70       	andi	r25, 0x00	; 0
    16a2:	95 95       	asr	r25
    16a4:	87 95       	ror	r24
    16a6:	98 2f       	mov	r25, r24
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	61 e0       	ldi	r22, 0x01	; 1
    16ac:	49 2f       	mov	r20, r25
    16ae:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <GPIO_writePin>
}
    16b2:	0f 90       	pop	r0
    16b4:	cf 91       	pop	r28
    16b6:	df 91       	pop	r29
    16b8:	08 95       	ret

000016ba <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    16ba:	df 93       	push	r29
    16bc:	cf 93       	push	r28
    16be:	00 d0       	rcall	.+0      	; 0x16c0 <EEPROM_writeByte+0x6>
    16c0:	00 d0       	rcall	.+0      	; 0x16c2 <EEPROM_writeByte+0x8>
    16c2:	cd b7       	in	r28, 0x3d	; 61
    16c4:	de b7       	in	r29, 0x3e	; 62
    16c6:	9a 83       	std	Y+2, r25	; 0x02
    16c8:	89 83       	std	Y+1, r24	; 0x01
    16ca:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    16cc:	0e 94 ad 1b 	call	0x375a	; 0x375a <TWI_start>
    if (TWI_getStatus() != TWI_START)
    16d0:	0e 94 05 1c 	call	0x380a	; 0x380a <TWI_getStatus>
    16d4:	88 30       	cpi	r24, 0x08	; 8
    16d6:	11 f0       	breq	.+4      	; 0x16dc <EEPROM_writeByte+0x22>
        return ERROR;
    16d8:	1c 82       	std	Y+4, r1	; 0x04
    16da:	28 c0       	rjmp	.+80     	; 0x172c <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    16dc:	89 81       	ldd	r24, Y+1	; 0x01
    16de:	9a 81       	ldd	r25, Y+2	; 0x02
    16e0:	80 70       	andi	r24, 0x00	; 0
    16e2:	97 70       	andi	r25, 0x07	; 7
    16e4:	88 0f       	add	r24, r24
    16e6:	89 2f       	mov	r24, r25
    16e8:	88 1f       	adc	r24, r24
    16ea:	99 0b       	sbc	r25, r25
    16ec:	91 95       	neg	r25
    16ee:	80 6a       	ori	r24, 0xA0	; 160
    16f0:	0e 94 c8 1b 	call	0x3790	; 0x3790 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    16f4:	0e 94 05 1c 	call	0x380a	; 0x380a <TWI_getStatus>
    16f8:	88 31       	cpi	r24, 0x18	; 24
    16fa:	11 f0       	breq	.+4      	; 0x1700 <EEPROM_writeByte+0x46>
        return ERROR; 
    16fc:	1c 82       	std	Y+4, r1	; 0x04
    16fe:	16 c0       	rjmp	.+44     	; 0x172c <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1700:	89 81       	ldd	r24, Y+1	; 0x01
    1702:	0e 94 c8 1b 	call	0x3790	; 0x3790 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1706:	0e 94 05 1c 	call	0x380a	; 0x380a <TWI_getStatus>
    170a:	88 32       	cpi	r24, 0x28	; 40
    170c:	11 f0       	breq	.+4      	; 0x1712 <EEPROM_writeByte+0x58>
        return ERROR;
    170e:	1c 82       	std	Y+4, r1	; 0x04
    1710:	0d c0       	rjmp	.+26     	; 0x172c <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1712:	8b 81       	ldd	r24, Y+3	; 0x03
    1714:	0e 94 c8 1b 	call	0x3790	; 0x3790 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1718:	0e 94 05 1c 	call	0x380a	; 0x380a <TWI_getStatus>
    171c:	88 32       	cpi	r24, 0x28	; 40
    171e:	11 f0       	breq	.+4      	; 0x1724 <EEPROM_writeByte+0x6a>
        return ERROR;
    1720:	1c 82       	std	Y+4, r1	; 0x04
    1722:	04 c0       	rjmp	.+8      	; 0x172c <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1724:	0e 94 bd 1b 	call	0x377a	; 0x377a <TWI_stop>
	
    return SUCCESS;
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	8c 83       	std	Y+4, r24	; 0x04
    172c:	8c 81       	ldd	r24, Y+4	; 0x04
}
    172e:	0f 90       	pop	r0
    1730:	0f 90       	pop	r0
    1732:	0f 90       	pop	r0
    1734:	0f 90       	pop	r0
    1736:	cf 91       	pop	r28
    1738:	df 91       	pop	r29
    173a:	08 95       	ret

0000173c <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    173c:	df 93       	push	r29
    173e:	cf 93       	push	r28
    1740:	00 d0       	rcall	.+0      	; 0x1742 <EEPROM_readByte+0x6>
    1742:	00 d0       	rcall	.+0      	; 0x1744 <EEPROM_readByte+0x8>
    1744:	0f 92       	push	r0
    1746:	cd b7       	in	r28, 0x3d	; 61
    1748:	de b7       	in	r29, 0x3e	; 62
    174a:	9a 83       	std	Y+2, r25	; 0x02
    174c:	89 83       	std	Y+1, r24	; 0x01
    174e:	7c 83       	std	Y+4, r23	; 0x04
    1750:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1752:	0e 94 ad 1b 	call	0x375a	; 0x375a <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1756:	0e 94 05 1c 	call	0x380a	; 0x380a <TWI_getStatus>
    175a:	88 30       	cpi	r24, 0x08	; 8
    175c:	11 f0       	breq	.+4      	; 0x1762 <EEPROM_readByte+0x26>
        return ERROR;
    175e:	1d 82       	std	Y+5, r1	; 0x05
    1760:	44 c0       	rjmp	.+136    	; 0x17ea <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1762:	89 81       	ldd	r24, Y+1	; 0x01
    1764:	9a 81       	ldd	r25, Y+2	; 0x02
    1766:	80 70       	andi	r24, 0x00	; 0
    1768:	97 70       	andi	r25, 0x07	; 7
    176a:	88 0f       	add	r24, r24
    176c:	89 2f       	mov	r24, r25
    176e:	88 1f       	adc	r24, r24
    1770:	99 0b       	sbc	r25, r25
    1772:	91 95       	neg	r25
    1774:	80 6a       	ori	r24, 0xA0	; 160
    1776:	0e 94 c8 1b 	call	0x3790	; 0x3790 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    177a:	0e 94 05 1c 	call	0x380a	; 0x380a <TWI_getStatus>
    177e:	88 31       	cpi	r24, 0x18	; 24
    1780:	11 f0       	breq	.+4      	; 0x1786 <EEPROM_readByte+0x4a>
        return ERROR;
    1782:	1d 82       	std	Y+5, r1	; 0x05
    1784:	32 c0       	rjmp	.+100    	; 0x17ea <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1786:	89 81       	ldd	r24, Y+1	; 0x01
    1788:	0e 94 c8 1b 	call	0x3790	; 0x3790 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    178c:	0e 94 05 1c 	call	0x380a	; 0x380a <TWI_getStatus>
    1790:	88 32       	cpi	r24, 0x28	; 40
    1792:	11 f0       	breq	.+4      	; 0x1798 <EEPROM_readByte+0x5c>
        return ERROR;
    1794:	1d 82       	std	Y+5, r1	; 0x05
    1796:	29 c0       	rjmp	.+82     	; 0x17ea <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1798:	0e 94 ad 1b 	call	0x375a	; 0x375a <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    179c:	0e 94 05 1c 	call	0x380a	; 0x380a <TWI_getStatus>
    17a0:	80 31       	cpi	r24, 0x10	; 16
    17a2:	11 f0       	breq	.+4      	; 0x17a8 <EEPROM_readByte+0x6c>
        return ERROR;
    17a4:	1d 82       	std	Y+5, r1	; 0x05
    17a6:	21 c0       	rjmp	.+66     	; 0x17ea <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    17a8:	89 81       	ldd	r24, Y+1	; 0x01
    17aa:	9a 81       	ldd	r25, Y+2	; 0x02
    17ac:	80 70       	andi	r24, 0x00	; 0
    17ae:	97 70       	andi	r25, 0x07	; 7
    17b0:	88 0f       	add	r24, r24
    17b2:	89 2f       	mov	r24, r25
    17b4:	88 1f       	adc	r24, r24
    17b6:	99 0b       	sbc	r25, r25
    17b8:	91 95       	neg	r25
    17ba:	81 6a       	ori	r24, 0xA1	; 161
    17bc:	0e 94 c8 1b 	call	0x3790	; 0x3790 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    17c0:	0e 94 05 1c 	call	0x380a	; 0x380a <TWI_getStatus>
    17c4:	80 34       	cpi	r24, 0x40	; 64
    17c6:	11 f0       	breq	.+4      	; 0x17cc <EEPROM_readByte+0x90>
        return ERROR;
    17c8:	1d 82       	std	Y+5, r1	; 0x05
    17ca:	0f c0       	rjmp	.+30     	; 0x17ea <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    17cc:	0e 94 f2 1b 	call	0x37e4	; 0x37e4 <TWI_readByteWithNACK>
    17d0:	eb 81       	ldd	r30, Y+3	; 0x03
    17d2:	fc 81       	ldd	r31, Y+4	; 0x04
    17d4:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    17d6:	0e 94 05 1c 	call	0x380a	; 0x380a <TWI_getStatus>
    17da:	88 35       	cpi	r24, 0x58	; 88
    17dc:	11 f0       	breq	.+4      	; 0x17e2 <EEPROM_readByte+0xa6>
        return ERROR;
    17de:	1d 82       	std	Y+5, r1	; 0x05
    17e0:	04 c0       	rjmp	.+8      	; 0x17ea <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    17e2:	0e 94 bd 1b 	call	0x377a	; 0x377a <TWI_stop>

    return SUCCESS;
    17e6:	81 e0       	ldi	r24, 0x01	; 1
    17e8:	8d 83       	std	Y+5, r24	; 0x05
    17ea:	8d 81       	ldd	r24, Y+5	; 0x05
}
    17ec:	0f 90       	pop	r0
    17ee:	0f 90       	pop	r0
    17f0:	0f 90       	pop	r0
    17f2:	0f 90       	pop	r0
    17f4:	0f 90       	pop	r0
    17f6:	cf 91       	pop	r28
    17f8:	df 91       	pop	r29
    17fa:	08 95       	ret

000017fc <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    17fc:	df 93       	push	r29
    17fe:	cf 93       	push	r28
    1800:	00 d0       	rcall	.+0      	; 0x1802 <GPIO_setupPinDirection+0x6>
    1802:	00 d0       	rcall	.+0      	; 0x1804 <GPIO_setupPinDirection+0x8>
    1804:	0f 92       	push	r0
    1806:	cd b7       	in	r28, 0x3d	; 61
    1808:	de b7       	in	r29, 0x3e	; 62
    180a:	89 83       	std	Y+1, r24	; 0x01
    180c:	6a 83       	std	Y+2, r22	; 0x02
    180e:	4b 83       	std	Y+3, r20	; 0x03
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */

	if( port_num >= NUM_OF_PORTS || pin_num >= NUM_OF_PINS_PER_PORT)
    1810:	89 81       	ldd	r24, Y+1	; 0x01
    1812:	84 30       	cpi	r24, 0x04	; 4
    1814:	08 f0       	brcs	.+2      	; 0x1818 <GPIO_setupPinDirection+0x1c>
    1816:	d5 c0       	rjmp	.+426    	; 0x19c2 <GPIO_setupPinDirection+0x1c6>
    1818:	8a 81       	ldd	r24, Y+2	; 0x02
    181a:	88 30       	cpi	r24, 0x08	; 8
    181c:	08 f0       	brcs	.+2      	; 0x1820 <GPIO_setupPinDirection+0x24>
    181e:	d1 c0       	rjmp	.+418    	; 0x19c2 <GPIO_setupPinDirection+0x1c6>
	{
		/* do nothing */
	}else
	{
		switch(port_num)
    1820:	89 81       	ldd	r24, Y+1	; 0x01
    1822:	28 2f       	mov	r18, r24
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	3d 83       	std	Y+5, r19	; 0x05
    1828:	2c 83       	std	Y+4, r18	; 0x04
    182a:	8c 81       	ldd	r24, Y+4	; 0x04
    182c:	9d 81       	ldd	r25, Y+5	; 0x05
    182e:	81 30       	cpi	r24, 0x01	; 1
    1830:	91 05       	cpc	r25, r1
    1832:	09 f4       	brne	.+2      	; 0x1836 <GPIO_setupPinDirection+0x3a>
    1834:	43 c0       	rjmp	.+134    	; 0x18bc <GPIO_setupPinDirection+0xc0>
    1836:	2c 81       	ldd	r18, Y+4	; 0x04
    1838:	3d 81       	ldd	r19, Y+5	; 0x05
    183a:	22 30       	cpi	r18, 0x02	; 2
    183c:	31 05       	cpc	r19, r1
    183e:	2c f4       	brge	.+10     	; 0x184a <GPIO_setupPinDirection+0x4e>
    1840:	8c 81       	ldd	r24, Y+4	; 0x04
    1842:	9d 81       	ldd	r25, Y+5	; 0x05
    1844:	00 97       	sbiw	r24, 0x00	; 0
    1846:	71 f0       	breq	.+28     	; 0x1864 <GPIO_setupPinDirection+0x68>
    1848:	bc c0       	rjmp	.+376    	; 0x19c2 <GPIO_setupPinDirection+0x1c6>
    184a:	2c 81       	ldd	r18, Y+4	; 0x04
    184c:	3d 81       	ldd	r19, Y+5	; 0x05
    184e:	22 30       	cpi	r18, 0x02	; 2
    1850:	31 05       	cpc	r19, r1
    1852:	09 f4       	brne	.+2      	; 0x1856 <GPIO_setupPinDirection+0x5a>
    1854:	5f c0       	rjmp	.+190    	; 0x1914 <GPIO_setupPinDirection+0x118>
    1856:	8c 81       	ldd	r24, Y+4	; 0x04
    1858:	9d 81       	ldd	r25, Y+5	; 0x05
    185a:	83 30       	cpi	r24, 0x03	; 3
    185c:	91 05       	cpc	r25, r1
    185e:	09 f4       	brne	.+2      	; 0x1862 <GPIO_setupPinDirection+0x66>
    1860:	85 c0       	rjmp	.+266    	; 0x196c <GPIO_setupPinDirection+0x170>
    1862:	af c0       	rjmp	.+350    	; 0x19c2 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == 1)
    1864:	8b 81       	ldd	r24, Y+3	; 0x03
    1866:	81 30       	cpi	r24, 0x01	; 1
    1868:	a1 f4       	brne	.+40     	; 0x1892 <GPIO_setupPinDirection+0x96>
				SET_BIT(DDRA,pin_num);
    186a:	aa e3       	ldi	r26, 0x3A	; 58
    186c:	b0 e0       	ldi	r27, 0x00	; 0
    186e:	ea e3       	ldi	r30, 0x3A	; 58
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	80 81       	ld	r24, Z
    1874:	48 2f       	mov	r20, r24
    1876:	8a 81       	ldd	r24, Y+2	; 0x02
    1878:	28 2f       	mov	r18, r24
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	02 2e       	mov	r0, r18
    1882:	02 c0       	rjmp	.+4      	; 0x1888 <GPIO_setupPinDirection+0x8c>
    1884:	88 0f       	add	r24, r24
    1886:	99 1f       	adc	r25, r25
    1888:	0a 94       	dec	r0
    188a:	e2 f7       	brpl	.-8      	; 0x1884 <GPIO_setupPinDirection+0x88>
    188c:	84 2b       	or	r24, r20
    188e:	8c 93       	st	X, r24
    1890:	98 c0       	rjmp	.+304    	; 0x19c2 <GPIO_setupPinDirection+0x1c6>
			else
				CLEAR_BIT(DDRA,pin_num);
    1892:	aa e3       	ldi	r26, 0x3A	; 58
    1894:	b0 e0       	ldi	r27, 0x00	; 0
    1896:	ea e3       	ldi	r30, 0x3A	; 58
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	80 81       	ld	r24, Z
    189c:	48 2f       	mov	r20, r24
    189e:	8a 81       	ldd	r24, Y+2	; 0x02
    18a0:	28 2f       	mov	r18, r24
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	81 e0       	ldi	r24, 0x01	; 1
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	02 2e       	mov	r0, r18
    18aa:	02 c0       	rjmp	.+4      	; 0x18b0 <GPIO_setupPinDirection+0xb4>
    18ac:	88 0f       	add	r24, r24
    18ae:	99 1f       	adc	r25, r25
    18b0:	0a 94       	dec	r0
    18b2:	e2 f7       	brpl	.-8      	; 0x18ac <GPIO_setupPinDirection+0xb0>
    18b4:	80 95       	com	r24
    18b6:	84 23       	and	r24, r20
    18b8:	8c 93       	st	X, r24
    18ba:	83 c0       	rjmp	.+262    	; 0x19c2 <GPIO_setupPinDirection+0x1c6>
			break;

		case PORTB_ID:
			if(direction == 1)
    18bc:	8b 81       	ldd	r24, Y+3	; 0x03
    18be:	81 30       	cpi	r24, 0x01	; 1
    18c0:	a1 f4       	brne	.+40     	; 0x18ea <GPIO_setupPinDirection+0xee>
				SET_BIT(DDRB,pin_num);
    18c2:	a7 e3       	ldi	r26, 0x37	; 55
    18c4:	b0 e0       	ldi	r27, 0x00	; 0
    18c6:	e7 e3       	ldi	r30, 0x37	; 55
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	80 81       	ld	r24, Z
    18cc:	48 2f       	mov	r20, r24
    18ce:	8a 81       	ldd	r24, Y+2	; 0x02
    18d0:	28 2f       	mov	r18, r24
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	81 e0       	ldi	r24, 0x01	; 1
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	02 2e       	mov	r0, r18
    18da:	02 c0       	rjmp	.+4      	; 0x18e0 <GPIO_setupPinDirection+0xe4>
    18dc:	88 0f       	add	r24, r24
    18de:	99 1f       	adc	r25, r25
    18e0:	0a 94       	dec	r0
    18e2:	e2 f7       	brpl	.-8      	; 0x18dc <GPIO_setupPinDirection+0xe0>
    18e4:	84 2b       	or	r24, r20
    18e6:	8c 93       	st	X, r24
    18e8:	6c c0       	rjmp	.+216    	; 0x19c2 <GPIO_setupPinDirection+0x1c6>
			else
				CLEAR_BIT(DDRB,pin_num);
    18ea:	a7 e3       	ldi	r26, 0x37	; 55
    18ec:	b0 e0       	ldi	r27, 0x00	; 0
    18ee:	e7 e3       	ldi	r30, 0x37	; 55
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	80 81       	ld	r24, Z
    18f4:	48 2f       	mov	r20, r24
    18f6:	8a 81       	ldd	r24, Y+2	; 0x02
    18f8:	28 2f       	mov	r18, r24
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	02 2e       	mov	r0, r18
    1902:	02 c0       	rjmp	.+4      	; 0x1908 <GPIO_setupPinDirection+0x10c>
    1904:	88 0f       	add	r24, r24
    1906:	99 1f       	adc	r25, r25
    1908:	0a 94       	dec	r0
    190a:	e2 f7       	brpl	.-8      	; 0x1904 <GPIO_setupPinDirection+0x108>
    190c:	80 95       	com	r24
    190e:	84 23       	and	r24, r20
    1910:	8c 93       	st	X, r24
    1912:	57 c0       	rjmp	.+174    	; 0x19c2 <GPIO_setupPinDirection+0x1c6>
			break;

		case PORTC_ID:
			if(direction == 1)
    1914:	8b 81       	ldd	r24, Y+3	; 0x03
    1916:	81 30       	cpi	r24, 0x01	; 1
    1918:	a1 f4       	brne	.+40     	; 0x1942 <GPIO_setupPinDirection+0x146>
				SET_BIT(DDRC,pin_num);
    191a:	a4 e3       	ldi	r26, 0x34	; 52
    191c:	b0 e0       	ldi	r27, 0x00	; 0
    191e:	e4 e3       	ldi	r30, 0x34	; 52
    1920:	f0 e0       	ldi	r31, 0x00	; 0
    1922:	80 81       	ld	r24, Z
    1924:	48 2f       	mov	r20, r24
    1926:	8a 81       	ldd	r24, Y+2	; 0x02
    1928:	28 2f       	mov	r18, r24
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	81 e0       	ldi	r24, 0x01	; 1
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	02 2e       	mov	r0, r18
    1932:	02 c0       	rjmp	.+4      	; 0x1938 <GPIO_setupPinDirection+0x13c>
    1934:	88 0f       	add	r24, r24
    1936:	99 1f       	adc	r25, r25
    1938:	0a 94       	dec	r0
    193a:	e2 f7       	brpl	.-8      	; 0x1934 <GPIO_setupPinDirection+0x138>
    193c:	84 2b       	or	r24, r20
    193e:	8c 93       	st	X, r24
    1940:	40 c0       	rjmp	.+128    	; 0x19c2 <GPIO_setupPinDirection+0x1c6>
			else
				CLEAR_BIT(DDRC,pin_num);
    1942:	a4 e3       	ldi	r26, 0x34	; 52
    1944:	b0 e0       	ldi	r27, 0x00	; 0
    1946:	e4 e3       	ldi	r30, 0x34	; 52
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	80 81       	ld	r24, Z
    194c:	48 2f       	mov	r20, r24
    194e:	8a 81       	ldd	r24, Y+2	; 0x02
    1950:	28 2f       	mov	r18, r24
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	02 2e       	mov	r0, r18
    195a:	02 c0       	rjmp	.+4      	; 0x1960 <GPIO_setupPinDirection+0x164>
    195c:	88 0f       	add	r24, r24
    195e:	99 1f       	adc	r25, r25
    1960:	0a 94       	dec	r0
    1962:	e2 f7       	brpl	.-8      	; 0x195c <GPIO_setupPinDirection+0x160>
    1964:	80 95       	com	r24
    1966:	84 23       	and	r24, r20
    1968:	8c 93       	st	X, r24
    196a:	2b c0       	rjmp	.+86     	; 0x19c2 <GPIO_setupPinDirection+0x1c6>
			break;

		case PORTD_ID:
			if(direction == 1)
    196c:	8b 81       	ldd	r24, Y+3	; 0x03
    196e:	81 30       	cpi	r24, 0x01	; 1
    1970:	a1 f4       	brne	.+40     	; 0x199a <GPIO_setupPinDirection+0x19e>
				SET_BIT(DDRD,pin_num);
    1972:	a1 e3       	ldi	r26, 0x31	; 49
    1974:	b0 e0       	ldi	r27, 0x00	; 0
    1976:	e1 e3       	ldi	r30, 0x31	; 49
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	80 81       	ld	r24, Z
    197c:	48 2f       	mov	r20, r24
    197e:	8a 81       	ldd	r24, Y+2	; 0x02
    1980:	28 2f       	mov	r18, r24
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	81 e0       	ldi	r24, 0x01	; 1
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	02 2e       	mov	r0, r18
    198a:	02 c0       	rjmp	.+4      	; 0x1990 <GPIO_setupPinDirection+0x194>
    198c:	88 0f       	add	r24, r24
    198e:	99 1f       	adc	r25, r25
    1990:	0a 94       	dec	r0
    1992:	e2 f7       	brpl	.-8      	; 0x198c <GPIO_setupPinDirection+0x190>
    1994:	84 2b       	or	r24, r20
    1996:	8c 93       	st	X, r24
    1998:	14 c0       	rjmp	.+40     	; 0x19c2 <GPIO_setupPinDirection+0x1c6>
			else
				CLEAR_BIT(DDRD,pin_num);
    199a:	a1 e3       	ldi	r26, 0x31	; 49
    199c:	b0 e0       	ldi	r27, 0x00	; 0
    199e:	e1 e3       	ldi	r30, 0x31	; 49
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	80 81       	ld	r24, Z
    19a4:	48 2f       	mov	r20, r24
    19a6:	8a 81       	ldd	r24, Y+2	; 0x02
    19a8:	28 2f       	mov	r18, r24
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	02 2e       	mov	r0, r18
    19b2:	02 c0       	rjmp	.+4      	; 0x19b8 <GPIO_setupPinDirection+0x1bc>
    19b4:	88 0f       	add	r24, r24
    19b6:	99 1f       	adc	r25, r25
    19b8:	0a 94       	dec	r0
    19ba:	e2 f7       	brpl	.-8      	; 0x19b4 <GPIO_setupPinDirection+0x1b8>
    19bc:	80 95       	com	r24
    19be:	84 23       	and	r24, r20
    19c0:	8c 93       	st	X, r24
		}
	}
}
    19c2:	0f 90       	pop	r0
    19c4:	0f 90       	pop	r0
    19c6:	0f 90       	pop	r0
    19c8:	0f 90       	pop	r0
    19ca:	0f 90       	pop	r0
    19cc:	cf 91       	pop	r28
    19ce:	df 91       	pop	r29
    19d0:	08 95       	ret

000019d2 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    19d2:	df 93       	push	r29
    19d4:	cf 93       	push	r28
    19d6:	00 d0       	rcall	.+0      	; 0x19d8 <GPIO_writePin+0x6>
    19d8:	00 d0       	rcall	.+0      	; 0x19da <GPIO_writePin+0x8>
    19da:	0f 92       	push	r0
    19dc:	cd b7       	in	r28, 0x3d	; 61
    19de:	de b7       	in	r29, 0x3e	; 62
    19e0:	89 83       	std	Y+1, r24	; 0x01
    19e2:	6a 83       	std	Y+2, r22	; 0x02
    19e4:	4b 83       	std	Y+3, r20	; 0x03
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */

	if(port_num >= NUM_OF_PORTS || pin_num >= NUM_OF_PINS_PER_PORT)
    19e6:	89 81       	ldd	r24, Y+1	; 0x01
    19e8:	84 30       	cpi	r24, 0x04	; 4
    19ea:	08 f0       	brcs	.+2      	; 0x19ee <GPIO_writePin+0x1c>
    19ec:	d5 c0       	rjmp	.+426    	; 0x1b98 <GPIO_writePin+0x1c6>
    19ee:	8a 81       	ldd	r24, Y+2	; 0x02
    19f0:	88 30       	cpi	r24, 0x08	; 8
    19f2:	08 f0       	brcs	.+2      	; 0x19f6 <GPIO_writePin+0x24>
    19f4:	d1 c0       	rjmp	.+418    	; 0x1b98 <GPIO_writePin+0x1c6>
	{
		/*Do nothing*/
	}else
	{
		switch(port_num)
    19f6:	89 81       	ldd	r24, Y+1	; 0x01
    19f8:	28 2f       	mov	r18, r24
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	3d 83       	std	Y+5, r19	; 0x05
    19fe:	2c 83       	std	Y+4, r18	; 0x04
    1a00:	8c 81       	ldd	r24, Y+4	; 0x04
    1a02:	9d 81       	ldd	r25, Y+5	; 0x05
    1a04:	81 30       	cpi	r24, 0x01	; 1
    1a06:	91 05       	cpc	r25, r1
    1a08:	09 f4       	brne	.+2      	; 0x1a0c <GPIO_writePin+0x3a>
    1a0a:	43 c0       	rjmp	.+134    	; 0x1a92 <GPIO_writePin+0xc0>
    1a0c:	2c 81       	ldd	r18, Y+4	; 0x04
    1a0e:	3d 81       	ldd	r19, Y+5	; 0x05
    1a10:	22 30       	cpi	r18, 0x02	; 2
    1a12:	31 05       	cpc	r19, r1
    1a14:	2c f4       	brge	.+10     	; 0x1a20 <GPIO_writePin+0x4e>
    1a16:	8c 81       	ldd	r24, Y+4	; 0x04
    1a18:	9d 81       	ldd	r25, Y+5	; 0x05
    1a1a:	00 97       	sbiw	r24, 0x00	; 0
    1a1c:	71 f0       	breq	.+28     	; 0x1a3a <GPIO_writePin+0x68>
    1a1e:	bc c0       	rjmp	.+376    	; 0x1b98 <GPIO_writePin+0x1c6>
    1a20:	2c 81       	ldd	r18, Y+4	; 0x04
    1a22:	3d 81       	ldd	r19, Y+5	; 0x05
    1a24:	22 30       	cpi	r18, 0x02	; 2
    1a26:	31 05       	cpc	r19, r1
    1a28:	09 f4       	brne	.+2      	; 0x1a2c <GPIO_writePin+0x5a>
    1a2a:	5f c0       	rjmp	.+190    	; 0x1aea <GPIO_writePin+0x118>
    1a2c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a2e:	9d 81       	ldd	r25, Y+5	; 0x05
    1a30:	83 30       	cpi	r24, 0x03	; 3
    1a32:	91 05       	cpc	r25, r1
    1a34:	09 f4       	brne	.+2      	; 0x1a38 <GPIO_writePin+0x66>
    1a36:	85 c0       	rjmp	.+266    	; 0x1b42 <GPIO_writePin+0x170>
    1a38:	af c0       	rjmp	.+350    	; 0x1b98 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == 1)
    1a3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3c:	81 30       	cpi	r24, 0x01	; 1
    1a3e:	a1 f4       	brne	.+40     	; 0x1a68 <GPIO_writePin+0x96>
				SET_BIT(PORTA,pin_num);
    1a40:	ab e3       	ldi	r26, 0x3B	; 59
    1a42:	b0 e0       	ldi	r27, 0x00	; 0
    1a44:	eb e3       	ldi	r30, 0x3B	; 59
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	80 81       	ld	r24, Z
    1a4a:	48 2f       	mov	r20, r24
    1a4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4e:	28 2f       	mov	r18, r24
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	02 2e       	mov	r0, r18
    1a58:	02 c0       	rjmp	.+4      	; 0x1a5e <GPIO_writePin+0x8c>
    1a5a:	88 0f       	add	r24, r24
    1a5c:	99 1f       	adc	r25, r25
    1a5e:	0a 94       	dec	r0
    1a60:	e2 f7       	brpl	.-8      	; 0x1a5a <GPIO_writePin+0x88>
    1a62:	84 2b       	or	r24, r20
    1a64:	8c 93       	st	X, r24
    1a66:	98 c0       	rjmp	.+304    	; 0x1b98 <GPIO_writePin+0x1c6>
			else
				CLEAR_BIT(PORTA,pin_num);
    1a68:	ab e3       	ldi	r26, 0x3B	; 59
    1a6a:	b0 e0       	ldi	r27, 0x00	; 0
    1a6c:	eb e3       	ldi	r30, 0x3B	; 59
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	80 81       	ld	r24, Z
    1a72:	48 2f       	mov	r20, r24
    1a74:	8a 81       	ldd	r24, Y+2	; 0x02
    1a76:	28 2f       	mov	r18, r24
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	02 2e       	mov	r0, r18
    1a80:	02 c0       	rjmp	.+4      	; 0x1a86 <GPIO_writePin+0xb4>
    1a82:	88 0f       	add	r24, r24
    1a84:	99 1f       	adc	r25, r25
    1a86:	0a 94       	dec	r0
    1a88:	e2 f7       	brpl	.-8      	; 0x1a82 <GPIO_writePin+0xb0>
    1a8a:	80 95       	com	r24
    1a8c:	84 23       	and	r24, r20
    1a8e:	8c 93       	st	X, r24
    1a90:	83 c0       	rjmp	.+262    	; 0x1b98 <GPIO_writePin+0x1c6>
			break;

		case PORTB_ID:
			if(value == 1)
    1a92:	8b 81       	ldd	r24, Y+3	; 0x03
    1a94:	81 30       	cpi	r24, 0x01	; 1
    1a96:	a1 f4       	brne	.+40     	; 0x1ac0 <GPIO_writePin+0xee>
				SET_BIT(PORTB,pin_num);
    1a98:	a8 e3       	ldi	r26, 0x38	; 56
    1a9a:	b0 e0       	ldi	r27, 0x00	; 0
    1a9c:	e8 e3       	ldi	r30, 0x38	; 56
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	80 81       	ld	r24, Z
    1aa2:	48 2f       	mov	r20, r24
    1aa4:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa6:	28 2f       	mov	r18, r24
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	81 e0       	ldi	r24, 0x01	; 1
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	02 2e       	mov	r0, r18
    1ab0:	02 c0       	rjmp	.+4      	; 0x1ab6 <GPIO_writePin+0xe4>
    1ab2:	88 0f       	add	r24, r24
    1ab4:	99 1f       	adc	r25, r25
    1ab6:	0a 94       	dec	r0
    1ab8:	e2 f7       	brpl	.-8      	; 0x1ab2 <GPIO_writePin+0xe0>
    1aba:	84 2b       	or	r24, r20
    1abc:	8c 93       	st	X, r24
    1abe:	6c c0       	rjmp	.+216    	; 0x1b98 <GPIO_writePin+0x1c6>
			else
				CLEAR_BIT(PORTB,pin_num);
    1ac0:	a8 e3       	ldi	r26, 0x38	; 56
    1ac2:	b0 e0       	ldi	r27, 0x00	; 0
    1ac4:	e8 e3       	ldi	r30, 0x38	; 56
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	80 81       	ld	r24, Z
    1aca:	48 2f       	mov	r20, r24
    1acc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ace:	28 2f       	mov	r18, r24
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	81 e0       	ldi	r24, 0x01	; 1
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	02 2e       	mov	r0, r18
    1ad8:	02 c0       	rjmp	.+4      	; 0x1ade <GPIO_writePin+0x10c>
    1ada:	88 0f       	add	r24, r24
    1adc:	99 1f       	adc	r25, r25
    1ade:	0a 94       	dec	r0
    1ae0:	e2 f7       	brpl	.-8      	; 0x1ada <GPIO_writePin+0x108>
    1ae2:	80 95       	com	r24
    1ae4:	84 23       	and	r24, r20
    1ae6:	8c 93       	st	X, r24
    1ae8:	57 c0       	rjmp	.+174    	; 0x1b98 <GPIO_writePin+0x1c6>
			break;

		case PORTC_ID:
			if(value == 1)
    1aea:	8b 81       	ldd	r24, Y+3	; 0x03
    1aec:	81 30       	cpi	r24, 0x01	; 1
    1aee:	a1 f4       	brne	.+40     	; 0x1b18 <GPIO_writePin+0x146>
				SET_BIT(PORTC,pin_num);
    1af0:	a5 e3       	ldi	r26, 0x35	; 53
    1af2:	b0 e0       	ldi	r27, 0x00	; 0
    1af4:	e5 e3       	ldi	r30, 0x35	; 53
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	80 81       	ld	r24, Z
    1afa:	48 2f       	mov	r20, r24
    1afc:	8a 81       	ldd	r24, Y+2	; 0x02
    1afe:	28 2f       	mov	r18, r24
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	02 2e       	mov	r0, r18
    1b08:	02 c0       	rjmp	.+4      	; 0x1b0e <GPIO_writePin+0x13c>
    1b0a:	88 0f       	add	r24, r24
    1b0c:	99 1f       	adc	r25, r25
    1b0e:	0a 94       	dec	r0
    1b10:	e2 f7       	brpl	.-8      	; 0x1b0a <GPIO_writePin+0x138>
    1b12:	84 2b       	or	r24, r20
    1b14:	8c 93       	st	X, r24
    1b16:	40 c0       	rjmp	.+128    	; 0x1b98 <GPIO_writePin+0x1c6>
			else
				CLEAR_BIT(PORTC,pin_num);
    1b18:	a5 e3       	ldi	r26, 0x35	; 53
    1b1a:	b0 e0       	ldi	r27, 0x00	; 0
    1b1c:	e5 e3       	ldi	r30, 0x35	; 53
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	80 81       	ld	r24, Z
    1b22:	48 2f       	mov	r20, r24
    1b24:	8a 81       	ldd	r24, Y+2	; 0x02
    1b26:	28 2f       	mov	r18, r24
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	81 e0       	ldi	r24, 0x01	; 1
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	02 2e       	mov	r0, r18
    1b30:	02 c0       	rjmp	.+4      	; 0x1b36 <GPIO_writePin+0x164>
    1b32:	88 0f       	add	r24, r24
    1b34:	99 1f       	adc	r25, r25
    1b36:	0a 94       	dec	r0
    1b38:	e2 f7       	brpl	.-8      	; 0x1b32 <GPIO_writePin+0x160>
    1b3a:	80 95       	com	r24
    1b3c:	84 23       	and	r24, r20
    1b3e:	8c 93       	st	X, r24
    1b40:	2b c0       	rjmp	.+86     	; 0x1b98 <GPIO_writePin+0x1c6>
			break;

		case PORTD_ID:
			if(value == 1)
    1b42:	8b 81       	ldd	r24, Y+3	; 0x03
    1b44:	81 30       	cpi	r24, 0x01	; 1
    1b46:	a1 f4       	brne	.+40     	; 0x1b70 <GPIO_writePin+0x19e>
				SET_BIT(PORTD,pin_num);
    1b48:	a2 e3       	ldi	r26, 0x32	; 50
    1b4a:	b0 e0       	ldi	r27, 0x00	; 0
    1b4c:	e2 e3       	ldi	r30, 0x32	; 50
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	80 81       	ld	r24, Z
    1b52:	48 2f       	mov	r20, r24
    1b54:	8a 81       	ldd	r24, Y+2	; 0x02
    1b56:	28 2f       	mov	r18, r24
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	81 e0       	ldi	r24, 0x01	; 1
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	02 2e       	mov	r0, r18
    1b60:	02 c0       	rjmp	.+4      	; 0x1b66 <GPIO_writePin+0x194>
    1b62:	88 0f       	add	r24, r24
    1b64:	99 1f       	adc	r25, r25
    1b66:	0a 94       	dec	r0
    1b68:	e2 f7       	brpl	.-8      	; 0x1b62 <GPIO_writePin+0x190>
    1b6a:	84 2b       	or	r24, r20
    1b6c:	8c 93       	st	X, r24
    1b6e:	14 c0       	rjmp	.+40     	; 0x1b98 <GPIO_writePin+0x1c6>
			else
				CLEAR_BIT(PORTD,pin_num);
    1b70:	a2 e3       	ldi	r26, 0x32	; 50
    1b72:	b0 e0       	ldi	r27, 0x00	; 0
    1b74:	e2 e3       	ldi	r30, 0x32	; 50
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	80 81       	ld	r24, Z
    1b7a:	48 2f       	mov	r20, r24
    1b7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7e:	28 2f       	mov	r18, r24
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	81 e0       	ldi	r24, 0x01	; 1
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	02 2e       	mov	r0, r18
    1b88:	02 c0       	rjmp	.+4      	; 0x1b8e <GPIO_writePin+0x1bc>
    1b8a:	88 0f       	add	r24, r24
    1b8c:	99 1f       	adc	r25, r25
    1b8e:	0a 94       	dec	r0
    1b90:	e2 f7       	brpl	.-8      	; 0x1b8a <GPIO_writePin+0x1b8>
    1b92:	80 95       	com	r24
    1b94:	84 23       	and	r24, r20
    1b96:	8c 93       	st	X, r24
		}


	}
}
    1b98:	0f 90       	pop	r0
    1b9a:	0f 90       	pop	r0
    1b9c:	0f 90       	pop	r0
    1b9e:	0f 90       	pop	r0
    1ba0:	0f 90       	pop	r0
    1ba2:	cf 91       	pop	r28
    1ba4:	df 91       	pop	r29
    1ba6:	08 95       	ret

00001ba8 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1ba8:	df 93       	push	r29
    1baa:	cf 93       	push	r28
    1bac:	00 d0       	rcall	.+0      	; 0x1bae <GPIO_readPin+0x6>
    1bae:	00 d0       	rcall	.+0      	; 0x1bb0 <GPIO_readPin+0x8>
    1bb0:	0f 92       	push	r0
    1bb2:	cd b7       	in	r28, 0x3d	; 61
    1bb4:	de b7       	in	r29, 0x3e	; 62
    1bb6:	89 83       	std	Y+1, r24	; 0x01
    1bb8:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1bba:	8a 81       	ldd	r24, Y+2	; 0x02
    1bbc:	88 30       	cpi	r24, 0x08	; 8
    1bbe:	08 f0       	brcs	.+2      	; 0x1bc2 <GPIO_readPin+0x1a>
    1bc0:	85 c0       	rjmp	.+266    	; 0x1ccc <GPIO_readPin+0x124>
    1bc2:	89 81       	ldd	r24, Y+1	; 0x01
    1bc4:	84 30       	cpi	r24, 0x04	; 4
    1bc6:	08 f0       	brcs	.+2      	; 0x1bca <GPIO_readPin+0x22>
    1bc8:	81 c0       	rjmp	.+258    	; 0x1ccc <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1bca:	89 81       	ldd	r24, Y+1	; 0x01
    1bcc:	28 2f       	mov	r18, r24
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	3d 83       	std	Y+5, r19	; 0x05
    1bd2:	2c 83       	std	Y+4, r18	; 0x04
    1bd4:	4c 81       	ldd	r20, Y+4	; 0x04
    1bd6:	5d 81       	ldd	r21, Y+5	; 0x05
    1bd8:	41 30       	cpi	r20, 0x01	; 1
    1bda:	51 05       	cpc	r21, r1
    1bdc:	79 f1       	breq	.+94     	; 0x1c3c <GPIO_readPin+0x94>
    1bde:	8c 81       	ldd	r24, Y+4	; 0x04
    1be0:	9d 81       	ldd	r25, Y+5	; 0x05
    1be2:	82 30       	cpi	r24, 0x02	; 2
    1be4:	91 05       	cpc	r25, r1
    1be6:	34 f4       	brge	.+12     	; 0x1bf4 <GPIO_readPin+0x4c>
    1be8:	2c 81       	ldd	r18, Y+4	; 0x04
    1bea:	3d 81       	ldd	r19, Y+5	; 0x05
    1bec:	21 15       	cp	r18, r1
    1bee:	31 05       	cpc	r19, r1
    1bf0:	69 f0       	breq	.+26     	; 0x1c0c <GPIO_readPin+0x64>
    1bf2:	6c c0       	rjmp	.+216    	; 0x1ccc <GPIO_readPin+0x124>
    1bf4:	4c 81       	ldd	r20, Y+4	; 0x04
    1bf6:	5d 81       	ldd	r21, Y+5	; 0x05
    1bf8:	42 30       	cpi	r20, 0x02	; 2
    1bfa:	51 05       	cpc	r21, r1
    1bfc:	b9 f1       	breq	.+110    	; 0x1c6c <GPIO_readPin+0xc4>
    1bfe:	8c 81       	ldd	r24, Y+4	; 0x04
    1c00:	9d 81       	ldd	r25, Y+5	; 0x05
    1c02:	83 30       	cpi	r24, 0x03	; 3
    1c04:	91 05       	cpc	r25, r1
    1c06:	09 f4       	brne	.+2      	; 0x1c0a <GPIO_readPin+0x62>
    1c08:	49 c0       	rjmp	.+146    	; 0x1c9c <GPIO_readPin+0xf4>
    1c0a:	60 c0       	rjmp	.+192    	; 0x1ccc <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if( BIT_IS_SET(PINA , pin_num) )
    1c0c:	e9 e3       	ldi	r30, 0x39	; 57
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	28 2f       	mov	r18, r24
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	8a 81       	ldd	r24, Y+2	; 0x02
    1c18:	88 2f       	mov	r24, r24
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	a9 01       	movw	r20, r18
    1c1e:	02 c0       	rjmp	.+4      	; 0x1c24 <GPIO_readPin+0x7c>
    1c20:	55 95       	asr	r21
    1c22:	47 95       	ror	r20
    1c24:	8a 95       	dec	r24
    1c26:	e2 f7       	brpl	.-8      	; 0x1c20 <GPIO_readPin+0x78>
    1c28:	ca 01       	movw	r24, r20
    1c2a:	81 70       	andi	r24, 0x01	; 1
    1c2c:	90 70       	andi	r25, 0x00	; 0
    1c2e:	88 23       	and	r24, r24
    1c30:	19 f0       	breq	.+6      	; 0x1c38 <GPIO_readPin+0x90>
				return 1;
    1c32:	51 e0       	ldi	r21, 0x01	; 1
    1c34:	5b 83       	std	Y+3, r21	; 0x03
    1c36:	4b c0       	rjmp	.+150    	; 0x1cce <GPIO_readPin+0x126>
			else
				return 0;
    1c38:	1b 82       	std	Y+3, r1	; 0x03
    1c3a:	49 c0       	rjmp	.+146    	; 0x1cce <GPIO_readPin+0x126>
			break;

		case PORTB_ID:
			if( BIT_IS_SET(PINB , pin_num) )
    1c3c:	e6 e3       	ldi	r30, 0x36	; 54
    1c3e:	f0 e0       	ldi	r31, 0x00	; 0
    1c40:	80 81       	ld	r24, Z
    1c42:	28 2f       	mov	r18, r24
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	8a 81       	ldd	r24, Y+2	; 0x02
    1c48:	88 2f       	mov	r24, r24
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	a9 01       	movw	r20, r18
    1c4e:	02 c0       	rjmp	.+4      	; 0x1c54 <GPIO_readPin+0xac>
    1c50:	55 95       	asr	r21
    1c52:	47 95       	ror	r20
    1c54:	8a 95       	dec	r24
    1c56:	e2 f7       	brpl	.-8      	; 0x1c50 <GPIO_readPin+0xa8>
    1c58:	ca 01       	movw	r24, r20
    1c5a:	81 70       	andi	r24, 0x01	; 1
    1c5c:	90 70       	andi	r25, 0x00	; 0
    1c5e:	88 23       	and	r24, r24
    1c60:	19 f0       	breq	.+6      	; 0x1c68 <GPIO_readPin+0xc0>
				return 1;
    1c62:	51 e0       	ldi	r21, 0x01	; 1
    1c64:	5b 83       	std	Y+3, r21	; 0x03
    1c66:	33 c0       	rjmp	.+102    	; 0x1cce <GPIO_readPin+0x126>
			else
				return 0;
    1c68:	1b 82       	std	Y+3, r1	; 0x03
    1c6a:	31 c0       	rjmp	.+98     	; 0x1cce <GPIO_readPin+0x126>
			break;

		case PORTC_ID:
			if( BIT_IS_SET(PINC , pin_num) )
    1c6c:	e3 e3       	ldi	r30, 0x33	; 51
    1c6e:	f0 e0       	ldi	r31, 0x00	; 0
    1c70:	80 81       	ld	r24, Z
    1c72:	28 2f       	mov	r18, r24
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	8a 81       	ldd	r24, Y+2	; 0x02
    1c78:	88 2f       	mov	r24, r24
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	a9 01       	movw	r20, r18
    1c7e:	02 c0       	rjmp	.+4      	; 0x1c84 <GPIO_readPin+0xdc>
    1c80:	55 95       	asr	r21
    1c82:	47 95       	ror	r20
    1c84:	8a 95       	dec	r24
    1c86:	e2 f7       	brpl	.-8      	; 0x1c80 <GPIO_readPin+0xd8>
    1c88:	ca 01       	movw	r24, r20
    1c8a:	81 70       	andi	r24, 0x01	; 1
    1c8c:	90 70       	andi	r25, 0x00	; 0
    1c8e:	88 23       	and	r24, r24
    1c90:	19 f0       	breq	.+6      	; 0x1c98 <GPIO_readPin+0xf0>
				return 1;
    1c92:	51 e0       	ldi	r21, 0x01	; 1
    1c94:	5b 83       	std	Y+3, r21	; 0x03
    1c96:	1b c0       	rjmp	.+54     	; 0x1cce <GPIO_readPin+0x126>
			else
				return 0;
    1c98:	1b 82       	std	Y+3, r1	; 0x03
    1c9a:	19 c0       	rjmp	.+50     	; 0x1cce <GPIO_readPin+0x126>
			break;

		case PORTD_ID:
			if( BIT_IS_SET(PIND , pin_num) )
    1c9c:	e0 e3       	ldi	r30, 0x30	; 48
    1c9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ca0:	80 81       	ld	r24, Z
    1ca2:	28 2f       	mov	r18, r24
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca8:	88 2f       	mov	r24, r24
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	a9 01       	movw	r20, r18
    1cae:	02 c0       	rjmp	.+4      	; 0x1cb4 <GPIO_readPin+0x10c>
    1cb0:	55 95       	asr	r21
    1cb2:	47 95       	ror	r20
    1cb4:	8a 95       	dec	r24
    1cb6:	e2 f7       	brpl	.-8      	; 0x1cb0 <GPIO_readPin+0x108>
    1cb8:	ca 01       	movw	r24, r20
    1cba:	81 70       	andi	r24, 0x01	; 1
    1cbc:	90 70       	andi	r25, 0x00	; 0
    1cbe:	88 23       	and	r24, r24
    1cc0:	19 f0       	breq	.+6      	; 0x1cc8 <GPIO_readPin+0x120>
				return 1;
    1cc2:	51 e0       	ldi	r21, 0x01	; 1
    1cc4:	5b 83       	std	Y+3, r21	; 0x03
    1cc6:	03 c0       	rjmp	.+6      	; 0x1cce <GPIO_readPin+0x126>
			else
				return 0;
    1cc8:	1b 82       	std	Y+3, r1	; 0x03
    1cca:	01 c0       	rjmp	.+2      	; 0x1cce <GPIO_readPin+0x126>
			break;
		}
	}
	return 0;
    1ccc:	1b 82       	std	Y+3, r1	; 0x03
    1cce:	8b 81       	ldd	r24, Y+3	; 0x03

}
    1cd0:	0f 90       	pop	r0
    1cd2:	0f 90       	pop	r0
    1cd4:	0f 90       	pop	r0
    1cd6:	0f 90       	pop	r0
    1cd8:	0f 90       	pop	r0
    1cda:	cf 91       	pop	r28
    1cdc:	df 91       	pop	r29
    1cde:	08 95       	ret

00001ce0 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1ce0:	df 93       	push	r29
    1ce2:	cf 93       	push	r28
    1ce4:	00 d0       	rcall	.+0      	; 0x1ce6 <GPIO_setupPortDirection+0x6>
    1ce6:	00 d0       	rcall	.+0      	; 0x1ce8 <GPIO_setupPortDirection+0x8>
    1ce8:	cd b7       	in	r28, 0x3d	; 61
    1cea:	de b7       	in	r29, 0x3e	; 62
    1cec:	89 83       	std	Y+1, r24	; 0x01
    1cee:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1cf0:	89 81       	ldd	r24, Y+1	; 0x01
    1cf2:	84 30       	cpi	r24, 0x04	; 4
    1cf4:	90 f5       	brcc	.+100    	; 0x1d5a <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1cf6:	89 81       	ldd	r24, Y+1	; 0x01
    1cf8:	28 2f       	mov	r18, r24
    1cfa:	30 e0       	ldi	r19, 0x00	; 0
    1cfc:	3c 83       	std	Y+4, r19	; 0x04
    1cfe:	2b 83       	std	Y+3, r18	; 0x03
    1d00:	8b 81       	ldd	r24, Y+3	; 0x03
    1d02:	9c 81       	ldd	r25, Y+4	; 0x04
    1d04:	81 30       	cpi	r24, 0x01	; 1
    1d06:	91 05       	cpc	r25, r1
    1d08:	d1 f0       	breq	.+52     	; 0x1d3e <GPIO_setupPortDirection+0x5e>
    1d0a:	2b 81       	ldd	r18, Y+3	; 0x03
    1d0c:	3c 81       	ldd	r19, Y+4	; 0x04
    1d0e:	22 30       	cpi	r18, 0x02	; 2
    1d10:	31 05       	cpc	r19, r1
    1d12:	2c f4       	brge	.+10     	; 0x1d1e <GPIO_setupPortDirection+0x3e>
    1d14:	8b 81       	ldd	r24, Y+3	; 0x03
    1d16:	9c 81       	ldd	r25, Y+4	; 0x04
    1d18:	00 97       	sbiw	r24, 0x00	; 0
    1d1a:	61 f0       	breq	.+24     	; 0x1d34 <GPIO_setupPortDirection+0x54>
    1d1c:	1e c0       	rjmp	.+60     	; 0x1d5a <GPIO_setupPortDirection+0x7a>
    1d1e:	2b 81       	ldd	r18, Y+3	; 0x03
    1d20:	3c 81       	ldd	r19, Y+4	; 0x04
    1d22:	22 30       	cpi	r18, 0x02	; 2
    1d24:	31 05       	cpc	r19, r1
    1d26:	81 f0       	breq	.+32     	; 0x1d48 <GPIO_setupPortDirection+0x68>
    1d28:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d2c:	83 30       	cpi	r24, 0x03	; 3
    1d2e:	91 05       	cpc	r25, r1
    1d30:	81 f0       	breq	.+32     	; 0x1d52 <GPIO_setupPortDirection+0x72>
    1d32:	13 c0       	rjmp	.+38     	; 0x1d5a <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1d34:	ea e3       	ldi	r30, 0x3A	; 58
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3a:	80 83       	st	Z, r24
    1d3c:	0e c0       	rjmp	.+28     	; 0x1d5a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1d3e:	e7 e3       	ldi	r30, 0x37	; 55
    1d40:	f0 e0       	ldi	r31, 0x00	; 0
    1d42:	8a 81       	ldd	r24, Y+2	; 0x02
    1d44:	80 83       	st	Z, r24
    1d46:	09 c0       	rjmp	.+18     	; 0x1d5a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1d48:	e4 e3       	ldi	r30, 0x34	; 52
    1d4a:	f0 e0       	ldi	r31, 0x00	; 0
    1d4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4e:	80 83       	st	Z, r24
    1d50:	04 c0       	rjmp	.+8      	; 0x1d5a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1d52:	e1 e3       	ldi	r30, 0x31	; 49
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	8a 81       	ldd	r24, Y+2	; 0x02
    1d58:	80 83       	st	Z, r24
			break;
		}
	}
}
    1d5a:	0f 90       	pop	r0
    1d5c:	0f 90       	pop	r0
    1d5e:	0f 90       	pop	r0
    1d60:	0f 90       	pop	r0
    1d62:	cf 91       	pop	r28
    1d64:	df 91       	pop	r29
    1d66:	08 95       	ret

00001d68 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1d68:	df 93       	push	r29
    1d6a:	cf 93       	push	r28
    1d6c:	00 d0       	rcall	.+0      	; 0x1d6e <GPIO_writePort+0x6>
    1d6e:	00 d0       	rcall	.+0      	; 0x1d70 <GPIO_writePort+0x8>
    1d70:	cd b7       	in	r28, 0x3d	; 61
    1d72:	de b7       	in	r29, 0x3e	; 62
    1d74:	89 83       	std	Y+1, r24	; 0x01
    1d76:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1d78:	89 81       	ldd	r24, Y+1	; 0x01
    1d7a:	84 30       	cpi	r24, 0x04	; 4
    1d7c:	90 f5       	brcc	.+100    	; 0x1de2 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1d7e:	89 81       	ldd	r24, Y+1	; 0x01
    1d80:	28 2f       	mov	r18, r24
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	3c 83       	std	Y+4, r19	; 0x04
    1d86:	2b 83       	std	Y+3, r18	; 0x03
    1d88:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d8c:	81 30       	cpi	r24, 0x01	; 1
    1d8e:	91 05       	cpc	r25, r1
    1d90:	d1 f0       	breq	.+52     	; 0x1dc6 <GPIO_writePort+0x5e>
    1d92:	2b 81       	ldd	r18, Y+3	; 0x03
    1d94:	3c 81       	ldd	r19, Y+4	; 0x04
    1d96:	22 30       	cpi	r18, 0x02	; 2
    1d98:	31 05       	cpc	r19, r1
    1d9a:	2c f4       	brge	.+10     	; 0x1da6 <GPIO_writePort+0x3e>
    1d9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1da0:	00 97       	sbiw	r24, 0x00	; 0
    1da2:	61 f0       	breq	.+24     	; 0x1dbc <GPIO_writePort+0x54>
    1da4:	1e c0       	rjmp	.+60     	; 0x1de2 <GPIO_writePort+0x7a>
    1da6:	2b 81       	ldd	r18, Y+3	; 0x03
    1da8:	3c 81       	ldd	r19, Y+4	; 0x04
    1daa:	22 30       	cpi	r18, 0x02	; 2
    1dac:	31 05       	cpc	r19, r1
    1dae:	81 f0       	breq	.+32     	; 0x1dd0 <GPIO_writePort+0x68>
    1db0:	8b 81       	ldd	r24, Y+3	; 0x03
    1db2:	9c 81       	ldd	r25, Y+4	; 0x04
    1db4:	83 30       	cpi	r24, 0x03	; 3
    1db6:	91 05       	cpc	r25, r1
    1db8:	81 f0       	breq	.+32     	; 0x1dda <GPIO_writePort+0x72>
    1dba:	13 c0       	rjmp	.+38     	; 0x1de2 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1dbc:	eb e3       	ldi	r30, 0x3B	; 59
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc2:	80 83       	st	Z, r24
    1dc4:	0e c0       	rjmp	.+28     	; 0x1de2 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1dc6:	e8 e3       	ldi	r30, 0x38	; 56
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	8a 81       	ldd	r24, Y+2	; 0x02
    1dcc:	80 83       	st	Z, r24
    1dce:	09 c0       	rjmp	.+18     	; 0x1de2 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1dd0:	e5 e3       	ldi	r30, 0x35	; 53
    1dd2:	f0 e0       	ldi	r31, 0x00	; 0
    1dd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd6:	80 83       	st	Z, r24
    1dd8:	04 c0       	rjmp	.+8      	; 0x1de2 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1dda:	e2 e3       	ldi	r30, 0x32	; 50
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	8a 81       	ldd	r24, Y+2	; 0x02
    1de0:	80 83       	st	Z, r24
			break;
		}
	}
}
    1de2:	0f 90       	pop	r0
    1de4:	0f 90       	pop	r0
    1de6:	0f 90       	pop	r0
    1de8:	0f 90       	pop	r0
    1dea:	cf 91       	pop	r28
    1dec:	df 91       	pop	r29
    1dee:	08 95       	ret

00001df0 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1df0:	df 93       	push	r29
    1df2:	cf 93       	push	r28
    1df4:	00 d0       	rcall	.+0      	; 0x1df6 <GPIO_readPort+0x6>
    1df6:	00 d0       	rcall	.+0      	; 0x1df8 <GPIO_readPort+0x8>
    1df8:	cd b7       	in	r28, 0x3d	; 61
    1dfa:	de b7       	in	r29, 0x3e	; 62
    1dfc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1dfe:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1e00:	8a 81       	ldd	r24, Y+2	; 0x02
    1e02:	84 30       	cpi	r24, 0x04	; 4
    1e04:	90 f5       	brcc	.+100    	; 0x1e6a <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1e06:	8a 81       	ldd	r24, Y+2	; 0x02
    1e08:	28 2f       	mov	r18, r24
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	3c 83       	std	Y+4, r19	; 0x04
    1e0e:	2b 83       	std	Y+3, r18	; 0x03
    1e10:	8b 81       	ldd	r24, Y+3	; 0x03
    1e12:	9c 81       	ldd	r25, Y+4	; 0x04
    1e14:	81 30       	cpi	r24, 0x01	; 1
    1e16:	91 05       	cpc	r25, r1
    1e18:	d1 f0       	breq	.+52     	; 0x1e4e <GPIO_readPort+0x5e>
    1e1a:	2b 81       	ldd	r18, Y+3	; 0x03
    1e1c:	3c 81       	ldd	r19, Y+4	; 0x04
    1e1e:	22 30       	cpi	r18, 0x02	; 2
    1e20:	31 05       	cpc	r19, r1
    1e22:	2c f4       	brge	.+10     	; 0x1e2e <GPIO_readPort+0x3e>
    1e24:	8b 81       	ldd	r24, Y+3	; 0x03
    1e26:	9c 81       	ldd	r25, Y+4	; 0x04
    1e28:	00 97       	sbiw	r24, 0x00	; 0
    1e2a:	61 f0       	breq	.+24     	; 0x1e44 <GPIO_readPort+0x54>
    1e2c:	1e c0       	rjmp	.+60     	; 0x1e6a <GPIO_readPort+0x7a>
    1e2e:	2b 81       	ldd	r18, Y+3	; 0x03
    1e30:	3c 81       	ldd	r19, Y+4	; 0x04
    1e32:	22 30       	cpi	r18, 0x02	; 2
    1e34:	31 05       	cpc	r19, r1
    1e36:	81 f0       	breq	.+32     	; 0x1e58 <GPIO_readPort+0x68>
    1e38:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e3c:	83 30       	cpi	r24, 0x03	; 3
    1e3e:	91 05       	cpc	r25, r1
    1e40:	81 f0       	breq	.+32     	; 0x1e62 <GPIO_readPort+0x72>
    1e42:	13 c0       	rjmp	.+38     	; 0x1e6a <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1e44:	e9 e3       	ldi	r30, 0x39	; 57
    1e46:	f0 e0       	ldi	r31, 0x00	; 0
    1e48:	80 81       	ld	r24, Z
    1e4a:	89 83       	std	Y+1, r24	; 0x01
    1e4c:	0e c0       	rjmp	.+28     	; 0x1e6a <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1e4e:	e6 e3       	ldi	r30, 0x36	; 54
    1e50:	f0 e0       	ldi	r31, 0x00	; 0
    1e52:	80 81       	ld	r24, Z
    1e54:	89 83       	std	Y+1, r24	; 0x01
    1e56:	09 c0       	rjmp	.+18     	; 0x1e6a <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1e58:	e3 e3       	ldi	r30, 0x33	; 51
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	80 81       	ld	r24, Z
    1e5e:	89 83       	std	Y+1, r24	; 0x01
    1e60:	04 c0       	rjmp	.+8      	; 0x1e6a <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1e62:	e0 e3       	ldi	r30, 0x30	; 48
    1e64:	f0 e0       	ldi	r31, 0x00	; 0
    1e66:	80 81       	ld	r24, Z
    1e68:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1e6a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e6c:	0f 90       	pop	r0
    1e6e:	0f 90       	pop	r0
    1e70:	0f 90       	pop	r0
    1e72:	0f 90       	pop	r0
    1e74:	cf 91       	pop	r28
    1e76:	df 91       	pop	r29
    1e78:	08 95       	ret

00001e7a <KEYPAD_getPressedKey>:
#include "avr/delay.h"

uint8 KEYPAD_adjustKeyNumber(uint8 button_num);

uint8 KEYPAD_getPressedKey()
{
    1e7a:	df 93       	push	r29
    1e7c:	cf 93       	push	r28
    1e7e:	cd b7       	in	r28, 0x3d	; 61
    1e80:	de b7       	in	r29, 0x3e	; 62
    1e82:	64 97       	sbiw	r28, 0x14	; 20
    1e84:	0f b6       	in	r0, 0x3f	; 63
    1e86:	f8 94       	cli
    1e88:	de bf       	out	0x3e, r29	; 62
    1e8a:	0f be       	out	0x3f, r0	; 63
    1e8c:	cd bf       	out	0x3d, r28	; 61
	/* Make the columns pins as input by static configuration */
	for(int i=0;i<KEYPAD_COLUMN_NUMB;i++)
    1e8e:	1c 8a       	std	Y+20, r1	; 0x14
    1e90:	1b 8a       	std	Y+19, r1	; 0x13
    1e92:	0b c0       	rjmp	.+22     	; 0x1eaa <KEYPAD_getPressedKey+0x30>
    	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_COL_START_PIN_ID+i, INPUT);
    1e94:	9b 89       	ldd	r25, Y+19	; 0x13
    1e96:	80 e0       	ldi	r24, 0x00	; 0
    1e98:	69 2f       	mov	r22, r25
    1e9a:	40 e0       	ldi	r20, 0x00	; 0
    1e9c:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <GPIO_setupPinDirection>
uint8 KEYPAD_adjustKeyNumber(uint8 button_num);

uint8 KEYPAD_getPressedKey()
{
	/* Make the columns pins as input by static configuration */
	for(int i=0;i<KEYPAD_COLUMN_NUMB;i++)
    1ea0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ea2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ea4:	01 96       	adiw	r24, 0x01	; 1
    1ea6:	9c 8b       	std	Y+20, r25	; 0x14
    1ea8:	8b 8b       	std	Y+19, r24	; 0x13
    1eaa:	8b 89       	ldd	r24, Y+19	; 0x13
    1eac:	9c 89       	ldd	r25, Y+20	; 0x14
    1eae:	84 30       	cpi	r24, 0x04	; 4
    1eb0:	91 05       	cpc	r25, r1
    1eb2:	84 f3       	brlt	.-32     	; 0x1e94 <KEYPAD_getPressedKey+0x1a>
    1eb4:	80 e0       	ldi	r24, 0x00	; 0
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	a8 e4       	ldi	r26, 0x48	; 72
    1eba:	b2 e4       	ldi	r27, 0x42	; 66
    1ebc:	8b 87       	std	Y+11, r24	; 0x0b
    1ebe:	9c 87       	std	Y+12, r25	; 0x0c
    1ec0:	ad 87       	std	Y+13, r26	; 0x0d
    1ec2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ec4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ec6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ec8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eca:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ecc:	20 e0       	ldi	r18, 0x00	; 0
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	4a ef       	ldi	r20, 0xFA	; 250
    1ed2:	54 e4       	ldi	r21, 0x44	; 68
    1ed4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed8:	dc 01       	movw	r26, r24
    1eda:	cb 01       	movw	r24, r22
    1edc:	8f 83       	std	Y+7, r24	; 0x07
    1ede:	98 87       	std	Y+8, r25	; 0x08
    1ee0:	a9 87       	std	Y+9, r26	; 0x09
    1ee2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ee4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ee6:	78 85       	ldd	r23, Y+8	; 0x08
    1ee8:	89 85       	ldd	r24, Y+9	; 0x09
    1eea:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eec:	20 e0       	ldi	r18, 0x00	; 0
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	40 e8       	ldi	r20, 0x80	; 128
    1ef2:	5f e3       	ldi	r21, 0x3F	; 63
    1ef4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ef8:	88 23       	and	r24, r24
    1efa:	2c f4       	brge	.+10     	; 0x1f06 <KEYPAD_getPressedKey+0x8c>
		__ticks = 1;
    1efc:	81 e0       	ldi	r24, 0x01	; 1
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	9e 83       	std	Y+6, r25	; 0x06
    1f02:	8d 83       	std	Y+5, r24	; 0x05
    1f04:	3f c0       	rjmp	.+126    	; 0x1f84 <KEYPAD_getPressedKey+0x10a>
	else if (__tmp > 65535)
    1f06:	6f 81       	ldd	r22, Y+7	; 0x07
    1f08:	78 85       	ldd	r23, Y+8	; 0x08
    1f0a:	89 85       	ldd	r24, Y+9	; 0x09
    1f0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f0e:	20 e0       	ldi	r18, 0x00	; 0
    1f10:	3f ef       	ldi	r19, 0xFF	; 255
    1f12:	4f e7       	ldi	r20, 0x7F	; 127
    1f14:	57 e4       	ldi	r21, 0x47	; 71
    1f16:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f1a:	18 16       	cp	r1, r24
    1f1c:	4c f5       	brge	.+82     	; 0x1f70 <KEYPAD_getPressedKey+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f20:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f22:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f24:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f26:	20 e0       	ldi	r18, 0x00	; 0
    1f28:	30 e0       	ldi	r19, 0x00	; 0
    1f2a:	40 e2       	ldi	r20, 0x20	; 32
    1f2c:	51 e4       	ldi	r21, 0x41	; 65
    1f2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f32:	dc 01       	movw	r26, r24
    1f34:	cb 01       	movw	r24, r22
    1f36:	bc 01       	movw	r22, r24
    1f38:	cd 01       	movw	r24, r26
    1f3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f3e:	dc 01       	movw	r26, r24
    1f40:	cb 01       	movw	r24, r22
    1f42:	9e 83       	std	Y+6, r25	; 0x06
    1f44:	8d 83       	std	Y+5, r24	; 0x05
    1f46:	0f c0       	rjmp	.+30     	; 0x1f66 <KEYPAD_getPressedKey+0xec>
    1f48:	88 ec       	ldi	r24, 0xC8	; 200
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	9c 83       	std	Y+4, r25	; 0x04
    1f4e:	8b 83       	std	Y+3, r24	; 0x03
    1f50:	8b 81       	ldd	r24, Y+3	; 0x03
    1f52:	9c 81       	ldd	r25, Y+4	; 0x04
    1f54:	01 97       	sbiw	r24, 0x01	; 1
    1f56:	f1 f7       	brne	.-4      	; 0x1f54 <KEYPAD_getPressedKey+0xda>
    1f58:	9c 83       	std	Y+4, r25	; 0x04
    1f5a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f60:	01 97       	sbiw	r24, 0x01	; 1
    1f62:	9e 83       	std	Y+6, r25	; 0x06
    1f64:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f66:	8d 81       	ldd	r24, Y+5	; 0x05
    1f68:	9e 81       	ldd	r25, Y+6	; 0x06
    1f6a:	00 97       	sbiw	r24, 0x00	; 0
    1f6c:	69 f7       	brne	.-38     	; 0x1f48 <KEYPAD_getPressedKey+0xce>
    1f6e:	14 c0       	rjmp	.+40     	; 0x1f98 <KEYPAD_getPressedKey+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f70:	6f 81       	ldd	r22, Y+7	; 0x07
    1f72:	78 85       	ldd	r23, Y+8	; 0x08
    1f74:	89 85       	ldd	r24, Y+9	; 0x09
    1f76:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f7c:	dc 01       	movw	r26, r24
    1f7e:	cb 01       	movw	r24, r22
    1f80:	9e 83       	std	Y+6, r25	; 0x06
    1f82:	8d 83       	std	Y+5, r24	; 0x05
    1f84:	8d 81       	ldd	r24, Y+5	; 0x05
    1f86:	9e 81       	ldd	r25, Y+6	; 0x06
    1f88:	9a 83       	std	Y+2, r25	; 0x02
    1f8a:	89 83       	std	Y+1, r24	; 0x01
    1f8c:	89 81       	ldd	r24, Y+1	; 0x01
    1f8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f90:	01 97       	sbiw	r24, 0x01	; 1
    1f92:	f1 f7       	brne	.-4      	; 0x1f90 <KEYPAD_getPressedKey+0x116>
    1f94:	9a 83       	std	Y+2, r25	; 0x02
    1f96:	89 83       	std	Y+1, r24	; 0x01
    	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_COL_START_PIN_ID+i, INPUT);

	while(1)
	{
       _delay_ms(50);
		for(int row=0;row<KEYPAD_ROWS_NUMB;row++)
    1f98:	1a 8a       	std	Y+18, r1	; 0x12
    1f9a:	19 8a       	std	Y+17, r1	; 0x11
    1f9c:	46 c0       	rjmp	.+140    	; 0x202a <KEYPAD_getPressedKey+0x1b0>
		{
			/*Make row pin as output and write 0 in it*/
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_START_PIN_ID+row , OUTPUT);
    1f9e:	99 89       	ldd	r25, Y+17	; 0x11
    1fa0:	81 e0       	ldi	r24, 0x01	; 1
    1fa2:	69 2f       	mov	r22, r25
    1fa4:	41 e0       	ldi	r20, 0x01	; 1
    1fa6:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <GPIO_setupPinDirection>
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_START_PIN_ID+row , BUTTON_IS_PRESSED);
    1faa:	99 89       	ldd	r25, Y+17	; 0x11
    1fac:	81 e0       	ldi	r24, 0x01	; 1
    1fae:	69 2f       	mov	r22, r25
    1fb0:	40 e0       	ldi	r20, 0x00	; 0
    1fb2:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <GPIO_writePin>

			/*check if the button is pressed on channel or not*/
			for(int col=0;col<KEYPAD_COLUMN_NUMB;col++)
    1fb6:	18 8a       	std	Y+16, r1	; 0x10
    1fb8:	1f 86       	std	Y+15, r1	; 0x0f
    1fba:	27 c0       	rjmp	.+78     	; 0x200a <KEYPAD_getPressedKey+0x190>
			{
			 if(GPIO_readPin(KEYPAD_COL_PORT_ID , KEYPAD_COL_START_PIN_ID+col) == BUTTON_IS_PRESSED )
    1fbc:	9f 85       	ldd	r25, Y+15	; 0x0f
    1fbe:	80 e0       	ldi	r24, 0x00	; 0
    1fc0:	69 2f       	mov	r22, r25
    1fc2:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <GPIO_readPin>
    1fc6:	88 23       	and	r24, r24
    1fc8:	d9 f4       	brne	.+54     	; 0x2000 <KEYPAD_getPressedKey+0x186>
			 {
				GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_START_PIN_ID+row , INPUT);
    1fca:	99 89       	ldd	r25, Y+17	; 0x11
    1fcc:	81 e0       	ldi	r24, 0x01	; 1
    1fce:	69 2f       	mov	r22, r25
    1fd0:	40 e0       	ldi	r20, 0x00	; 0
    1fd2:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <GPIO_setupPinDirection>
				return KEYPAD_adjustKeyNumber((row*KEYPAD_COLUMN_NUMB)+col+1);
    1fd6:	89 89       	ldd	r24, Y+17	; 0x11
    1fd8:	9a 89       	ldd	r25, Y+18	; 0x12
    1fda:	88 0f       	add	r24, r24
    1fdc:	99 1f       	adc	r25, r25
    1fde:	88 0f       	add	r24, r24
    1fe0:	99 1f       	adc	r25, r25
    1fe2:	98 2f       	mov	r25, r24
    1fe4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fe6:	89 0f       	add	r24, r25
    1fe8:	8f 5f       	subi	r24, 0xFF	; 255
    1fea:	0e 94 1c 10 	call	0x2038	; 0x2038 <KEYPAD_adjustKeyNumber>
			}
            /*make this pin input to open another pin in row*/
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_START_PIN_ID+row , INPUT);
		}
}
}
    1fee:	64 96       	adiw	r28, 0x14	; 20
    1ff0:	0f b6       	in	r0, 0x3f	; 63
    1ff2:	f8 94       	cli
    1ff4:	de bf       	out	0x3e, r29	; 62
    1ff6:	0f be       	out	0x3f, r0	; 63
    1ff8:	cd bf       	out	0x3d, r28	; 61
    1ffa:	cf 91       	pop	r28
    1ffc:	df 91       	pop	r29
    1ffe:	08 95       	ret
			/*Make row pin as output and write 0 in it*/
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_START_PIN_ID+row , OUTPUT);
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_START_PIN_ID+row , BUTTON_IS_PRESSED);

			/*check if the button is pressed on channel or not*/
			for(int col=0;col<KEYPAD_COLUMN_NUMB;col++)
    2000:	8f 85       	ldd	r24, Y+15	; 0x0f
    2002:	98 89       	ldd	r25, Y+16	; 0x10
    2004:	01 96       	adiw	r24, 0x01	; 1
    2006:	98 8b       	std	Y+16, r25	; 0x10
    2008:	8f 87       	std	Y+15, r24	; 0x0f
    200a:	8f 85       	ldd	r24, Y+15	; 0x0f
    200c:	98 89       	ldd	r25, Y+16	; 0x10
    200e:	84 30       	cpi	r24, 0x04	; 4
    2010:	91 05       	cpc	r25, r1
    2012:	a4 f2       	brlt	.-88     	; 0x1fbc <KEYPAD_getPressedKey+0x142>
				return KEYPAD_adjustKeyNumber((row*KEYPAD_COLUMN_NUMB)+col+1);
			 }

			}
            /*make this pin input to open another pin in row*/
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_START_PIN_ID+row , INPUT);
    2014:	99 89       	ldd	r25, Y+17	; 0x11
    2016:	81 e0       	ldi	r24, 0x01	; 1
    2018:	69 2f       	mov	r22, r25
    201a:	40 e0       	ldi	r20, 0x00	; 0
    201c:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <GPIO_setupPinDirection>
    	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_COL_START_PIN_ID+i, INPUT);

	while(1)
	{
       _delay_ms(50);
		for(int row=0;row<KEYPAD_ROWS_NUMB;row++)
    2020:	89 89       	ldd	r24, Y+17	; 0x11
    2022:	9a 89       	ldd	r25, Y+18	; 0x12
    2024:	01 96       	adiw	r24, 0x01	; 1
    2026:	9a 8b       	std	Y+18, r25	; 0x12
    2028:	89 8b       	std	Y+17, r24	; 0x11
    202a:	89 89       	ldd	r24, Y+17	; 0x11
    202c:	9a 89       	ldd	r25, Y+18	; 0x12
    202e:	84 30       	cpi	r24, 0x04	; 4
    2030:	91 05       	cpc	r25, r1
    2032:	0c f4       	brge	.+2      	; 0x2036 <KEYPAD_getPressedKey+0x1bc>
    2034:	b4 cf       	rjmp	.-152    	; 0x1f9e <KEYPAD_getPressedKey+0x124>
    2036:	3e cf       	rjmp	.-388    	; 0x1eb4 <KEYPAD_getPressedKey+0x3a>

00002038 <KEYPAD_adjustKeyNumber>:
}
}


uint8 KEYPAD_adjustKeyNumber(uint8 button_num)
{
    2038:	df 93       	push	r29
    203a:	cf 93       	push	r28
    203c:	00 d0       	rcall	.+0      	; 0x203e <KEYPAD_adjustKeyNumber+0x6>
    203e:	00 d0       	rcall	.+0      	; 0x2040 <KEYPAD_adjustKeyNumber+0x8>
    2040:	cd b7       	in	r28, 0x3d	; 61
    2042:	de b7       	in	r29, 0x3e	; 62
    2044:	8a 83       	std	Y+2, r24	; 0x02
	uint8 adjustNum=0;
    2046:	19 82       	std	Y+1, r1	; 0x01
	switch(button_num)
    2048:	8a 81       	ldd	r24, Y+2	; 0x02
    204a:	28 2f       	mov	r18, r24
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	3c 83       	std	Y+4, r19	; 0x04
    2050:	2b 83       	std	Y+3, r18	; 0x03
    2052:	8b 81       	ldd	r24, Y+3	; 0x03
    2054:	9c 81       	ldd	r25, Y+4	; 0x04
    2056:	88 30       	cpi	r24, 0x08	; 8
    2058:	91 05       	cpc	r25, r1
    205a:	09 f4       	brne	.+2      	; 0x205e <KEYPAD_adjustKeyNumber+0x26>
    205c:	70 c0       	rjmp	.+224    	; 0x213e <KEYPAD_adjustKeyNumber+0x106>
    205e:	2b 81       	ldd	r18, Y+3	; 0x03
    2060:	3c 81       	ldd	r19, Y+4	; 0x04
    2062:	29 30       	cpi	r18, 0x09	; 9
    2064:	31 05       	cpc	r19, r1
    2066:	5c f5       	brge	.+86     	; 0x20be <KEYPAD_adjustKeyNumber+0x86>
    2068:	8b 81       	ldd	r24, Y+3	; 0x03
    206a:	9c 81       	ldd	r25, Y+4	; 0x04
    206c:	84 30       	cpi	r24, 0x04	; 4
    206e:	91 05       	cpc	r25, r1
    2070:	09 f4       	brne	.+2      	; 0x2074 <KEYPAD_adjustKeyNumber+0x3c>
    2072:	59 c0       	rjmp	.+178    	; 0x2126 <KEYPAD_adjustKeyNumber+0xee>
    2074:	2b 81       	ldd	r18, Y+3	; 0x03
    2076:	3c 81       	ldd	r19, Y+4	; 0x04
    2078:	25 30       	cpi	r18, 0x05	; 5
    207a:	31 05       	cpc	r19, r1
    207c:	9c f4       	brge	.+38     	; 0x20a4 <KEYPAD_adjustKeyNumber+0x6c>
    207e:	8b 81       	ldd	r24, Y+3	; 0x03
    2080:	9c 81       	ldd	r25, Y+4	; 0x04
    2082:	82 30       	cpi	r24, 0x02	; 2
    2084:	91 05       	cpc	r25, r1
    2086:	09 f4       	brne	.+2      	; 0x208a <KEYPAD_adjustKeyNumber+0x52>
    2088:	48 c0       	rjmp	.+144    	; 0x211a <KEYPAD_adjustKeyNumber+0xe2>
    208a:	2b 81       	ldd	r18, Y+3	; 0x03
    208c:	3c 81       	ldd	r19, Y+4	; 0x04
    208e:	23 30       	cpi	r18, 0x03	; 3
    2090:	31 05       	cpc	r19, r1
    2092:	0c f0       	brlt	.+2      	; 0x2096 <KEYPAD_adjustKeyNumber+0x5e>
    2094:	45 c0       	rjmp	.+138    	; 0x2120 <KEYPAD_adjustKeyNumber+0xe8>
    2096:	8b 81       	ldd	r24, Y+3	; 0x03
    2098:	9c 81       	ldd	r25, Y+4	; 0x04
    209a:	81 30       	cpi	r24, 0x01	; 1
    209c:	91 05       	cpc	r25, r1
    209e:	09 f4       	brne	.+2      	; 0x20a2 <KEYPAD_adjustKeyNumber+0x6a>
    20a0:	39 c0       	rjmp	.+114    	; 0x2114 <KEYPAD_adjustKeyNumber+0xdc>
    20a2:	66 c0       	rjmp	.+204    	; 0x2170 <KEYPAD_adjustKeyNumber+0x138>
    20a4:	2b 81       	ldd	r18, Y+3	; 0x03
    20a6:	3c 81       	ldd	r19, Y+4	; 0x04
    20a8:	26 30       	cpi	r18, 0x06	; 6
    20aa:	31 05       	cpc	r19, r1
    20ac:	09 f4       	brne	.+2      	; 0x20b0 <KEYPAD_adjustKeyNumber+0x78>
    20ae:	41 c0       	rjmp	.+130    	; 0x2132 <KEYPAD_adjustKeyNumber+0xfa>
    20b0:	8b 81       	ldd	r24, Y+3	; 0x03
    20b2:	9c 81       	ldd	r25, Y+4	; 0x04
    20b4:	87 30       	cpi	r24, 0x07	; 7
    20b6:	91 05       	cpc	r25, r1
    20b8:	0c f0       	brlt	.+2      	; 0x20bc <KEYPAD_adjustKeyNumber+0x84>
    20ba:	3e c0       	rjmp	.+124    	; 0x2138 <KEYPAD_adjustKeyNumber+0x100>
    20bc:	37 c0       	rjmp	.+110    	; 0x212c <KEYPAD_adjustKeyNumber+0xf4>
    20be:	2b 81       	ldd	r18, Y+3	; 0x03
    20c0:	3c 81       	ldd	r19, Y+4	; 0x04
    20c2:	2c 30       	cpi	r18, 0x0C	; 12
    20c4:	31 05       	cpc	r19, r1
    20c6:	09 f4       	brne	.+2      	; 0x20ca <KEYPAD_adjustKeyNumber+0x92>
    20c8:	46 c0       	rjmp	.+140    	; 0x2156 <KEYPAD_adjustKeyNumber+0x11e>
    20ca:	8b 81       	ldd	r24, Y+3	; 0x03
    20cc:	9c 81       	ldd	r25, Y+4	; 0x04
    20ce:	8d 30       	cpi	r24, 0x0D	; 13
    20d0:	91 05       	cpc	r25, r1
    20d2:	5c f4       	brge	.+22     	; 0x20ea <KEYPAD_adjustKeyNumber+0xb2>
    20d4:	2b 81       	ldd	r18, Y+3	; 0x03
    20d6:	3c 81       	ldd	r19, Y+4	; 0x04
    20d8:	2a 30       	cpi	r18, 0x0A	; 10
    20da:	31 05       	cpc	r19, r1
    20dc:	b1 f1       	breq	.+108    	; 0x214a <KEYPAD_adjustKeyNumber+0x112>
    20de:	8b 81       	ldd	r24, Y+3	; 0x03
    20e0:	9c 81       	ldd	r25, Y+4	; 0x04
    20e2:	8b 30       	cpi	r24, 0x0B	; 11
    20e4:	91 05       	cpc	r25, r1
    20e6:	a4 f5       	brge	.+104    	; 0x2150 <KEYPAD_adjustKeyNumber+0x118>
    20e8:	2d c0       	rjmp	.+90     	; 0x2144 <KEYPAD_adjustKeyNumber+0x10c>
    20ea:	2b 81       	ldd	r18, Y+3	; 0x03
    20ec:	3c 81       	ldd	r19, Y+4	; 0x04
    20ee:	2e 30       	cpi	r18, 0x0E	; 14
    20f0:	31 05       	cpc	r19, r1
    20f2:	b9 f1       	breq	.+110    	; 0x2162 <KEYPAD_adjustKeyNumber+0x12a>
    20f4:	8b 81       	ldd	r24, Y+3	; 0x03
    20f6:	9c 81       	ldd	r25, Y+4	; 0x04
    20f8:	8e 30       	cpi	r24, 0x0E	; 14
    20fa:	91 05       	cpc	r25, r1
    20fc:	7c f1       	brlt	.+94     	; 0x215c <KEYPAD_adjustKeyNumber+0x124>
    20fe:	2b 81       	ldd	r18, Y+3	; 0x03
    2100:	3c 81       	ldd	r19, Y+4	; 0x04
    2102:	2f 30       	cpi	r18, 0x0F	; 15
    2104:	31 05       	cpc	r19, r1
    2106:	81 f1       	breq	.+96     	; 0x2168 <KEYPAD_adjustKeyNumber+0x130>
    2108:	8b 81       	ldd	r24, Y+3	; 0x03
    210a:	9c 81       	ldd	r25, Y+4	; 0x04
    210c:	80 31       	cpi	r24, 0x10	; 16
    210e:	91 05       	cpc	r25, r1
    2110:	69 f1       	breq	.+90     	; 0x216c <KEYPAD_adjustKeyNumber+0x134>
    2112:	2e c0       	rjmp	.+92     	; 0x2170 <KEYPAD_adjustKeyNumber+0x138>
	{
	case 1:
			adjustNum = BUTTON1;
    2114:	8f e2       	ldi	r24, 0x2F	; 47
    2116:	89 83       	std	Y+1, r24	; 0x01
    2118:	2b c0       	rjmp	.+86     	; 0x2170 <KEYPAD_adjustKeyNumber+0x138>
			break;
	case 2:
			adjustNum = BUTTON2;
    211a:	89 e0       	ldi	r24, 0x09	; 9
    211c:	89 83       	std	Y+1, r24	; 0x01
    211e:	28 c0       	rjmp	.+80     	; 0x2170 <KEYPAD_adjustKeyNumber+0x138>
			break;
	case 3:
			adjustNum = BUTTON3;
    2120:	88 e0       	ldi	r24, 0x08	; 8
    2122:	89 83       	std	Y+1, r24	; 0x01
    2124:	25 c0       	rjmp	.+74     	; 0x2170 <KEYPAD_adjustKeyNumber+0x138>
			break;
	case 4:
			adjustNum = BUTTON4;
    2126:	87 e0       	ldi	r24, 0x07	; 7
    2128:	89 83       	std	Y+1, r24	; 0x01
    212a:	22 c0       	rjmp	.+68     	; 0x2170 <KEYPAD_adjustKeyNumber+0x138>
			break;
	case 5:
			adjustNum = BUTTON5;
    212c:	8a e2       	ldi	r24, 0x2A	; 42
    212e:	89 83       	std	Y+1, r24	; 0x01
    2130:	1f c0       	rjmp	.+62     	; 0x2170 <KEYPAD_adjustKeyNumber+0x138>
			break;
	case 6:
			adjustNum = BUTTON6;
    2132:	86 e0       	ldi	r24, 0x06	; 6
    2134:	89 83       	std	Y+1, r24	; 0x01
    2136:	1c c0       	rjmp	.+56     	; 0x2170 <KEYPAD_adjustKeyNumber+0x138>
			break;
	case 7:
			adjustNum = BUTTON7;
    2138:	85 e0       	ldi	r24, 0x05	; 5
    213a:	89 83       	std	Y+1, r24	; 0x01
    213c:	19 c0       	rjmp	.+50     	; 0x2170 <KEYPAD_adjustKeyNumber+0x138>
			break;
	case 8:
			adjustNum = BUTTON8;
    213e:	84 e0       	ldi	r24, 0x04	; 4
    2140:	89 83       	std	Y+1, r24	; 0x01
    2142:	16 c0       	rjmp	.+44     	; 0x2170 <KEYPAD_adjustKeyNumber+0x138>
			break;
	case 9:
			adjustNum = BUTTON9;
    2144:	8d e2       	ldi	r24, 0x2D	; 45
    2146:	89 83       	std	Y+1, r24	; 0x01
    2148:	13 c0       	rjmp	.+38     	; 0x2170 <KEYPAD_adjustKeyNumber+0x138>
			break;
	case 10:
			adjustNum = BUTTON10;
    214a:	83 e0       	ldi	r24, 0x03	; 3
    214c:	89 83       	std	Y+1, r24	; 0x01
    214e:	10 c0       	rjmp	.+32     	; 0x2170 <KEYPAD_adjustKeyNumber+0x138>
			break;
	case 11:
			adjustNum = BUTTON11;
    2150:	82 e0       	ldi	r24, 0x02	; 2
    2152:	89 83       	std	Y+1, r24	; 0x01
    2154:	0d c0       	rjmp	.+26     	; 0x2170 <KEYPAD_adjustKeyNumber+0x138>
			break;
	case 12:
			adjustNum = BUTTON12;
    2156:	81 e0       	ldi	r24, 0x01	; 1
    2158:	89 83       	std	Y+1, r24	; 0x01
    215a:	0a c0       	rjmp	.+20     	; 0x2170 <KEYPAD_adjustKeyNumber+0x138>
			break;
	case 13:
			adjustNum = BUTTON13;
    215c:	8b e2       	ldi	r24, 0x2B	; 43
    215e:	89 83       	std	Y+1, r24	; 0x01
    2160:	07 c0       	rjmp	.+14     	; 0x2170 <KEYPAD_adjustKeyNumber+0x138>
			break;
	case 14:
			adjustNum = BUTTON14;
    2162:	8d e3       	ldi	r24, 0x3D	; 61
    2164:	89 83       	std	Y+1, r24	; 0x01
    2166:	04 c0       	rjmp	.+8      	; 0x2170 <KEYPAD_adjustKeyNumber+0x138>
			break;
	case 15:
			adjustNum = BUTTON15;
    2168:	19 82       	std	Y+1, r1	; 0x01
    216a:	02 c0       	rjmp	.+4      	; 0x2170 <KEYPAD_adjustKeyNumber+0x138>
			break;
	case 16:
			adjustNum = BUTTON16;
    216c:	80 e2       	ldi	r24, 0x20	; 32
    216e:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	return adjustNum;
    2170:	89 81       	ldd	r24, Y+1	; 0x01
}
    2172:	0f 90       	pop	r0
    2174:	0f 90       	pop	r0
    2176:	0f 90       	pop	r0
    2178:	0f 90       	pop	r0
    217a:	cf 91       	pop	r28
    217c:	df 91       	pop	r29
    217e:	08 95       	ret

00002180 <LCD_sendCommand>:
#include "common_macros.h" /* To use the macros like SET_BIT */



void LCD_sendCommand(uint8 command)
{
    2180:	0f 93       	push	r16
    2182:	1f 93       	push	r17
    2184:	df 93       	push	r29
    2186:	cf 93       	push	r28
    2188:	cd b7       	in	r28, 0x3d	; 61
    218a:	de b7       	in	r29, 0x3e	; 62
    218c:	c3 56       	subi	r28, 0x63	; 99
    218e:	d0 40       	sbci	r29, 0x00	; 0
    2190:	0f b6       	in	r0, 0x3f	; 63
    2192:	f8 94       	cli
    2194:	de bf       	out	0x3e, r29	; 62
    2196:	0f be       	out	0x3f, r0	; 63
    2198:	cd bf       	out	0x3d, r28	; 61
    219a:	fe 01       	movw	r30, r28
    219c:	ed 59       	subi	r30, 0x9D	; 157
    219e:	ff 4f       	sbci	r31, 0xFF	; 255
    21a0:	80 83       	st	Z, r24

	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);     /*write 0 in RS pin */
    21a2:	83 e0       	ldi	r24, 0x03	; 3
    21a4:	62 e0       	ldi	r22, 0x02	; 2
    21a6:	40 e0       	ldi	r20, 0x00	; 0
    21a8:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <GPIO_writePin>
    21ac:	fe 01       	movw	r30, r28
    21ae:	e1 5a       	subi	r30, 0xA1	; 161
    21b0:	ff 4f       	sbci	r31, 0xFF	; 255
    21b2:	80 e0       	ldi	r24, 0x00	; 0
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	a0 e8       	ldi	r26, 0x80	; 128
    21b8:	bf e3       	ldi	r27, 0x3F	; 63
    21ba:	80 83       	st	Z, r24
    21bc:	91 83       	std	Z+1, r25	; 0x01
    21be:	a2 83       	std	Z+2, r26	; 0x02
    21c0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21c2:	8e 01       	movw	r16, r28
    21c4:	05 5a       	subi	r16, 0xA5	; 165
    21c6:	1f 4f       	sbci	r17, 0xFF	; 255
    21c8:	fe 01       	movw	r30, r28
    21ca:	e1 5a       	subi	r30, 0xA1	; 161
    21cc:	ff 4f       	sbci	r31, 0xFF	; 255
    21ce:	60 81       	ld	r22, Z
    21d0:	71 81       	ldd	r23, Z+1	; 0x01
    21d2:	82 81       	ldd	r24, Z+2	; 0x02
    21d4:	93 81       	ldd	r25, Z+3	; 0x03
    21d6:	20 e0       	ldi	r18, 0x00	; 0
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	4a ef       	ldi	r20, 0xFA	; 250
    21dc:	54 e4       	ldi	r21, 0x44	; 68
    21de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e2:	dc 01       	movw	r26, r24
    21e4:	cb 01       	movw	r24, r22
    21e6:	f8 01       	movw	r30, r16
    21e8:	80 83       	st	Z, r24
    21ea:	91 83       	std	Z+1, r25	; 0x01
    21ec:	a2 83       	std	Z+2, r26	; 0x02
    21ee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21f0:	fe 01       	movw	r30, r28
    21f2:	e5 5a       	subi	r30, 0xA5	; 165
    21f4:	ff 4f       	sbci	r31, 0xFF	; 255
    21f6:	60 81       	ld	r22, Z
    21f8:	71 81       	ldd	r23, Z+1	; 0x01
    21fa:	82 81       	ldd	r24, Z+2	; 0x02
    21fc:	93 81       	ldd	r25, Z+3	; 0x03
    21fe:	20 e0       	ldi	r18, 0x00	; 0
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	40 e8       	ldi	r20, 0x80	; 128
    2204:	5f e3       	ldi	r21, 0x3F	; 63
    2206:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    220a:	88 23       	and	r24, r24
    220c:	44 f4       	brge	.+16     	; 0x221e <LCD_sendCommand+0x9e>
		__ticks = 1;
    220e:	fe 01       	movw	r30, r28
    2210:	e7 5a       	subi	r30, 0xA7	; 167
    2212:	ff 4f       	sbci	r31, 0xFF	; 255
    2214:	81 e0       	ldi	r24, 0x01	; 1
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	91 83       	std	Z+1, r25	; 0x01
    221a:	80 83       	st	Z, r24
    221c:	64 c0       	rjmp	.+200    	; 0x22e6 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    221e:	fe 01       	movw	r30, r28
    2220:	e5 5a       	subi	r30, 0xA5	; 165
    2222:	ff 4f       	sbci	r31, 0xFF	; 255
    2224:	60 81       	ld	r22, Z
    2226:	71 81       	ldd	r23, Z+1	; 0x01
    2228:	82 81       	ldd	r24, Z+2	; 0x02
    222a:	93 81       	ldd	r25, Z+3	; 0x03
    222c:	20 e0       	ldi	r18, 0x00	; 0
    222e:	3f ef       	ldi	r19, 0xFF	; 255
    2230:	4f e7       	ldi	r20, 0x7F	; 127
    2232:	57 e4       	ldi	r21, 0x47	; 71
    2234:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2238:	18 16       	cp	r1, r24
    223a:	0c f0       	brlt	.+2      	; 0x223e <LCD_sendCommand+0xbe>
    223c:	43 c0       	rjmp	.+134    	; 0x22c4 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    223e:	fe 01       	movw	r30, r28
    2240:	e1 5a       	subi	r30, 0xA1	; 161
    2242:	ff 4f       	sbci	r31, 0xFF	; 255
    2244:	60 81       	ld	r22, Z
    2246:	71 81       	ldd	r23, Z+1	; 0x01
    2248:	82 81       	ldd	r24, Z+2	; 0x02
    224a:	93 81       	ldd	r25, Z+3	; 0x03
    224c:	20 e0       	ldi	r18, 0x00	; 0
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	40 e2       	ldi	r20, 0x20	; 32
    2252:	51 e4       	ldi	r21, 0x41	; 65
    2254:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2258:	dc 01       	movw	r26, r24
    225a:	cb 01       	movw	r24, r22
    225c:	8e 01       	movw	r16, r28
    225e:	07 5a       	subi	r16, 0xA7	; 167
    2260:	1f 4f       	sbci	r17, 0xFF	; 255
    2262:	bc 01       	movw	r22, r24
    2264:	cd 01       	movw	r24, r26
    2266:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    226a:	dc 01       	movw	r26, r24
    226c:	cb 01       	movw	r24, r22
    226e:	f8 01       	movw	r30, r16
    2270:	91 83       	std	Z+1, r25	; 0x01
    2272:	80 83       	st	Z, r24
    2274:	1f c0       	rjmp	.+62     	; 0x22b4 <LCD_sendCommand+0x134>
    2276:	fe 01       	movw	r30, r28
    2278:	e9 5a       	subi	r30, 0xA9	; 169
    227a:	ff 4f       	sbci	r31, 0xFF	; 255
    227c:	88 ec       	ldi	r24, 0xC8	; 200
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	91 83       	std	Z+1, r25	; 0x01
    2282:	80 83       	st	Z, r24
    2284:	fe 01       	movw	r30, r28
    2286:	e9 5a       	subi	r30, 0xA9	; 169
    2288:	ff 4f       	sbci	r31, 0xFF	; 255
    228a:	80 81       	ld	r24, Z
    228c:	91 81       	ldd	r25, Z+1	; 0x01
    228e:	01 97       	sbiw	r24, 0x01	; 1
    2290:	f1 f7       	brne	.-4      	; 0x228e <LCD_sendCommand+0x10e>
    2292:	fe 01       	movw	r30, r28
    2294:	e9 5a       	subi	r30, 0xA9	; 169
    2296:	ff 4f       	sbci	r31, 0xFF	; 255
    2298:	91 83       	std	Z+1, r25	; 0x01
    229a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    229c:	de 01       	movw	r26, r28
    229e:	a7 5a       	subi	r26, 0xA7	; 167
    22a0:	bf 4f       	sbci	r27, 0xFF	; 255
    22a2:	fe 01       	movw	r30, r28
    22a4:	e7 5a       	subi	r30, 0xA7	; 167
    22a6:	ff 4f       	sbci	r31, 0xFF	; 255
    22a8:	80 81       	ld	r24, Z
    22aa:	91 81       	ldd	r25, Z+1	; 0x01
    22ac:	01 97       	sbiw	r24, 0x01	; 1
    22ae:	11 96       	adiw	r26, 0x01	; 1
    22b0:	9c 93       	st	X, r25
    22b2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22b4:	fe 01       	movw	r30, r28
    22b6:	e7 5a       	subi	r30, 0xA7	; 167
    22b8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ba:	80 81       	ld	r24, Z
    22bc:	91 81       	ldd	r25, Z+1	; 0x01
    22be:	00 97       	sbiw	r24, 0x00	; 0
    22c0:	d1 f6       	brne	.-76     	; 0x2276 <LCD_sendCommand+0xf6>
    22c2:	27 c0       	rjmp	.+78     	; 0x2312 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22c4:	8e 01       	movw	r16, r28
    22c6:	07 5a       	subi	r16, 0xA7	; 167
    22c8:	1f 4f       	sbci	r17, 0xFF	; 255
    22ca:	fe 01       	movw	r30, r28
    22cc:	e5 5a       	subi	r30, 0xA5	; 165
    22ce:	ff 4f       	sbci	r31, 0xFF	; 255
    22d0:	60 81       	ld	r22, Z
    22d2:	71 81       	ldd	r23, Z+1	; 0x01
    22d4:	82 81       	ldd	r24, Z+2	; 0x02
    22d6:	93 81       	ldd	r25, Z+3	; 0x03
    22d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22dc:	dc 01       	movw	r26, r24
    22de:	cb 01       	movw	r24, r22
    22e0:	f8 01       	movw	r30, r16
    22e2:	91 83       	std	Z+1, r25	; 0x01
    22e4:	80 83       	st	Z, r24
    22e6:	de 01       	movw	r26, r28
    22e8:	ab 5a       	subi	r26, 0xAB	; 171
    22ea:	bf 4f       	sbci	r27, 0xFF	; 255
    22ec:	fe 01       	movw	r30, r28
    22ee:	e7 5a       	subi	r30, 0xA7	; 167
    22f0:	ff 4f       	sbci	r31, 0xFF	; 255
    22f2:	80 81       	ld	r24, Z
    22f4:	91 81       	ldd	r25, Z+1	; 0x01
    22f6:	8d 93       	st	X+, r24
    22f8:	9c 93       	st	X, r25
    22fa:	fe 01       	movw	r30, r28
    22fc:	eb 5a       	subi	r30, 0xAB	; 171
    22fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2300:	80 81       	ld	r24, Z
    2302:	91 81       	ldd	r25, Z+1	; 0x01
    2304:	01 97       	sbiw	r24, 0x01	; 1
    2306:	f1 f7       	brne	.-4      	; 0x2304 <LCD_sendCommand+0x184>
    2308:	fe 01       	movw	r30, r28
    230a:	eb 5a       	subi	r30, 0xAB	; 171
    230c:	ff 4f       	sbci	r31, 0xFF	; 255
    230e:	91 83       	std	Z+1, r25	; 0x01
    2310:	80 83       	st	Z, r24
	_delay_ms(1);

	GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, LOGIC_HIGH);   /*write 1 in enable pin */
    2312:	83 e0       	ldi	r24, 0x03	; 3
    2314:	63 e0       	ldi	r22, 0x03	; 3
    2316:	41 e0       	ldi	r20, 0x01	; 1
    2318:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <GPIO_writePin>
    231c:	fe 01       	movw	r30, r28
    231e:	ef 5a       	subi	r30, 0xAF	; 175
    2320:	ff 4f       	sbci	r31, 0xFF	; 255
    2322:	80 e0       	ldi	r24, 0x00	; 0
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	a0 e8       	ldi	r26, 0x80	; 128
    2328:	bf e3       	ldi	r27, 0x3F	; 63
    232a:	80 83       	st	Z, r24
    232c:	91 83       	std	Z+1, r25	; 0x01
    232e:	a2 83       	std	Z+2, r26	; 0x02
    2330:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2332:	8e 01       	movw	r16, r28
    2334:	03 5b       	subi	r16, 0xB3	; 179
    2336:	1f 4f       	sbci	r17, 0xFF	; 255
    2338:	fe 01       	movw	r30, r28
    233a:	ef 5a       	subi	r30, 0xAF	; 175
    233c:	ff 4f       	sbci	r31, 0xFF	; 255
    233e:	60 81       	ld	r22, Z
    2340:	71 81       	ldd	r23, Z+1	; 0x01
    2342:	82 81       	ldd	r24, Z+2	; 0x02
    2344:	93 81       	ldd	r25, Z+3	; 0x03
    2346:	20 e0       	ldi	r18, 0x00	; 0
    2348:	30 e0       	ldi	r19, 0x00	; 0
    234a:	4a ef       	ldi	r20, 0xFA	; 250
    234c:	54 e4       	ldi	r21, 0x44	; 68
    234e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2352:	dc 01       	movw	r26, r24
    2354:	cb 01       	movw	r24, r22
    2356:	f8 01       	movw	r30, r16
    2358:	80 83       	st	Z, r24
    235a:	91 83       	std	Z+1, r25	; 0x01
    235c:	a2 83       	std	Z+2, r26	; 0x02
    235e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2360:	fe 01       	movw	r30, r28
    2362:	e3 5b       	subi	r30, 0xB3	; 179
    2364:	ff 4f       	sbci	r31, 0xFF	; 255
    2366:	60 81       	ld	r22, Z
    2368:	71 81       	ldd	r23, Z+1	; 0x01
    236a:	82 81       	ldd	r24, Z+2	; 0x02
    236c:	93 81       	ldd	r25, Z+3	; 0x03
    236e:	20 e0       	ldi	r18, 0x00	; 0
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	40 e8       	ldi	r20, 0x80	; 128
    2374:	5f e3       	ldi	r21, 0x3F	; 63
    2376:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    237a:	88 23       	and	r24, r24
    237c:	44 f4       	brge	.+16     	; 0x238e <LCD_sendCommand+0x20e>
		__ticks = 1;
    237e:	fe 01       	movw	r30, r28
    2380:	e5 5b       	subi	r30, 0xB5	; 181
    2382:	ff 4f       	sbci	r31, 0xFF	; 255
    2384:	81 e0       	ldi	r24, 0x01	; 1
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	91 83       	std	Z+1, r25	; 0x01
    238a:	80 83       	st	Z, r24
    238c:	64 c0       	rjmp	.+200    	; 0x2456 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    238e:	fe 01       	movw	r30, r28
    2390:	e3 5b       	subi	r30, 0xB3	; 179
    2392:	ff 4f       	sbci	r31, 0xFF	; 255
    2394:	60 81       	ld	r22, Z
    2396:	71 81       	ldd	r23, Z+1	; 0x01
    2398:	82 81       	ldd	r24, Z+2	; 0x02
    239a:	93 81       	ldd	r25, Z+3	; 0x03
    239c:	20 e0       	ldi	r18, 0x00	; 0
    239e:	3f ef       	ldi	r19, 0xFF	; 255
    23a0:	4f e7       	ldi	r20, 0x7F	; 127
    23a2:	57 e4       	ldi	r21, 0x47	; 71
    23a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23a8:	18 16       	cp	r1, r24
    23aa:	0c f0       	brlt	.+2      	; 0x23ae <LCD_sendCommand+0x22e>
    23ac:	43 c0       	rjmp	.+134    	; 0x2434 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ae:	fe 01       	movw	r30, r28
    23b0:	ef 5a       	subi	r30, 0xAF	; 175
    23b2:	ff 4f       	sbci	r31, 0xFF	; 255
    23b4:	60 81       	ld	r22, Z
    23b6:	71 81       	ldd	r23, Z+1	; 0x01
    23b8:	82 81       	ldd	r24, Z+2	; 0x02
    23ba:	93 81       	ldd	r25, Z+3	; 0x03
    23bc:	20 e0       	ldi	r18, 0x00	; 0
    23be:	30 e0       	ldi	r19, 0x00	; 0
    23c0:	40 e2       	ldi	r20, 0x20	; 32
    23c2:	51 e4       	ldi	r21, 0x41	; 65
    23c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c8:	dc 01       	movw	r26, r24
    23ca:	cb 01       	movw	r24, r22
    23cc:	8e 01       	movw	r16, r28
    23ce:	05 5b       	subi	r16, 0xB5	; 181
    23d0:	1f 4f       	sbci	r17, 0xFF	; 255
    23d2:	bc 01       	movw	r22, r24
    23d4:	cd 01       	movw	r24, r26
    23d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23da:	dc 01       	movw	r26, r24
    23dc:	cb 01       	movw	r24, r22
    23de:	f8 01       	movw	r30, r16
    23e0:	91 83       	std	Z+1, r25	; 0x01
    23e2:	80 83       	st	Z, r24
    23e4:	1f c0       	rjmp	.+62     	; 0x2424 <LCD_sendCommand+0x2a4>
    23e6:	fe 01       	movw	r30, r28
    23e8:	e7 5b       	subi	r30, 0xB7	; 183
    23ea:	ff 4f       	sbci	r31, 0xFF	; 255
    23ec:	88 ec       	ldi	r24, 0xC8	; 200
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	91 83       	std	Z+1, r25	; 0x01
    23f2:	80 83       	st	Z, r24
    23f4:	fe 01       	movw	r30, r28
    23f6:	e7 5b       	subi	r30, 0xB7	; 183
    23f8:	ff 4f       	sbci	r31, 0xFF	; 255
    23fa:	80 81       	ld	r24, Z
    23fc:	91 81       	ldd	r25, Z+1	; 0x01
    23fe:	01 97       	sbiw	r24, 0x01	; 1
    2400:	f1 f7       	brne	.-4      	; 0x23fe <LCD_sendCommand+0x27e>
    2402:	fe 01       	movw	r30, r28
    2404:	e7 5b       	subi	r30, 0xB7	; 183
    2406:	ff 4f       	sbci	r31, 0xFF	; 255
    2408:	91 83       	std	Z+1, r25	; 0x01
    240a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    240c:	de 01       	movw	r26, r28
    240e:	a5 5b       	subi	r26, 0xB5	; 181
    2410:	bf 4f       	sbci	r27, 0xFF	; 255
    2412:	fe 01       	movw	r30, r28
    2414:	e5 5b       	subi	r30, 0xB5	; 181
    2416:	ff 4f       	sbci	r31, 0xFF	; 255
    2418:	80 81       	ld	r24, Z
    241a:	91 81       	ldd	r25, Z+1	; 0x01
    241c:	01 97       	sbiw	r24, 0x01	; 1
    241e:	11 96       	adiw	r26, 0x01	; 1
    2420:	9c 93       	st	X, r25
    2422:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2424:	fe 01       	movw	r30, r28
    2426:	e5 5b       	subi	r30, 0xB5	; 181
    2428:	ff 4f       	sbci	r31, 0xFF	; 255
    242a:	80 81       	ld	r24, Z
    242c:	91 81       	ldd	r25, Z+1	; 0x01
    242e:	00 97       	sbiw	r24, 0x00	; 0
    2430:	d1 f6       	brne	.-76     	; 0x23e6 <LCD_sendCommand+0x266>
    2432:	27 c0       	rjmp	.+78     	; 0x2482 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2434:	8e 01       	movw	r16, r28
    2436:	05 5b       	subi	r16, 0xB5	; 181
    2438:	1f 4f       	sbci	r17, 0xFF	; 255
    243a:	fe 01       	movw	r30, r28
    243c:	e3 5b       	subi	r30, 0xB3	; 179
    243e:	ff 4f       	sbci	r31, 0xFF	; 255
    2440:	60 81       	ld	r22, Z
    2442:	71 81       	ldd	r23, Z+1	; 0x01
    2444:	82 81       	ldd	r24, Z+2	; 0x02
    2446:	93 81       	ldd	r25, Z+3	; 0x03
    2448:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    244c:	dc 01       	movw	r26, r24
    244e:	cb 01       	movw	r24, r22
    2450:	f8 01       	movw	r30, r16
    2452:	91 83       	std	Z+1, r25	; 0x01
    2454:	80 83       	st	Z, r24
    2456:	de 01       	movw	r26, r28
    2458:	a9 5b       	subi	r26, 0xB9	; 185
    245a:	bf 4f       	sbci	r27, 0xFF	; 255
    245c:	fe 01       	movw	r30, r28
    245e:	e5 5b       	subi	r30, 0xB5	; 181
    2460:	ff 4f       	sbci	r31, 0xFF	; 255
    2462:	80 81       	ld	r24, Z
    2464:	91 81       	ldd	r25, Z+1	; 0x01
    2466:	8d 93       	st	X+, r24
    2468:	9c 93       	st	X, r25
    246a:	fe 01       	movw	r30, r28
    246c:	e9 5b       	subi	r30, 0xB9	; 185
    246e:	ff 4f       	sbci	r31, 0xFF	; 255
    2470:	80 81       	ld	r24, Z
    2472:	91 81       	ldd	r25, Z+1	; 0x01
    2474:	01 97       	sbiw	r24, 0x01	; 1
    2476:	f1 f7       	brne	.-4      	; 0x2474 <LCD_sendCommand+0x2f4>
    2478:	fe 01       	movw	r30, r28
    247a:	e9 5b       	subi	r30, 0xB9	; 185
    247c:	ff 4f       	sbci	r31, 0xFF	; 255
    247e:	91 83       	std	Z+1, r25	; 0x01
    2480:	80 83       	st	Z, r24

	_delay_ms(1);

#else

	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN4 , GET_BIT(command,4) );
    2482:	fe 01       	movw	r30, r28
    2484:	ed 59       	subi	r30, 0x9D	; 157
    2486:	ff 4f       	sbci	r31, 0xFF	; 255
    2488:	80 81       	ld	r24, Z
    248a:	88 2f       	mov	r24, r24
    248c:	90 e0       	ldi	r25, 0x00	; 0
    248e:	80 71       	andi	r24, 0x10	; 16
    2490:	90 70       	andi	r25, 0x00	; 0
    2492:	95 95       	asr	r25
    2494:	87 95       	ror	r24
    2496:	95 95       	asr	r25
    2498:	87 95       	ror	r24
    249a:	95 95       	asr	r25
    249c:	87 95       	ror	r24
    249e:	95 95       	asr	r25
    24a0:	87 95       	ror	r24
    24a2:	98 2f       	mov	r25, r24
    24a4:	82 e0       	ldi	r24, 0x02	; 2
    24a6:	64 e0       	ldi	r22, 0x04	; 4
    24a8:	49 2f       	mov	r20, r25
    24aa:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN5 , GET_BIT(command,5) );
    24ae:	fe 01       	movw	r30, r28
    24b0:	ed 59       	subi	r30, 0x9D	; 157
    24b2:	ff 4f       	sbci	r31, 0xFF	; 255
    24b4:	80 81       	ld	r24, Z
    24b6:	88 2f       	mov	r24, r24
    24b8:	90 e0       	ldi	r25, 0x00	; 0
    24ba:	80 72       	andi	r24, 0x20	; 32
    24bc:	90 70       	andi	r25, 0x00	; 0
    24be:	95 95       	asr	r25
    24c0:	87 95       	ror	r24
    24c2:	95 95       	asr	r25
    24c4:	87 95       	ror	r24
    24c6:	95 95       	asr	r25
    24c8:	87 95       	ror	r24
    24ca:	95 95       	asr	r25
    24cc:	87 95       	ror	r24
    24ce:	95 95       	asr	r25
    24d0:	87 95       	ror	r24
    24d2:	98 2f       	mov	r25, r24
    24d4:	82 e0       	ldi	r24, 0x02	; 2
    24d6:	65 e0       	ldi	r22, 0x05	; 5
    24d8:	49 2f       	mov	r20, r25
    24da:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN6 , GET_BIT(command,6) );
    24de:	fe 01       	movw	r30, r28
    24e0:	ed 59       	subi	r30, 0x9D	; 157
    24e2:	ff 4f       	sbci	r31, 0xFF	; 255
    24e4:	80 81       	ld	r24, Z
    24e6:	88 2f       	mov	r24, r24
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	80 74       	andi	r24, 0x40	; 64
    24ec:	90 70       	andi	r25, 0x00	; 0
    24ee:	08 2e       	mov	r0, r24
    24f0:	89 2f       	mov	r24, r25
    24f2:	00 0c       	add	r0, r0
    24f4:	88 1f       	adc	r24, r24
    24f6:	99 0b       	sbc	r25, r25
    24f8:	00 0c       	add	r0, r0
    24fa:	88 1f       	adc	r24, r24
    24fc:	99 1f       	adc	r25, r25
    24fe:	98 2f       	mov	r25, r24
    2500:	82 e0       	ldi	r24, 0x02	; 2
    2502:	66 e0       	ldi	r22, 0x06	; 6
    2504:	49 2f       	mov	r20, r25
    2506:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN7 , GET_BIT(command,7) );
    250a:	fe 01       	movw	r30, r28
    250c:	ed 59       	subi	r30, 0x9D	; 157
    250e:	ff 4f       	sbci	r31, 0xFF	; 255
    2510:	80 81       	ld	r24, Z
    2512:	98 2f       	mov	r25, r24
    2514:	99 1f       	adc	r25, r25
    2516:	99 27       	eor	r25, r25
    2518:	99 1f       	adc	r25, r25
    251a:	82 e0       	ldi	r24, 0x02	; 2
    251c:	67 e0       	ldi	r22, 0x07	; 7
    251e:	49 2f       	mov	r20, r25
    2520:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <GPIO_writePin>
    2524:	fe 01       	movw	r30, r28
    2526:	ed 5b       	subi	r30, 0xBD	; 189
    2528:	ff 4f       	sbci	r31, 0xFF	; 255
    252a:	80 e0       	ldi	r24, 0x00	; 0
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	a0 e8       	ldi	r26, 0x80	; 128
    2530:	bf e3       	ldi	r27, 0x3F	; 63
    2532:	80 83       	st	Z, r24
    2534:	91 83       	std	Z+1, r25	; 0x01
    2536:	a2 83       	std	Z+2, r26	; 0x02
    2538:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    253a:	8e 01       	movw	r16, r28
    253c:	01 5c       	subi	r16, 0xC1	; 193
    253e:	1f 4f       	sbci	r17, 0xFF	; 255
    2540:	fe 01       	movw	r30, r28
    2542:	ed 5b       	subi	r30, 0xBD	; 189
    2544:	ff 4f       	sbci	r31, 0xFF	; 255
    2546:	60 81       	ld	r22, Z
    2548:	71 81       	ldd	r23, Z+1	; 0x01
    254a:	82 81       	ldd	r24, Z+2	; 0x02
    254c:	93 81       	ldd	r25, Z+3	; 0x03
    254e:	20 e0       	ldi	r18, 0x00	; 0
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	4a ef       	ldi	r20, 0xFA	; 250
    2554:	54 e4       	ldi	r21, 0x44	; 68
    2556:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    255a:	dc 01       	movw	r26, r24
    255c:	cb 01       	movw	r24, r22
    255e:	f8 01       	movw	r30, r16
    2560:	80 83       	st	Z, r24
    2562:	91 83       	std	Z+1, r25	; 0x01
    2564:	a2 83       	std	Z+2, r26	; 0x02
    2566:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2568:	fe 01       	movw	r30, r28
    256a:	ff 96       	adiw	r30, 0x3f	; 63
    256c:	60 81       	ld	r22, Z
    256e:	71 81       	ldd	r23, Z+1	; 0x01
    2570:	82 81       	ldd	r24, Z+2	; 0x02
    2572:	93 81       	ldd	r25, Z+3	; 0x03
    2574:	20 e0       	ldi	r18, 0x00	; 0
    2576:	30 e0       	ldi	r19, 0x00	; 0
    2578:	40 e8       	ldi	r20, 0x80	; 128
    257a:	5f e3       	ldi	r21, 0x3F	; 63
    257c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2580:	88 23       	and	r24, r24
    2582:	2c f4       	brge	.+10     	; 0x258e <LCD_sendCommand+0x40e>
		__ticks = 1;
    2584:	81 e0       	ldi	r24, 0x01	; 1
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	9e af       	std	Y+62, r25	; 0x3e
    258a:	8d af       	std	Y+61, r24	; 0x3d
    258c:	46 c0       	rjmp	.+140    	; 0x261a <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    258e:	fe 01       	movw	r30, r28
    2590:	ff 96       	adiw	r30, 0x3f	; 63
    2592:	60 81       	ld	r22, Z
    2594:	71 81       	ldd	r23, Z+1	; 0x01
    2596:	82 81       	ldd	r24, Z+2	; 0x02
    2598:	93 81       	ldd	r25, Z+3	; 0x03
    259a:	20 e0       	ldi	r18, 0x00	; 0
    259c:	3f ef       	ldi	r19, 0xFF	; 255
    259e:	4f e7       	ldi	r20, 0x7F	; 127
    25a0:	57 e4       	ldi	r21, 0x47	; 71
    25a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25a6:	18 16       	cp	r1, r24
    25a8:	64 f5       	brge	.+88     	; 0x2602 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25aa:	fe 01       	movw	r30, r28
    25ac:	ed 5b       	subi	r30, 0xBD	; 189
    25ae:	ff 4f       	sbci	r31, 0xFF	; 255
    25b0:	60 81       	ld	r22, Z
    25b2:	71 81       	ldd	r23, Z+1	; 0x01
    25b4:	82 81       	ldd	r24, Z+2	; 0x02
    25b6:	93 81       	ldd	r25, Z+3	; 0x03
    25b8:	20 e0       	ldi	r18, 0x00	; 0
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	40 e2       	ldi	r20, 0x20	; 32
    25be:	51 e4       	ldi	r21, 0x41	; 65
    25c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25c4:	dc 01       	movw	r26, r24
    25c6:	cb 01       	movw	r24, r22
    25c8:	bc 01       	movw	r22, r24
    25ca:	cd 01       	movw	r24, r26
    25cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d0:	dc 01       	movw	r26, r24
    25d2:	cb 01       	movw	r24, r22
    25d4:	9e af       	std	Y+62, r25	; 0x3e
    25d6:	8d af       	std	Y+61, r24	; 0x3d
    25d8:	0f c0       	rjmp	.+30     	; 0x25f8 <LCD_sendCommand+0x478>
    25da:	88 ec       	ldi	r24, 0xC8	; 200
    25dc:	90 e0       	ldi	r25, 0x00	; 0
    25de:	9c af       	std	Y+60, r25	; 0x3c
    25e0:	8b af       	std	Y+59, r24	; 0x3b
    25e2:	8b ad       	ldd	r24, Y+59	; 0x3b
    25e4:	9c ad       	ldd	r25, Y+60	; 0x3c
    25e6:	01 97       	sbiw	r24, 0x01	; 1
    25e8:	f1 f7       	brne	.-4      	; 0x25e6 <LCD_sendCommand+0x466>
    25ea:	9c af       	std	Y+60, r25	; 0x3c
    25ec:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25ee:	8d ad       	ldd	r24, Y+61	; 0x3d
    25f0:	9e ad       	ldd	r25, Y+62	; 0x3e
    25f2:	01 97       	sbiw	r24, 0x01	; 1
    25f4:	9e af       	std	Y+62, r25	; 0x3e
    25f6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25f8:	8d ad       	ldd	r24, Y+61	; 0x3d
    25fa:	9e ad       	ldd	r25, Y+62	; 0x3e
    25fc:	00 97       	sbiw	r24, 0x00	; 0
    25fe:	69 f7       	brne	.-38     	; 0x25da <LCD_sendCommand+0x45a>
    2600:	16 c0       	rjmp	.+44     	; 0x262e <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2602:	fe 01       	movw	r30, r28
    2604:	ff 96       	adiw	r30, 0x3f	; 63
    2606:	60 81       	ld	r22, Z
    2608:	71 81       	ldd	r23, Z+1	; 0x01
    260a:	82 81       	ldd	r24, Z+2	; 0x02
    260c:	93 81       	ldd	r25, Z+3	; 0x03
    260e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2612:	dc 01       	movw	r26, r24
    2614:	cb 01       	movw	r24, r22
    2616:	9e af       	std	Y+62, r25	; 0x3e
    2618:	8d af       	std	Y+61, r24	; 0x3d
    261a:	8d ad       	ldd	r24, Y+61	; 0x3d
    261c:	9e ad       	ldd	r25, Y+62	; 0x3e
    261e:	9a af       	std	Y+58, r25	; 0x3a
    2620:	89 af       	std	Y+57, r24	; 0x39
    2622:	89 ad       	ldd	r24, Y+57	; 0x39
    2624:	9a ad       	ldd	r25, Y+58	; 0x3a
    2626:	01 97       	sbiw	r24, 0x01	; 1
    2628:	f1 f7       	brne	.-4      	; 0x2626 <LCD_sendCommand+0x4a6>
    262a:	9a af       	std	Y+58, r25	; 0x3a
    262c:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1);
	GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, LOGIC_LOW); /*write 0 in enable pin to make falling edge*/
    262e:	83 e0       	ldi	r24, 0x03	; 3
    2630:	63 e0       	ldi	r22, 0x03	; 3
    2632:	40 e0       	ldi	r20, 0x00	; 0
    2634:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <GPIO_writePin>
    2638:	80 e0       	ldi	r24, 0x00	; 0
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	a0 e8       	ldi	r26, 0x80	; 128
    263e:	bf e3       	ldi	r27, 0x3F	; 63
    2640:	8d ab       	std	Y+53, r24	; 0x35
    2642:	9e ab       	std	Y+54, r25	; 0x36
    2644:	af ab       	std	Y+55, r26	; 0x37
    2646:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2648:	6d a9       	ldd	r22, Y+53	; 0x35
    264a:	7e a9       	ldd	r23, Y+54	; 0x36
    264c:	8f a9       	ldd	r24, Y+55	; 0x37
    264e:	98 ad       	ldd	r25, Y+56	; 0x38
    2650:	20 e0       	ldi	r18, 0x00	; 0
    2652:	30 e0       	ldi	r19, 0x00	; 0
    2654:	4a ef       	ldi	r20, 0xFA	; 250
    2656:	54 e4       	ldi	r21, 0x44	; 68
    2658:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    265c:	dc 01       	movw	r26, r24
    265e:	cb 01       	movw	r24, r22
    2660:	89 ab       	std	Y+49, r24	; 0x31
    2662:	9a ab       	std	Y+50, r25	; 0x32
    2664:	ab ab       	std	Y+51, r26	; 0x33
    2666:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2668:	69 a9       	ldd	r22, Y+49	; 0x31
    266a:	7a a9       	ldd	r23, Y+50	; 0x32
    266c:	8b a9       	ldd	r24, Y+51	; 0x33
    266e:	9c a9       	ldd	r25, Y+52	; 0x34
    2670:	20 e0       	ldi	r18, 0x00	; 0
    2672:	30 e0       	ldi	r19, 0x00	; 0
    2674:	40 e8       	ldi	r20, 0x80	; 128
    2676:	5f e3       	ldi	r21, 0x3F	; 63
    2678:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    267c:	88 23       	and	r24, r24
    267e:	2c f4       	brge	.+10     	; 0x268a <LCD_sendCommand+0x50a>
		__ticks = 1;
    2680:	81 e0       	ldi	r24, 0x01	; 1
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	98 ab       	std	Y+48, r25	; 0x30
    2686:	8f a7       	std	Y+47, r24	; 0x2f
    2688:	3f c0       	rjmp	.+126    	; 0x2708 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    268a:	69 a9       	ldd	r22, Y+49	; 0x31
    268c:	7a a9       	ldd	r23, Y+50	; 0x32
    268e:	8b a9       	ldd	r24, Y+51	; 0x33
    2690:	9c a9       	ldd	r25, Y+52	; 0x34
    2692:	20 e0       	ldi	r18, 0x00	; 0
    2694:	3f ef       	ldi	r19, 0xFF	; 255
    2696:	4f e7       	ldi	r20, 0x7F	; 127
    2698:	57 e4       	ldi	r21, 0x47	; 71
    269a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    269e:	18 16       	cp	r1, r24
    26a0:	4c f5       	brge	.+82     	; 0x26f4 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26a2:	6d a9       	ldd	r22, Y+53	; 0x35
    26a4:	7e a9       	ldd	r23, Y+54	; 0x36
    26a6:	8f a9       	ldd	r24, Y+55	; 0x37
    26a8:	98 ad       	ldd	r25, Y+56	; 0x38
    26aa:	20 e0       	ldi	r18, 0x00	; 0
    26ac:	30 e0       	ldi	r19, 0x00	; 0
    26ae:	40 e2       	ldi	r20, 0x20	; 32
    26b0:	51 e4       	ldi	r21, 0x41	; 65
    26b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b6:	dc 01       	movw	r26, r24
    26b8:	cb 01       	movw	r24, r22
    26ba:	bc 01       	movw	r22, r24
    26bc:	cd 01       	movw	r24, r26
    26be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c2:	dc 01       	movw	r26, r24
    26c4:	cb 01       	movw	r24, r22
    26c6:	98 ab       	std	Y+48, r25	; 0x30
    26c8:	8f a7       	std	Y+47, r24	; 0x2f
    26ca:	0f c0       	rjmp	.+30     	; 0x26ea <LCD_sendCommand+0x56a>
    26cc:	88 ec       	ldi	r24, 0xC8	; 200
    26ce:	90 e0       	ldi	r25, 0x00	; 0
    26d0:	9e a7       	std	Y+46, r25	; 0x2e
    26d2:	8d a7       	std	Y+45, r24	; 0x2d
    26d4:	8d a5       	ldd	r24, Y+45	; 0x2d
    26d6:	9e a5       	ldd	r25, Y+46	; 0x2e
    26d8:	01 97       	sbiw	r24, 0x01	; 1
    26da:	f1 f7       	brne	.-4      	; 0x26d8 <LCD_sendCommand+0x558>
    26dc:	9e a7       	std	Y+46, r25	; 0x2e
    26de:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    26e2:	98 a9       	ldd	r25, Y+48	; 0x30
    26e4:	01 97       	sbiw	r24, 0x01	; 1
    26e6:	98 ab       	std	Y+48, r25	; 0x30
    26e8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    26ec:	98 a9       	ldd	r25, Y+48	; 0x30
    26ee:	00 97       	sbiw	r24, 0x00	; 0
    26f0:	69 f7       	brne	.-38     	; 0x26cc <LCD_sendCommand+0x54c>
    26f2:	14 c0       	rjmp	.+40     	; 0x271c <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26f4:	69 a9       	ldd	r22, Y+49	; 0x31
    26f6:	7a a9       	ldd	r23, Y+50	; 0x32
    26f8:	8b a9       	ldd	r24, Y+51	; 0x33
    26fa:	9c a9       	ldd	r25, Y+52	; 0x34
    26fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2700:	dc 01       	movw	r26, r24
    2702:	cb 01       	movw	r24, r22
    2704:	98 ab       	std	Y+48, r25	; 0x30
    2706:	8f a7       	std	Y+47, r24	; 0x2f
    2708:	8f a5       	ldd	r24, Y+47	; 0x2f
    270a:	98 a9       	ldd	r25, Y+48	; 0x30
    270c:	9c a7       	std	Y+44, r25	; 0x2c
    270e:	8b a7       	std	Y+43, r24	; 0x2b
    2710:	8b a5       	ldd	r24, Y+43	; 0x2b
    2712:	9c a5       	ldd	r25, Y+44	; 0x2c
    2714:	01 97       	sbiw	r24, 0x01	; 1
    2716:	f1 f7       	brne	.-4      	; 0x2714 <LCD_sendCommand+0x594>
    2718:	9c a7       	std	Y+44, r25	; 0x2c
    271a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, LOGIC_HIGH); /*write 1 in enable pin */
    271c:	83 e0       	ldi	r24, 0x03	; 3
    271e:	63 e0       	ldi	r22, 0x03	; 3
    2720:	41 e0       	ldi	r20, 0x01	; 1
    2722:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <GPIO_writePin>
    2726:	80 e0       	ldi	r24, 0x00	; 0
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	a0 e8       	ldi	r26, 0x80	; 128
    272c:	bf e3       	ldi	r27, 0x3F	; 63
    272e:	8f a3       	std	Y+39, r24	; 0x27
    2730:	98 a7       	std	Y+40, r25	; 0x28
    2732:	a9 a7       	std	Y+41, r26	; 0x29
    2734:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2736:	6f a1       	ldd	r22, Y+39	; 0x27
    2738:	78 a5       	ldd	r23, Y+40	; 0x28
    273a:	89 a5       	ldd	r24, Y+41	; 0x29
    273c:	9a a5       	ldd	r25, Y+42	; 0x2a
    273e:	20 e0       	ldi	r18, 0x00	; 0
    2740:	30 e0       	ldi	r19, 0x00	; 0
    2742:	4a ef       	ldi	r20, 0xFA	; 250
    2744:	54 e4       	ldi	r21, 0x44	; 68
    2746:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    274a:	dc 01       	movw	r26, r24
    274c:	cb 01       	movw	r24, r22
    274e:	8b a3       	std	Y+35, r24	; 0x23
    2750:	9c a3       	std	Y+36, r25	; 0x24
    2752:	ad a3       	std	Y+37, r26	; 0x25
    2754:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2756:	6b a1       	ldd	r22, Y+35	; 0x23
    2758:	7c a1       	ldd	r23, Y+36	; 0x24
    275a:	8d a1       	ldd	r24, Y+37	; 0x25
    275c:	9e a1       	ldd	r25, Y+38	; 0x26
    275e:	20 e0       	ldi	r18, 0x00	; 0
    2760:	30 e0       	ldi	r19, 0x00	; 0
    2762:	40 e8       	ldi	r20, 0x80	; 128
    2764:	5f e3       	ldi	r21, 0x3F	; 63
    2766:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    276a:	88 23       	and	r24, r24
    276c:	2c f4       	brge	.+10     	; 0x2778 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    276e:	81 e0       	ldi	r24, 0x01	; 1
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	9a a3       	std	Y+34, r25	; 0x22
    2774:	89 a3       	std	Y+33, r24	; 0x21
    2776:	3f c0       	rjmp	.+126    	; 0x27f6 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    2778:	6b a1       	ldd	r22, Y+35	; 0x23
    277a:	7c a1       	ldd	r23, Y+36	; 0x24
    277c:	8d a1       	ldd	r24, Y+37	; 0x25
    277e:	9e a1       	ldd	r25, Y+38	; 0x26
    2780:	20 e0       	ldi	r18, 0x00	; 0
    2782:	3f ef       	ldi	r19, 0xFF	; 255
    2784:	4f e7       	ldi	r20, 0x7F	; 127
    2786:	57 e4       	ldi	r21, 0x47	; 71
    2788:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    278c:	18 16       	cp	r1, r24
    278e:	4c f5       	brge	.+82     	; 0x27e2 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2790:	6f a1       	ldd	r22, Y+39	; 0x27
    2792:	78 a5       	ldd	r23, Y+40	; 0x28
    2794:	89 a5       	ldd	r24, Y+41	; 0x29
    2796:	9a a5       	ldd	r25, Y+42	; 0x2a
    2798:	20 e0       	ldi	r18, 0x00	; 0
    279a:	30 e0       	ldi	r19, 0x00	; 0
    279c:	40 e2       	ldi	r20, 0x20	; 32
    279e:	51 e4       	ldi	r21, 0x41	; 65
    27a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27a4:	dc 01       	movw	r26, r24
    27a6:	cb 01       	movw	r24, r22
    27a8:	bc 01       	movw	r22, r24
    27aa:	cd 01       	movw	r24, r26
    27ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27b0:	dc 01       	movw	r26, r24
    27b2:	cb 01       	movw	r24, r22
    27b4:	9a a3       	std	Y+34, r25	; 0x22
    27b6:	89 a3       	std	Y+33, r24	; 0x21
    27b8:	0f c0       	rjmp	.+30     	; 0x27d8 <LCD_sendCommand+0x658>
    27ba:	88 ec       	ldi	r24, 0xC8	; 200
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	98 a3       	std	Y+32, r25	; 0x20
    27c0:	8f 8f       	std	Y+31, r24	; 0x1f
    27c2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    27c4:	98 a1       	ldd	r25, Y+32	; 0x20
    27c6:	01 97       	sbiw	r24, 0x01	; 1
    27c8:	f1 f7       	brne	.-4      	; 0x27c6 <LCD_sendCommand+0x646>
    27ca:	98 a3       	std	Y+32, r25	; 0x20
    27cc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ce:	89 a1       	ldd	r24, Y+33	; 0x21
    27d0:	9a a1       	ldd	r25, Y+34	; 0x22
    27d2:	01 97       	sbiw	r24, 0x01	; 1
    27d4:	9a a3       	std	Y+34, r25	; 0x22
    27d6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27d8:	89 a1       	ldd	r24, Y+33	; 0x21
    27da:	9a a1       	ldd	r25, Y+34	; 0x22
    27dc:	00 97       	sbiw	r24, 0x00	; 0
    27de:	69 f7       	brne	.-38     	; 0x27ba <LCD_sendCommand+0x63a>
    27e0:	14 c0       	rjmp	.+40     	; 0x280a <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27e2:	6b a1       	ldd	r22, Y+35	; 0x23
    27e4:	7c a1       	ldd	r23, Y+36	; 0x24
    27e6:	8d a1       	ldd	r24, Y+37	; 0x25
    27e8:	9e a1       	ldd	r25, Y+38	; 0x26
    27ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ee:	dc 01       	movw	r26, r24
    27f0:	cb 01       	movw	r24, r22
    27f2:	9a a3       	std	Y+34, r25	; 0x22
    27f4:	89 a3       	std	Y+33, r24	; 0x21
    27f6:	89 a1       	ldd	r24, Y+33	; 0x21
    27f8:	9a a1       	ldd	r25, Y+34	; 0x22
    27fa:	9e 8f       	std	Y+30, r25	; 0x1e
    27fc:	8d 8f       	std	Y+29, r24	; 0x1d
    27fe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2800:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2802:	01 97       	sbiw	r24, 0x01	; 1
    2804:	f1 f7       	brne	.-4      	; 0x2802 <LCD_sendCommand+0x682>
    2806:	9e 8f       	std	Y+30, r25	; 0x1e
    2808:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN4 , GET_BIT(command,0) );
    280a:	fe 01       	movw	r30, r28
    280c:	ed 59       	subi	r30, 0x9D	; 157
    280e:	ff 4f       	sbci	r31, 0xFF	; 255
    2810:	80 81       	ld	r24, Z
    2812:	98 2f       	mov	r25, r24
    2814:	91 70       	andi	r25, 0x01	; 1
    2816:	82 e0       	ldi	r24, 0x02	; 2
    2818:	64 e0       	ldi	r22, 0x04	; 4
    281a:	49 2f       	mov	r20, r25
    281c:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN5 , GET_BIT(command,1) );
    2820:	fe 01       	movw	r30, r28
    2822:	ed 59       	subi	r30, 0x9D	; 157
    2824:	ff 4f       	sbci	r31, 0xFF	; 255
    2826:	80 81       	ld	r24, Z
    2828:	88 2f       	mov	r24, r24
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	82 70       	andi	r24, 0x02	; 2
    282e:	90 70       	andi	r25, 0x00	; 0
    2830:	95 95       	asr	r25
    2832:	87 95       	ror	r24
    2834:	98 2f       	mov	r25, r24
    2836:	82 e0       	ldi	r24, 0x02	; 2
    2838:	65 e0       	ldi	r22, 0x05	; 5
    283a:	49 2f       	mov	r20, r25
    283c:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN6 , GET_BIT(command,2) );
    2840:	fe 01       	movw	r30, r28
    2842:	ed 59       	subi	r30, 0x9D	; 157
    2844:	ff 4f       	sbci	r31, 0xFF	; 255
    2846:	80 81       	ld	r24, Z
    2848:	88 2f       	mov	r24, r24
    284a:	90 e0       	ldi	r25, 0x00	; 0
    284c:	84 70       	andi	r24, 0x04	; 4
    284e:	90 70       	andi	r25, 0x00	; 0
    2850:	95 95       	asr	r25
    2852:	87 95       	ror	r24
    2854:	95 95       	asr	r25
    2856:	87 95       	ror	r24
    2858:	98 2f       	mov	r25, r24
    285a:	82 e0       	ldi	r24, 0x02	; 2
    285c:	66 e0       	ldi	r22, 0x06	; 6
    285e:	49 2f       	mov	r20, r25
    2860:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN7 , GET_BIT(command,3) );
    2864:	fe 01       	movw	r30, r28
    2866:	ed 59       	subi	r30, 0x9D	; 157
    2868:	ff 4f       	sbci	r31, 0xFF	; 255
    286a:	80 81       	ld	r24, Z
    286c:	88 2f       	mov	r24, r24
    286e:	90 e0       	ldi	r25, 0x00	; 0
    2870:	88 70       	andi	r24, 0x08	; 8
    2872:	90 70       	andi	r25, 0x00	; 0
    2874:	95 95       	asr	r25
    2876:	87 95       	ror	r24
    2878:	95 95       	asr	r25
    287a:	87 95       	ror	r24
    287c:	95 95       	asr	r25
    287e:	87 95       	ror	r24
    2880:	98 2f       	mov	r25, r24
    2882:	82 e0       	ldi	r24, 0x02	; 2
    2884:	67 e0       	ldi	r22, 0x07	; 7
    2886:	49 2f       	mov	r20, r25
    2888:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <GPIO_writePin>
    288c:	80 e0       	ldi	r24, 0x00	; 0
    288e:	90 e0       	ldi	r25, 0x00	; 0
    2890:	a0 e8       	ldi	r26, 0x80	; 128
    2892:	bf e3       	ldi	r27, 0x3F	; 63
    2894:	89 8f       	std	Y+25, r24	; 0x19
    2896:	9a 8f       	std	Y+26, r25	; 0x1a
    2898:	ab 8f       	std	Y+27, r26	; 0x1b
    289a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    289c:	69 8d       	ldd	r22, Y+25	; 0x19
    289e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28a4:	20 e0       	ldi	r18, 0x00	; 0
    28a6:	30 e0       	ldi	r19, 0x00	; 0
    28a8:	4a ef       	ldi	r20, 0xFA	; 250
    28aa:	54 e4       	ldi	r21, 0x44	; 68
    28ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28b0:	dc 01       	movw	r26, r24
    28b2:	cb 01       	movw	r24, r22
    28b4:	8d 8b       	std	Y+21, r24	; 0x15
    28b6:	9e 8b       	std	Y+22, r25	; 0x16
    28b8:	af 8b       	std	Y+23, r26	; 0x17
    28ba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    28bc:	6d 89       	ldd	r22, Y+21	; 0x15
    28be:	7e 89       	ldd	r23, Y+22	; 0x16
    28c0:	8f 89       	ldd	r24, Y+23	; 0x17
    28c2:	98 8d       	ldd	r25, Y+24	; 0x18
    28c4:	20 e0       	ldi	r18, 0x00	; 0
    28c6:	30 e0       	ldi	r19, 0x00	; 0
    28c8:	40 e8       	ldi	r20, 0x80	; 128
    28ca:	5f e3       	ldi	r21, 0x3F	; 63
    28cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28d0:	88 23       	and	r24, r24
    28d2:	2c f4       	brge	.+10     	; 0x28de <LCD_sendCommand+0x75e>
		__ticks = 1;
    28d4:	81 e0       	ldi	r24, 0x01	; 1
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	9c 8b       	std	Y+20, r25	; 0x14
    28da:	8b 8b       	std	Y+19, r24	; 0x13
    28dc:	3f c0       	rjmp	.+126    	; 0x295c <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    28de:	6d 89       	ldd	r22, Y+21	; 0x15
    28e0:	7e 89       	ldd	r23, Y+22	; 0x16
    28e2:	8f 89       	ldd	r24, Y+23	; 0x17
    28e4:	98 8d       	ldd	r25, Y+24	; 0x18
    28e6:	20 e0       	ldi	r18, 0x00	; 0
    28e8:	3f ef       	ldi	r19, 0xFF	; 255
    28ea:	4f e7       	ldi	r20, 0x7F	; 127
    28ec:	57 e4       	ldi	r21, 0x47	; 71
    28ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28f2:	18 16       	cp	r1, r24
    28f4:	4c f5       	brge	.+82     	; 0x2948 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28f6:	69 8d       	ldd	r22, Y+25	; 0x19
    28f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28fe:	20 e0       	ldi	r18, 0x00	; 0
    2900:	30 e0       	ldi	r19, 0x00	; 0
    2902:	40 e2       	ldi	r20, 0x20	; 32
    2904:	51 e4       	ldi	r21, 0x41	; 65
    2906:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    290a:	dc 01       	movw	r26, r24
    290c:	cb 01       	movw	r24, r22
    290e:	bc 01       	movw	r22, r24
    2910:	cd 01       	movw	r24, r26
    2912:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2916:	dc 01       	movw	r26, r24
    2918:	cb 01       	movw	r24, r22
    291a:	9c 8b       	std	Y+20, r25	; 0x14
    291c:	8b 8b       	std	Y+19, r24	; 0x13
    291e:	0f c0       	rjmp	.+30     	; 0x293e <LCD_sendCommand+0x7be>
    2920:	88 ec       	ldi	r24, 0xC8	; 200
    2922:	90 e0       	ldi	r25, 0x00	; 0
    2924:	9a 8b       	std	Y+18, r25	; 0x12
    2926:	89 8b       	std	Y+17, r24	; 0x11
    2928:	89 89       	ldd	r24, Y+17	; 0x11
    292a:	9a 89       	ldd	r25, Y+18	; 0x12
    292c:	01 97       	sbiw	r24, 0x01	; 1
    292e:	f1 f7       	brne	.-4      	; 0x292c <LCD_sendCommand+0x7ac>
    2930:	9a 8b       	std	Y+18, r25	; 0x12
    2932:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2934:	8b 89       	ldd	r24, Y+19	; 0x13
    2936:	9c 89       	ldd	r25, Y+20	; 0x14
    2938:	01 97       	sbiw	r24, 0x01	; 1
    293a:	9c 8b       	std	Y+20, r25	; 0x14
    293c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    293e:	8b 89       	ldd	r24, Y+19	; 0x13
    2940:	9c 89       	ldd	r25, Y+20	; 0x14
    2942:	00 97       	sbiw	r24, 0x00	; 0
    2944:	69 f7       	brne	.-38     	; 0x2920 <LCD_sendCommand+0x7a0>
    2946:	14 c0       	rjmp	.+40     	; 0x2970 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2948:	6d 89       	ldd	r22, Y+21	; 0x15
    294a:	7e 89       	ldd	r23, Y+22	; 0x16
    294c:	8f 89       	ldd	r24, Y+23	; 0x17
    294e:	98 8d       	ldd	r25, Y+24	; 0x18
    2950:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2954:	dc 01       	movw	r26, r24
    2956:	cb 01       	movw	r24, r22
    2958:	9c 8b       	std	Y+20, r25	; 0x14
    295a:	8b 8b       	std	Y+19, r24	; 0x13
    295c:	8b 89       	ldd	r24, Y+19	; 0x13
    295e:	9c 89       	ldd	r25, Y+20	; 0x14
    2960:	98 8b       	std	Y+16, r25	; 0x10
    2962:	8f 87       	std	Y+15, r24	; 0x0f
    2964:	8f 85       	ldd	r24, Y+15	; 0x0f
    2966:	98 89       	ldd	r25, Y+16	; 0x10
    2968:	01 97       	sbiw	r24, 0x01	; 1
    296a:	f1 f7       	brne	.-4      	; 0x2968 <LCD_sendCommand+0x7e8>
    296c:	98 8b       	std	Y+16, r25	; 0x10
    296e:	8f 87       	std	Y+15, r24	; 0x0f



#endif

	GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, LOGIC_LOW);
    2970:	83 e0       	ldi	r24, 0x03	; 3
    2972:	63 e0       	ldi	r22, 0x03	; 3
    2974:	40 e0       	ldi	r20, 0x00	; 0
    2976:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <GPIO_writePin>
    297a:	80 e0       	ldi	r24, 0x00	; 0
    297c:	90 e0       	ldi	r25, 0x00	; 0
    297e:	a0 e8       	ldi	r26, 0x80	; 128
    2980:	bf e3       	ldi	r27, 0x3F	; 63
    2982:	8b 87       	std	Y+11, r24	; 0x0b
    2984:	9c 87       	std	Y+12, r25	; 0x0c
    2986:	ad 87       	std	Y+13, r26	; 0x0d
    2988:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    298a:	6b 85       	ldd	r22, Y+11	; 0x0b
    298c:	7c 85       	ldd	r23, Y+12	; 0x0c
    298e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2990:	9e 85       	ldd	r25, Y+14	; 0x0e
    2992:	20 e0       	ldi	r18, 0x00	; 0
    2994:	30 e0       	ldi	r19, 0x00	; 0
    2996:	4a ef       	ldi	r20, 0xFA	; 250
    2998:	54 e4       	ldi	r21, 0x44	; 68
    299a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    299e:	dc 01       	movw	r26, r24
    29a0:	cb 01       	movw	r24, r22
    29a2:	8f 83       	std	Y+7, r24	; 0x07
    29a4:	98 87       	std	Y+8, r25	; 0x08
    29a6:	a9 87       	std	Y+9, r26	; 0x09
    29a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29aa:	6f 81       	ldd	r22, Y+7	; 0x07
    29ac:	78 85       	ldd	r23, Y+8	; 0x08
    29ae:	89 85       	ldd	r24, Y+9	; 0x09
    29b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    29b2:	20 e0       	ldi	r18, 0x00	; 0
    29b4:	30 e0       	ldi	r19, 0x00	; 0
    29b6:	40 e8       	ldi	r20, 0x80	; 128
    29b8:	5f e3       	ldi	r21, 0x3F	; 63
    29ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29be:	88 23       	and	r24, r24
    29c0:	2c f4       	brge	.+10     	; 0x29cc <LCD_sendCommand+0x84c>
		__ticks = 1;
    29c2:	81 e0       	ldi	r24, 0x01	; 1
    29c4:	90 e0       	ldi	r25, 0x00	; 0
    29c6:	9e 83       	std	Y+6, r25	; 0x06
    29c8:	8d 83       	std	Y+5, r24	; 0x05
    29ca:	3f c0       	rjmp	.+126    	; 0x2a4a <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    29cc:	6f 81       	ldd	r22, Y+7	; 0x07
    29ce:	78 85       	ldd	r23, Y+8	; 0x08
    29d0:	89 85       	ldd	r24, Y+9	; 0x09
    29d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    29d4:	20 e0       	ldi	r18, 0x00	; 0
    29d6:	3f ef       	ldi	r19, 0xFF	; 255
    29d8:	4f e7       	ldi	r20, 0x7F	; 127
    29da:	57 e4       	ldi	r21, 0x47	; 71
    29dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29e0:	18 16       	cp	r1, r24
    29e2:	4c f5       	brge	.+82     	; 0x2a36 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    29e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    29e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    29ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    29ec:	20 e0       	ldi	r18, 0x00	; 0
    29ee:	30 e0       	ldi	r19, 0x00	; 0
    29f0:	40 e2       	ldi	r20, 0x20	; 32
    29f2:	51 e4       	ldi	r21, 0x41	; 65
    29f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29f8:	dc 01       	movw	r26, r24
    29fa:	cb 01       	movw	r24, r22
    29fc:	bc 01       	movw	r22, r24
    29fe:	cd 01       	movw	r24, r26
    2a00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a04:	dc 01       	movw	r26, r24
    2a06:	cb 01       	movw	r24, r22
    2a08:	9e 83       	std	Y+6, r25	; 0x06
    2a0a:	8d 83       	std	Y+5, r24	; 0x05
    2a0c:	0f c0       	rjmp	.+30     	; 0x2a2c <LCD_sendCommand+0x8ac>
    2a0e:	88 ec       	ldi	r24, 0xC8	; 200
    2a10:	90 e0       	ldi	r25, 0x00	; 0
    2a12:	9c 83       	std	Y+4, r25	; 0x04
    2a14:	8b 83       	std	Y+3, r24	; 0x03
    2a16:	8b 81       	ldd	r24, Y+3	; 0x03
    2a18:	9c 81       	ldd	r25, Y+4	; 0x04
    2a1a:	01 97       	sbiw	r24, 0x01	; 1
    2a1c:	f1 f7       	brne	.-4      	; 0x2a1a <LCD_sendCommand+0x89a>
    2a1e:	9c 83       	std	Y+4, r25	; 0x04
    2a20:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a22:	8d 81       	ldd	r24, Y+5	; 0x05
    2a24:	9e 81       	ldd	r25, Y+6	; 0x06
    2a26:	01 97       	sbiw	r24, 0x01	; 1
    2a28:	9e 83       	std	Y+6, r25	; 0x06
    2a2a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a2c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a2e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a30:	00 97       	sbiw	r24, 0x00	; 0
    2a32:	69 f7       	brne	.-38     	; 0x2a0e <LCD_sendCommand+0x88e>
    2a34:	14 c0       	rjmp	.+40     	; 0x2a5e <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a36:	6f 81       	ldd	r22, Y+7	; 0x07
    2a38:	78 85       	ldd	r23, Y+8	; 0x08
    2a3a:	89 85       	ldd	r24, Y+9	; 0x09
    2a3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a42:	dc 01       	movw	r26, r24
    2a44:	cb 01       	movw	r24, r22
    2a46:	9e 83       	std	Y+6, r25	; 0x06
    2a48:	8d 83       	std	Y+5, r24	; 0x05
    2a4a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a4c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a4e:	9a 83       	std	Y+2, r25	; 0x02
    2a50:	89 83       	std	Y+1, r24	; 0x01
    2a52:	89 81       	ldd	r24, Y+1	; 0x01
    2a54:	9a 81       	ldd	r25, Y+2	; 0x02
    2a56:	01 97       	sbiw	r24, 0x01	; 1
    2a58:	f1 f7       	brne	.-4      	; 0x2a56 <LCD_sendCommand+0x8d6>
    2a5a:	9a 83       	std	Y+2, r25	; 0x02
    2a5c:	89 83       	std	Y+1, r24	; 0x01
	/*write  0 in enable pin beacase LCD read the at falling edge of enable, so we make it 1 then 0*/

	_delay_ms(1);
}
    2a5e:	cd 59       	subi	r28, 0x9D	; 157
    2a60:	df 4f       	sbci	r29, 0xFF	; 255
    2a62:	0f b6       	in	r0, 0x3f	; 63
    2a64:	f8 94       	cli
    2a66:	de bf       	out	0x3e, r29	; 62
    2a68:	0f be       	out	0x3f, r0	; 63
    2a6a:	cd bf       	out	0x3d, r28	; 61
    2a6c:	cf 91       	pop	r28
    2a6e:	df 91       	pop	r29
    2a70:	1f 91       	pop	r17
    2a72:	0f 91       	pop	r16
    2a74:	08 95       	ret

00002a76 <LCD_init>:


void LCD_init(void)
{
    2a76:	df 93       	push	r29
    2a78:	cf 93       	push	r28
    2a7a:	cd b7       	in	r28, 0x3d	; 61
    2a7c:	de b7       	in	r29, 0x3e	; 62
    2a7e:	6c 97       	sbiw	r28, 0x1c	; 28
    2a80:	0f b6       	in	r0, 0x3f	; 63
    2a82:	f8 94       	cli
    2a84:	de bf       	out	0x3e, r29	; 62
    2a86:	0f be       	out	0x3f, r0	; 63
    2a88:	cd bf       	out	0x3d, r28	; 61
	GPIO_setupPinDirection(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID,OUTPUT);/*make enable output*/
    2a8a:	83 e0       	ldi	r24, 0x03	; 3
    2a8c:	63 e0       	ldi	r22, 0x03	; 3
    2a8e:	41 e0       	ldi	r20, 0x01	; 1
    2a90:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <GPIO_setupPinDirection>

	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID,OUTPUT);/*make RS  output*/
    2a94:	83 e0       	ldi	r24, 0x03	; 3
    2a96:	62 e0       	ldi	r22, 0x02	; 2
    2a98:	41 e0       	ldi	r20, 0x01	; 1
    2a9a:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <GPIO_setupPinDirection>
    2a9e:	80 e0       	ldi	r24, 0x00	; 0
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
    2aa2:	a0 ea       	ldi	r26, 0xA0	; 160
    2aa4:	b1 e4       	ldi	r27, 0x41	; 65
    2aa6:	89 8f       	std	Y+25, r24	; 0x19
    2aa8:	9a 8f       	std	Y+26, r25	; 0x1a
    2aaa:	ab 8f       	std	Y+27, r26	; 0x1b
    2aac:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aae:	69 8d       	ldd	r22, Y+25	; 0x19
    2ab0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ab2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ab4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ab6:	20 e0       	ldi	r18, 0x00	; 0
    2ab8:	30 e0       	ldi	r19, 0x00	; 0
    2aba:	4a ef       	ldi	r20, 0xFA	; 250
    2abc:	54 e4       	ldi	r21, 0x44	; 68
    2abe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ac2:	dc 01       	movw	r26, r24
    2ac4:	cb 01       	movw	r24, r22
    2ac6:	8d 8b       	std	Y+21, r24	; 0x15
    2ac8:	9e 8b       	std	Y+22, r25	; 0x16
    2aca:	af 8b       	std	Y+23, r26	; 0x17
    2acc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ace:	6d 89       	ldd	r22, Y+21	; 0x15
    2ad0:	7e 89       	ldd	r23, Y+22	; 0x16
    2ad2:	8f 89       	ldd	r24, Y+23	; 0x17
    2ad4:	98 8d       	ldd	r25, Y+24	; 0x18
    2ad6:	20 e0       	ldi	r18, 0x00	; 0
    2ad8:	30 e0       	ldi	r19, 0x00	; 0
    2ada:	40 e8       	ldi	r20, 0x80	; 128
    2adc:	5f e3       	ldi	r21, 0x3F	; 63
    2ade:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ae2:	88 23       	and	r24, r24
    2ae4:	2c f4       	brge	.+10     	; 0x2af0 <LCD_init+0x7a>
		__ticks = 1;
    2ae6:	81 e0       	ldi	r24, 0x01	; 1
    2ae8:	90 e0       	ldi	r25, 0x00	; 0
    2aea:	9c 8b       	std	Y+20, r25	; 0x14
    2aec:	8b 8b       	std	Y+19, r24	; 0x13
    2aee:	3f c0       	rjmp	.+126    	; 0x2b6e <LCD_init+0xf8>
	else if (__tmp > 65535)
    2af0:	6d 89       	ldd	r22, Y+21	; 0x15
    2af2:	7e 89       	ldd	r23, Y+22	; 0x16
    2af4:	8f 89       	ldd	r24, Y+23	; 0x17
    2af6:	98 8d       	ldd	r25, Y+24	; 0x18
    2af8:	20 e0       	ldi	r18, 0x00	; 0
    2afa:	3f ef       	ldi	r19, 0xFF	; 255
    2afc:	4f e7       	ldi	r20, 0x7F	; 127
    2afe:	57 e4       	ldi	r21, 0x47	; 71
    2b00:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b04:	18 16       	cp	r1, r24
    2b06:	4c f5       	brge	.+82     	; 0x2b5a <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b08:	69 8d       	ldd	r22, Y+25	; 0x19
    2b0a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b0c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b0e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b10:	20 e0       	ldi	r18, 0x00	; 0
    2b12:	30 e0       	ldi	r19, 0x00	; 0
    2b14:	40 e2       	ldi	r20, 0x20	; 32
    2b16:	51 e4       	ldi	r21, 0x41	; 65
    2b18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b1c:	dc 01       	movw	r26, r24
    2b1e:	cb 01       	movw	r24, r22
    2b20:	bc 01       	movw	r22, r24
    2b22:	cd 01       	movw	r24, r26
    2b24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b28:	dc 01       	movw	r26, r24
    2b2a:	cb 01       	movw	r24, r22
    2b2c:	9c 8b       	std	Y+20, r25	; 0x14
    2b2e:	8b 8b       	std	Y+19, r24	; 0x13
    2b30:	0f c0       	rjmp	.+30     	; 0x2b50 <LCD_init+0xda>
    2b32:	88 ec       	ldi	r24, 0xC8	; 200
    2b34:	90 e0       	ldi	r25, 0x00	; 0
    2b36:	9a 8b       	std	Y+18, r25	; 0x12
    2b38:	89 8b       	std	Y+17, r24	; 0x11
    2b3a:	89 89       	ldd	r24, Y+17	; 0x11
    2b3c:	9a 89       	ldd	r25, Y+18	; 0x12
    2b3e:	01 97       	sbiw	r24, 0x01	; 1
    2b40:	f1 f7       	brne	.-4      	; 0x2b3e <LCD_init+0xc8>
    2b42:	9a 8b       	std	Y+18, r25	; 0x12
    2b44:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b46:	8b 89       	ldd	r24, Y+19	; 0x13
    2b48:	9c 89       	ldd	r25, Y+20	; 0x14
    2b4a:	01 97       	sbiw	r24, 0x01	; 1
    2b4c:	9c 8b       	std	Y+20, r25	; 0x14
    2b4e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b50:	8b 89       	ldd	r24, Y+19	; 0x13
    2b52:	9c 89       	ldd	r25, Y+20	; 0x14
    2b54:	00 97       	sbiw	r24, 0x00	; 0
    2b56:	69 f7       	brne	.-38     	; 0x2b32 <LCD_init+0xbc>
    2b58:	14 c0       	rjmp	.+40     	; 0x2b82 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b5a:	6d 89       	ldd	r22, Y+21	; 0x15
    2b5c:	7e 89       	ldd	r23, Y+22	; 0x16
    2b5e:	8f 89       	ldd	r24, Y+23	; 0x17
    2b60:	98 8d       	ldd	r25, Y+24	; 0x18
    2b62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b66:	dc 01       	movw	r26, r24
    2b68:	cb 01       	movw	r24, r22
    2b6a:	9c 8b       	std	Y+20, r25	; 0x14
    2b6c:	8b 8b       	std	Y+19, r24	; 0x13
    2b6e:	8b 89       	ldd	r24, Y+19	; 0x13
    2b70:	9c 89       	ldd	r25, Y+20	; 0x14
    2b72:	98 8b       	std	Y+16, r25	; 0x10
    2b74:	8f 87       	std	Y+15, r24	; 0x0f
    2b76:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b78:	98 89       	ldd	r25, Y+16	; 0x10
    2b7a:	01 97       	sbiw	r24, 0x01	; 1
    2b7c:	f1 f7       	brne	.-4      	; 0x2b7a <LCD_init+0x104>
    2b7e:	98 8b       	std	Y+16, r25	; 0x10
    2b80:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(20);
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);  /*make LCD 8 bit mode and 2 line*/


#else
	GPIO_setupPinDirection(LCD_DATA_PORT_ID , LCD_DATA_PIN4 , OUTPUT);
    2b82:	82 e0       	ldi	r24, 0x02	; 2
    2b84:	64 e0       	ldi	r22, 0x04	; 4
    2b86:	41 e0       	ldi	r20, 0x01	; 1
    2b88:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID , LCD_DATA_PIN5 , OUTPUT);
    2b8c:	82 e0       	ldi	r24, 0x02	; 2
    2b8e:	65 e0       	ldi	r22, 0x05	; 5
    2b90:	41 e0       	ldi	r20, 0x01	; 1
    2b92:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID , LCD_DATA_PIN6 , OUTPUT);
    2b96:	82 e0       	ldi	r24, 0x02	; 2
    2b98:	66 e0       	ldi	r22, 0x06	; 6
    2b9a:	41 e0       	ldi	r20, 0x01	; 1
    2b9c:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID , LCD_DATA_PIN7 , OUTPUT);
    2ba0:	82 e0       	ldi	r24, 0x02	; 2
    2ba2:	67 e0       	ldi	r22, 0x07	; 7
    2ba4:	41 e0       	ldi	r20, 0x01	; 1
    2ba6:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <GPIO_setupPinDirection>
    2baa:	80 e0       	ldi	r24, 0x00	; 0
    2bac:	90 e0       	ldi	r25, 0x00	; 0
    2bae:	a0 ea       	ldi	r26, 0xA0	; 160
    2bb0:	b1 e4       	ldi	r27, 0x41	; 65
    2bb2:	8b 87       	std	Y+11, r24	; 0x0b
    2bb4:	9c 87       	std	Y+12, r25	; 0x0c
    2bb6:	ad 87       	std	Y+13, r26	; 0x0d
    2bb8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bba:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bbc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bbe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bc0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bc2:	20 e0       	ldi	r18, 0x00	; 0
    2bc4:	30 e0       	ldi	r19, 0x00	; 0
    2bc6:	4a ef       	ldi	r20, 0xFA	; 250
    2bc8:	54 e4       	ldi	r21, 0x44	; 68
    2bca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bce:	dc 01       	movw	r26, r24
    2bd0:	cb 01       	movw	r24, r22
    2bd2:	8f 83       	std	Y+7, r24	; 0x07
    2bd4:	98 87       	std	Y+8, r25	; 0x08
    2bd6:	a9 87       	std	Y+9, r26	; 0x09
    2bd8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2bda:	6f 81       	ldd	r22, Y+7	; 0x07
    2bdc:	78 85       	ldd	r23, Y+8	; 0x08
    2bde:	89 85       	ldd	r24, Y+9	; 0x09
    2be0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2be2:	20 e0       	ldi	r18, 0x00	; 0
    2be4:	30 e0       	ldi	r19, 0x00	; 0
    2be6:	40 e8       	ldi	r20, 0x80	; 128
    2be8:	5f e3       	ldi	r21, 0x3F	; 63
    2bea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bee:	88 23       	and	r24, r24
    2bf0:	2c f4       	brge	.+10     	; 0x2bfc <LCD_init+0x186>
		__ticks = 1;
    2bf2:	81 e0       	ldi	r24, 0x01	; 1
    2bf4:	90 e0       	ldi	r25, 0x00	; 0
    2bf6:	9e 83       	std	Y+6, r25	; 0x06
    2bf8:	8d 83       	std	Y+5, r24	; 0x05
    2bfa:	3f c0       	rjmp	.+126    	; 0x2c7a <LCD_init+0x204>
	else if (__tmp > 65535)
    2bfc:	6f 81       	ldd	r22, Y+7	; 0x07
    2bfe:	78 85       	ldd	r23, Y+8	; 0x08
    2c00:	89 85       	ldd	r24, Y+9	; 0x09
    2c02:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c04:	20 e0       	ldi	r18, 0x00	; 0
    2c06:	3f ef       	ldi	r19, 0xFF	; 255
    2c08:	4f e7       	ldi	r20, 0x7F	; 127
    2c0a:	57 e4       	ldi	r21, 0x47	; 71
    2c0c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c10:	18 16       	cp	r1, r24
    2c12:	4c f5       	brge	.+82     	; 0x2c66 <LCD_init+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c14:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c16:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c18:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c1c:	20 e0       	ldi	r18, 0x00	; 0
    2c1e:	30 e0       	ldi	r19, 0x00	; 0
    2c20:	40 e2       	ldi	r20, 0x20	; 32
    2c22:	51 e4       	ldi	r21, 0x41	; 65
    2c24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c28:	dc 01       	movw	r26, r24
    2c2a:	cb 01       	movw	r24, r22
    2c2c:	bc 01       	movw	r22, r24
    2c2e:	cd 01       	movw	r24, r26
    2c30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c34:	dc 01       	movw	r26, r24
    2c36:	cb 01       	movw	r24, r22
    2c38:	9e 83       	std	Y+6, r25	; 0x06
    2c3a:	8d 83       	std	Y+5, r24	; 0x05
    2c3c:	0f c0       	rjmp	.+30     	; 0x2c5c <LCD_init+0x1e6>
    2c3e:	88 ec       	ldi	r24, 0xC8	; 200
    2c40:	90 e0       	ldi	r25, 0x00	; 0
    2c42:	9c 83       	std	Y+4, r25	; 0x04
    2c44:	8b 83       	std	Y+3, r24	; 0x03
    2c46:	8b 81       	ldd	r24, Y+3	; 0x03
    2c48:	9c 81       	ldd	r25, Y+4	; 0x04
    2c4a:	01 97       	sbiw	r24, 0x01	; 1
    2c4c:	f1 f7       	brne	.-4      	; 0x2c4a <LCD_init+0x1d4>
    2c4e:	9c 83       	std	Y+4, r25	; 0x04
    2c50:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c52:	8d 81       	ldd	r24, Y+5	; 0x05
    2c54:	9e 81       	ldd	r25, Y+6	; 0x06
    2c56:	01 97       	sbiw	r24, 0x01	; 1
    2c58:	9e 83       	std	Y+6, r25	; 0x06
    2c5a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c5c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c5e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c60:	00 97       	sbiw	r24, 0x00	; 0
    2c62:	69 f7       	brne	.-38     	; 0x2c3e <LCD_init+0x1c8>
    2c64:	14 c0       	rjmp	.+40     	; 0x2c8e <LCD_init+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c66:	6f 81       	ldd	r22, Y+7	; 0x07
    2c68:	78 85       	ldd	r23, Y+8	; 0x08
    2c6a:	89 85       	ldd	r24, Y+9	; 0x09
    2c6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c72:	dc 01       	movw	r26, r24
    2c74:	cb 01       	movw	r24, r22
    2c76:	9e 83       	std	Y+6, r25	; 0x06
    2c78:	8d 83       	std	Y+5, r24	; 0x05
    2c7a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c7c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c7e:	9a 83       	std	Y+2, r25	; 0x02
    2c80:	89 83       	std	Y+1, r24	; 0x01
    2c82:	89 81       	ldd	r24, Y+1	; 0x01
    2c84:	9a 81       	ldd	r25, Y+2	; 0x02
    2c86:	01 97       	sbiw	r24, 0x01	; 1
    2c88:	f1 f7       	brne	.-4      	; 0x2c86 <LCD_init+0x210>
    2c8a:	9a 83       	std	Y+2, r25	; 0x02
    2c8c:	89 83       	std	Y+1, r24	; 0x01
	/*make last 4 pins in portc output*/
	_delay_ms(20);
	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    2c8e:	83 e3       	ldi	r24, 0x33	; 51
    2c90:	0e 94 c0 10 	call	0x2180	; 0x2180 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    2c94:	82 e3       	ldi	r24, 0x32	; 50
    2c96:	0e 94 c0 10 	call	0x2180	; 0x2180 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    2c9a:	88 e2       	ldi	r24, 0x28	; 40
    2c9c:	0e 94 c0 10 	call	0x2180	; 0x2180 <LCD_sendCommand>

#endif


	LCD_sendCommand(LCD_CURSOR_OFF);
    2ca0:	8c e0       	ldi	r24, 0x0C	; 12
    2ca2:	0e 94 c0 10 	call	0x2180	; 0x2180 <LCD_sendCommand>

	LCD_sendCommand(LCD_CLEAR_COMMAND);
    2ca6:	81 e0       	ldi	r24, 0x01	; 1
    2ca8:	0e 94 c0 10 	call	0x2180	; 0x2180 <LCD_sendCommand>

}
    2cac:	6c 96       	adiw	r28, 0x1c	; 28
    2cae:	0f b6       	in	r0, 0x3f	; 63
    2cb0:	f8 94       	cli
    2cb2:	de bf       	out	0x3e, r29	; 62
    2cb4:	0f be       	out	0x3f, r0	; 63
    2cb6:	cd bf       	out	0x3d, r28	; 61
    2cb8:	cf 91       	pop	r28
    2cba:	df 91       	pop	r29
    2cbc:	08 95       	ret

00002cbe <LCD_writeChar>:

void LCD_writeChar(uint8 ch)
{
    2cbe:	0f 93       	push	r16
    2cc0:	1f 93       	push	r17
    2cc2:	df 93       	push	r29
    2cc4:	cf 93       	push	r28
    2cc6:	cd b7       	in	r28, 0x3d	; 61
    2cc8:	de b7       	in	r29, 0x3e	; 62
    2cca:	c3 56       	subi	r28, 0x63	; 99
    2ccc:	d0 40       	sbci	r29, 0x00	; 0
    2cce:	0f b6       	in	r0, 0x3f	; 63
    2cd0:	f8 94       	cli
    2cd2:	de bf       	out	0x3e, r29	; 62
    2cd4:	0f be       	out	0x3f, r0	; 63
    2cd6:	cd bf       	out	0x3d, r28	; 61
    2cd8:	fe 01       	movw	r30, r28
    2cda:	ed 59       	subi	r30, 0x9D	; 157
    2cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cde:	80 83       	st	Z, r24
	  GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);     /*write 1 in RS pin */
    2ce0:	83 e0       	ldi	r24, 0x03	; 3
    2ce2:	62 e0       	ldi	r22, 0x02	; 2
    2ce4:	41 e0       	ldi	r20, 0x01	; 1
    2ce6:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <GPIO_writePin>
    2cea:	fe 01       	movw	r30, r28
    2cec:	e1 5a       	subi	r30, 0xA1	; 161
    2cee:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf0:	80 e0       	ldi	r24, 0x00	; 0
    2cf2:	90 e0       	ldi	r25, 0x00	; 0
    2cf4:	a0 e8       	ldi	r26, 0x80	; 128
    2cf6:	bf e3       	ldi	r27, 0x3F	; 63
    2cf8:	80 83       	st	Z, r24
    2cfa:	91 83       	std	Z+1, r25	; 0x01
    2cfc:	a2 83       	std	Z+2, r26	; 0x02
    2cfe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d00:	8e 01       	movw	r16, r28
    2d02:	05 5a       	subi	r16, 0xA5	; 165
    2d04:	1f 4f       	sbci	r17, 0xFF	; 255
    2d06:	fe 01       	movw	r30, r28
    2d08:	e1 5a       	subi	r30, 0xA1	; 161
    2d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0c:	60 81       	ld	r22, Z
    2d0e:	71 81       	ldd	r23, Z+1	; 0x01
    2d10:	82 81       	ldd	r24, Z+2	; 0x02
    2d12:	93 81       	ldd	r25, Z+3	; 0x03
    2d14:	20 e0       	ldi	r18, 0x00	; 0
    2d16:	30 e0       	ldi	r19, 0x00	; 0
    2d18:	4a ef       	ldi	r20, 0xFA	; 250
    2d1a:	54 e4       	ldi	r21, 0x44	; 68
    2d1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d20:	dc 01       	movw	r26, r24
    2d22:	cb 01       	movw	r24, r22
    2d24:	f8 01       	movw	r30, r16
    2d26:	80 83       	st	Z, r24
    2d28:	91 83       	std	Z+1, r25	; 0x01
    2d2a:	a2 83       	std	Z+2, r26	; 0x02
    2d2c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d2e:	fe 01       	movw	r30, r28
    2d30:	e5 5a       	subi	r30, 0xA5	; 165
    2d32:	ff 4f       	sbci	r31, 0xFF	; 255
    2d34:	60 81       	ld	r22, Z
    2d36:	71 81       	ldd	r23, Z+1	; 0x01
    2d38:	82 81       	ldd	r24, Z+2	; 0x02
    2d3a:	93 81       	ldd	r25, Z+3	; 0x03
    2d3c:	20 e0       	ldi	r18, 0x00	; 0
    2d3e:	30 e0       	ldi	r19, 0x00	; 0
    2d40:	40 e8       	ldi	r20, 0x80	; 128
    2d42:	5f e3       	ldi	r21, 0x3F	; 63
    2d44:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d48:	88 23       	and	r24, r24
    2d4a:	44 f4       	brge	.+16     	; 0x2d5c <LCD_writeChar+0x9e>
		__ticks = 1;
    2d4c:	fe 01       	movw	r30, r28
    2d4e:	e7 5a       	subi	r30, 0xA7	; 167
    2d50:	ff 4f       	sbci	r31, 0xFF	; 255
    2d52:	81 e0       	ldi	r24, 0x01	; 1
    2d54:	90 e0       	ldi	r25, 0x00	; 0
    2d56:	91 83       	std	Z+1, r25	; 0x01
    2d58:	80 83       	st	Z, r24
    2d5a:	64 c0       	rjmp	.+200    	; 0x2e24 <LCD_writeChar+0x166>
	else if (__tmp > 65535)
    2d5c:	fe 01       	movw	r30, r28
    2d5e:	e5 5a       	subi	r30, 0xA5	; 165
    2d60:	ff 4f       	sbci	r31, 0xFF	; 255
    2d62:	60 81       	ld	r22, Z
    2d64:	71 81       	ldd	r23, Z+1	; 0x01
    2d66:	82 81       	ldd	r24, Z+2	; 0x02
    2d68:	93 81       	ldd	r25, Z+3	; 0x03
    2d6a:	20 e0       	ldi	r18, 0x00	; 0
    2d6c:	3f ef       	ldi	r19, 0xFF	; 255
    2d6e:	4f e7       	ldi	r20, 0x7F	; 127
    2d70:	57 e4       	ldi	r21, 0x47	; 71
    2d72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d76:	18 16       	cp	r1, r24
    2d78:	0c f0       	brlt	.+2      	; 0x2d7c <LCD_writeChar+0xbe>
    2d7a:	43 c0       	rjmp	.+134    	; 0x2e02 <LCD_writeChar+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d7c:	fe 01       	movw	r30, r28
    2d7e:	e1 5a       	subi	r30, 0xA1	; 161
    2d80:	ff 4f       	sbci	r31, 0xFF	; 255
    2d82:	60 81       	ld	r22, Z
    2d84:	71 81       	ldd	r23, Z+1	; 0x01
    2d86:	82 81       	ldd	r24, Z+2	; 0x02
    2d88:	93 81       	ldd	r25, Z+3	; 0x03
    2d8a:	20 e0       	ldi	r18, 0x00	; 0
    2d8c:	30 e0       	ldi	r19, 0x00	; 0
    2d8e:	40 e2       	ldi	r20, 0x20	; 32
    2d90:	51 e4       	ldi	r21, 0x41	; 65
    2d92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d96:	dc 01       	movw	r26, r24
    2d98:	cb 01       	movw	r24, r22
    2d9a:	8e 01       	movw	r16, r28
    2d9c:	07 5a       	subi	r16, 0xA7	; 167
    2d9e:	1f 4f       	sbci	r17, 0xFF	; 255
    2da0:	bc 01       	movw	r22, r24
    2da2:	cd 01       	movw	r24, r26
    2da4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2da8:	dc 01       	movw	r26, r24
    2daa:	cb 01       	movw	r24, r22
    2dac:	f8 01       	movw	r30, r16
    2dae:	91 83       	std	Z+1, r25	; 0x01
    2db0:	80 83       	st	Z, r24
    2db2:	1f c0       	rjmp	.+62     	; 0x2df2 <LCD_writeChar+0x134>
    2db4:	fe 01       	movw	r30, r28
    2db6:	e9 5a       	subi	r30, 0xA9	; 169
    2db8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dba:	88 ec       	ldi	r24, 0xC8	; 200
    2dbc:	90 e0       	ldi	r25, 0x00	; 0
    2dbe:	91 83       	std	Z+1, r25	; 0x01
    2dc0:	80 83       	st	Z, r24
    2dc2:	fe 01       	movw	r30, r28
    2dc4:	e9 5a       	subi	r30, 0xA9	; 169
    2dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc8:	80 81       	ld	r24, Z
    2dca:	91 81       	ldd	r25, Z+1	; 0x01
    2dcc:	01 97       	sbiw	r24, 0x01	; 1
    2dce:	f1 f7       	brne	.-4      	; 0x2dcc <LCD_writeChar+0x10e>
    2dd0:	fe 01       	movw	r30, r28
    2dd2:	e9 5a       	subi	r30, 0xA9	; 169
    2dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd6:	91 83       	std	Z+1, r25	; 0x01
    2dd8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dda:	de 01       	movw	r26, r28
    2ddc:	a7 5a       	subi	r26, 0xA7	; 167
    2dde:	bf 4f       	sbci	r27, 0xFF	; 255
    2de0:	fe 01       	movw	r30, r28
    2de2:	e7 5a       	subi	r30, 0xA7	; 167
    2de4:	ff 4f       	sbci	r31, 0xFF	; 255
    2de6:	80 81       	ld	r24, Z
    2de8:	91 81       	ldd	r25, Z+1	; 0x01
    2dea:	01 97       	sbiw	r24, 0x01	; 1
    2dec:	11 96       	adiw	r26, 0x01	; 1
    2dee:	9c 93       	st	X, r25
    2df0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2df2:	fe 01       	movw	r30, r28
    2df4:	e7 5a       	subi	r30, 0xA7	; 167
    2df6:	ff 4f       	sbci	r31, 0xFF	; 255
    2df8:	80 81       	ld	r24, Z
    2dfa:	91 81       	ldd	r25, Z+1	; 0x01
    2dfc:	00 97       	sbiw	r24, 0x00	; 0
    2dfe:	d1 f6       	brne	.-76     	; 0x2db4 <LCD_writeChar+0xf6>
    2e00:	27 c0       	rjmp	.+78     	; 0x2e50 <LCD_writeChar+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e02:	8e 01       	movw	r16, r28
    2e04:	07 5a       	subi	r16, 0xA7	; 167
    2e06:	1f 4f       	sbci	r17, 0xFF	; 255
    2e08:	fe 01       	movw	r30, r28
    2e0a:	e5 5a       	subi	r30, 0xA5	; 165
    2e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0e:	60 81       	ld	r22, Z
    2e10:	71 81       	ldd	r23, Z+1	; 0x01
    2e12:	82 81       	ldd	r24, Z+2	; 0x02
    2e14:	93 81       	ldd	r25, Z+3	; 0x03
    2e16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e1a:	dc 01       	movw	r26, r24
    2e1c:	cb 01       	movw	r24, r22
    2e1e:	f8 01       	movw	r30, r16
    2e20:	91 83       	std	Z+1, r25	; 0x01
    2e22:	80 83       	st	Z, r24
    2e24:	de 01       	movw	r26, r28
    2e26:	ab 5a       	subi	r26, 0xAB	; 171
    2e28:	bf 4f       	sbci	r27, 0xFF	; 255
    2e2a:	fe 01       	movw	r30, r28
    2e2c:	e7 5a       	subi	r30, 0xA7	; 167
    2e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e30:	80 81       	ld	r24, Z
    2e32:	91 81       	ldd	r25, Z+1	; 0x01
    2e34:	8d 93       	st	X+, r24
    2e36:	9c 93       	st	X, r25
    2e38:	fe 01       	movw	r30, r28
    2e3a:	eb 5a       	subi	r30, 0xAB	; 171
    2e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3e:	80 81       	ld	r24, Z
    2e40:	91 81       	ldd	r25, Z+1	; 0x01
    2e42:	01 97       	sbiw	r24, 0x01	; 1
    2e44:	f1 f7       	brne	.-4      	; 0x2e42 <LCD_writeChar+0x184>
    2e46:	fe 01       	movw	r30, r28
    2e48:	eb 5a       	subi	r30, 0xAB	; 171
    2e4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e4c:	91 83       	std	Z+1, r25	; 0x01
    2e4e:	80 83       	st	Z, r24
			_delay_ms(1);

			GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, LOGIC_HIGH);   /*write 1 in enable pin */
    2e50:	83 e0       	ldi	r24, 0x03	; 3
    2e52:	63 e0       	ldi	r22, 0x03	; 3
    2e54:	41 e0       	ldi	r20, 0x01	; 1
    2e56:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <GPIO_writePin>
    2e5a:	fe 01       	movw	r30, r28
    2e5c:	ef 5a       	subi	r30, 0xAF	; 175
    2e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e60:	80 e0       	ldi	r24, 0x00	; 0
    2e62:	90 e0       	ldi	r25, 0x00	; 0
    2e64:	a0 e8       	ldi	r26, 0x80	; 128
    2e66:	bf e3       	ldi	r27, 0x3F	; 63
    2e68:	80 83       	st	Z, r24
    2e6a:	91 83       	std	Z+1, r25	; 0x01
    2e6c:	a2 83       	std	Z+2, r26	; 0x02
    2e6e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e70:	8e 01       	movw	r16, r28
    2e72:	03 5b       	subi	r16, 0xB3	; 179
    2e74:	1f 4f       	sbci	r17, 0xFF	; 255
    2e76:	fe 01       	movw	r30, r28
    2e78:	ef 5a       	subi	r30, 0xAF	; 175
    2e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7c:	60 81       	ld	r22, Z
    2e7e:	71 81       	ldd	r23, Z+1	; 0x01
    2e80:	82 81       	ldd	r24, Z+2	; 0x02
    2e82:	93 81       	ldd	r25, Z+3	; 0x03
    2e84:	20 e0       	ldi	r18, 0x00	; 0
    2e86:	30 e0       	ldi	r19, 0x00	; 0
    2e88:	4a ef       	ldi	r20, 0xFA	; 250
    2e8a:	54 e4       	ldi	r21, 0x44	; 68
    2e8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e90:	dc 01       	movw	r26, r24
    2e92:	cb 01       	movw	r24, r22
    2e94:	f8 01       	movw	r30, r16
    2e96:	80 83       	st	Z, r24
    2e98:	91 83       	std	Z+1, r25	; 0x01
    2e9a:	a2 83       	std	Z+2, r26	; 0x02
    2e9c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e9e:	fe 01       	movw	r30, r28
    2ea0:	e3 5b       	subi	r30, 0xB3	; 179
    2ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea4:	60 81       	ld	r22, Z
    2ea6:	71 81       	ldd	r23, Z+1	; 0x01
    2ea8:	82 81       	ldd	r24, Z+2	; 0x02
    2eaa:	93 81       	ldd	r25, Z+3	; 0x03
    2eac:	20 e0       	ldi	r18, 0x00	; 0
    2eae:	30 e0       	ldi	r19, 0x00	; 0
    2eb0:	40 e8       	ldi	r20, 0x80	; 128
    2eb2:	5f e3       	ldi	r21, 0x3F	; 63
    2eb4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2eb8:	88 23       	and	r24, r24
    2eba:	44 f4       	brge	.+16     	; 0x2ecc <LCD_writeChar+0x20e>
		__ticks = 1;
    2ebc:	fe 01       	movw	r30, r28
    2ebe:	e5 5b       	subi	r30, 0xB5	; 181
    2ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec2:	81 e0       	ldi	r24, 0x01	; 1
    2ec4:	90 e0       	ldi	r25, 0x00	; 0
    2ec6:	91 83       	std	Z+1, r25	; 0x01
    2ec8:	80 83       	st	Z, r24
    2eca:	64 c0       	rjmp	.+200    	; 0x2f94 <LCD_writeChar+0x2d6>
	else if (__tmp > 65535)
    2ecc:	fe 01       	movw	r30, r28
    2ece:	e3 5b       	subi	r30, 0xB3	; 179
    2ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed2:	60 81       	ld	r22, Z
    2ed4:	71 81       	ldd	r23, Z+1	; 0x01
    2ed6:	82 81       	ldd	r24, Z+2	; 0x02
    2ed8:	93 81       	ldd	r25, Z+3	; 0x03
    2eda:	20 e0       	ldi	r18, 0x00	; 0
    2edc:	3f ef       	ldi	r19, 0xFF	; 255
    2ede:	4f e7       	ldi	r20, 0x7F	; 127
    2ee0:	57 e4       	ldi	r21, 0x47	; 71
    2ee2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ee6:	18 16       	cp	r1, r24
    2ee8:	0c f0       	brlt	.+2      	; 0x2eec <LCD_writeChar+0x22e>
    2eea:	43 c0       	rjmp	.+134    	; 0x2f72 <LCD_writeChar+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eec:	fe 01       	movw	r30, r28
    2eee:	ef 5a       	subi	r30, 0xAF	; 175
    2ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef2:	60 81       	ld	r22, Z
    2ef4:	71 81       	ldd	r23, Z+1	; 0x01
    2ef6:	82 81       	ldd	r24, Z+2	; 0x02
    2ef8:	93 81       	ldd	r25, Z+3	; 0x03
    2efa:	20 e0       	ldi	r18, 0x00	; 0
    2efc:	30 e0       	ldi	r19, 0x00	; 0
    2efe:	40 e2       	ldi	r20, 0x20	; 32
    2f00:	51 e4       	ldi	r21, 0x41	; 65
    2f02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f06:	dc 01       	movw	r26, r24
    2f08:	cb 01       	movw	r24, r22
    2f0a:	8e 01       	movw	r16, r28
    2f0c:	05 5b       	subi	r16, 0xB5	; 181
    2f0e:	1f 4f       	sbci	r17, 0xFF	; 255
    2f10:	bc 01       	movw	r22, r24
    2f12:	cd 01       	movw	r24, r26
    2f14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f18:	dc 01       	movw	r26, r24
    2f1a:	cb 01       	movw	r24, r22
    2f1c:	f8 01       	movw	r30, r16
    2f1e:	91 83       	std	Z+1, r25	; 0x01
    2f20:	80 83       	st	Z, r24
    2f22:	1f c0       	rjmp	.+62     	; 0x2f62 <LCD_writeChar+0x2a4>
    2f24:	fe 01       	movw	r30, r28
    2f26:	e7 5b       	subi	r30, 0xB7	; 183
    2f28:	ff 4f       	sbci	r31, 0xFF	; 255
    2f2a:	88 ec       	ldi	r24, 0xC8	; 200
    2f2c:	90 e0       	ldi	r25, 0x00	; 0
    2f2e:	91 83       	std	Z+1, r25	; 0x01
    2f30:	80 83       	st	Z, r24
    2f32:	fe 01       	movw	r30, r28
    2f34:	e7 5b       	subi	r30, 0xB7	; 183
    2f36:	ff 4f       	sbci	r31, 0xFF	; 255
    2f38:	80 81       	ld	r24, Z
    2f3a:	91 81       	ldd	r25, Z+1	; 0x01
    2f3c:	01 97       	sbiw	r24, 0x01	; 1
    2f3e:	f1 f7       	brne	.-4      	; 0x2f3c <LCD_writeChar+0x27e>
    2f40:	fe 01       	movw	r30, r28
    2f42:	e7 5b       	subi	r30, 0xB7	; 183
    2f44:	ff 4f       	sbci	r31, 0xFF	; 255
    2f46:	91 83       	std	Z+1, r25	; 0x01
    2f48:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f4a:	de 01       	movw	r26, r28
    2f4c:	a5 5b       	subi	r26, 0xB5	; 181
    2f4e:	bf 4f       	sbci	r27, 0xFF	; 255
    2f50:	fe 01       	movw	r30, r28
    2f52:	e5 5b       	subi	r30, 0xB5	; 181
    2f54:	ff 4f       	sbci	r31, 0xFF	; 255
    2f56:	80 81       	ld	r24, Z
    2f58:	91 81       	ldd	r25, Z+1	; 0x01
    2f5a:	01 97       	sbiw	r24, 0x01	; 1
    2f5c:	11 96       	adiw	r26, 0x01	; 1
    2f5e:	9c 93       	st	X, r25
    2f60:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f62:	fe 01       	movw	r30, r28
    2f64:	e5 5b       	subi	r30, 0xB5	; 181
    2f66:	ff 4f       	sbci	r31, 0xFF	; 255
    2f68:	80 81       	ld	r24, Z
    2f6a:	91 81       	ldd	r25, Z+1	; 0x01
    2f6c:	00 97       	sbiw	r24, 0x00	; 0
    2f6e:	d1 f6       	brne	.-76     	; 0x2f24 <LCD_writeChar+0x266>
    2f70:	27 c0       	rjmp	.+78     	; 0x2fc0 <LCD_writeChar+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f72:	8e 01       	movw	r16, r28
    2f74:	05 5b       	subi	r16, 0xB5	; 181
    2f76:	1f 4f       	sbci	r17, 0xFF	; 255
    2f78:	fe 01       	movw	r30, r28
    2f7a:	e3 5b       	subi	r30, 0xB3	; 179
    2f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f7e:	60 81       	ld	r22, Z
    2f80:	71 81       	ldd	r23, Z+1	; 0x01
    2f82:	82 81       	ldd	r24, Z+2	; 0x02
    2f84:	93 81       	ldd	r25, Z+3	; 0x03
    2f86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f8a:	dc 01       	movw	r26, r24
    2f8c:	cb 01       	movw	r24, r22
    2f8e:	f8 01       	movw	r30, r16
    2f90:	91 83       	std	Z+1, r25	; 0x01
    2f92:	80 83       	st	Z, r24
    2f94:	de 01       	movw	r26, r28
    2f96:	a9 5b       	subi	r26, 0xB9	; 185
    2f98:	bf 4f       	sbci	r27, 0xFF	; 255
    2f9a:	fe 01       	movw	r30, r28
    2f9c:	e5 5b       	subi	r30, 0xB5	; 181
    2f9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa0:	80 81       	ld	r24, Z
    2fa2:	91 81       	ldd	r25, Z+1	; 0x01
    2fa4:	8d 93       	st	X+, r24
    2fa6:	9c 93       	st	X, r25
    2fa8:	fe 01       	movw	r30, r28
    2faa:	e9 5b       	subi	r30, 0xB9	; 185
    2fac:	ff 4f       	sbci	r31, 0xFF	; 255
    2fae:	80 81       	ld	r24, Z
    2fb0:	91 81       	ldd	r25, Z+1	; 0x01
    2fb2:	01 97       	sbiw	r24, 0x01	; 1
    2fb4:	f1 f7       	brne	.-4      	; 0x2fb2 <LCD_writeChar+0x2f4>
    2fb6:	fe 01       	movw	r30, r28
    2fb8:	e9 5b       	subi	r30, 0xB9	; 185
    2fba:	ff 4f       	sbci	r31, 0xFF	; 255
    2fbc:	91 83       	std	Z+1, r25	; 0x01
    2fbe:	80 83       	st	Z, r24

			_delay_ms(1);

		#else

			GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN4 , GET_BIT(ch,4) );
    2fc0:	fe 01       	movw	r30, r28
    2fc2:	ed 59       	subi	r30, 0x9D	; 157
    2fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc6:	80 81       	ld	r24, Z
    2fc8:	88 2f       	mov	r24, r24
    2fca:	90 e0       	ldi	r25, 0x00	; 0
    2fcc:	80 71       	andi	r24, 0x10	; 16
    2fce:	90 70       	andi	r25, 0x00	; 0
    2fd0:	95 95       	asr	r25
    2fd2:	87 95       	ror	r24
    2fd4:	95 95       	asr	r25
    2fd6:	87 95       	ror	r24
    2fd8:	95 95       	asr	r25
    2fda:	87 95       	ror	r24
    2fdc:	95 95       	asr	r25
    2fde:	87 95       	ror	r24
    2fe0:	98 2f       	mov	r25, r24
    2fe2:	82 e0       	ldi	r24, 0x02	; 2
    2fe4:	64 e0       	ldi	r22, 0x04	; 4
    2fe6:	49 2f       	mov	r20, r25
    2fe8:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <GPIO_writePin>
			GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN5 , GET_BIT(ch,5) );
    2fec:	fe 01       	movw	r30, r28
    2fee:	ed 59       	subi	r30, 0x9D	; 157
    2ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff2:	80 81       	ld	r24, Z
    2ff4:	88 2f       	mov	r24, r24
    2ff6:	90 e0       	ldi	r25, 0x00	; 0
    2ff8:	80 72       	andi	r24, 0x20	; 32
    2ffa:	90 70       	andi	r25, 0x00	; 0
    2ffc:	95 95       	asr	r25
    2ffe:	87 95       	ror	r24
    3000:	95 95       	asr	r25
    3002:	87 95       	ror	r24
    3004:	95 95       	asr	r25
    3006:	87 95       	ror	r24
    3008:	95 95       	asr	r25
    300a:	87 95       	ror	r24
    300c:	95 95       	asr	r25
    300e:	87 95       	ror	r24
    3010:	98 2f       	mov	r25, r24
    3012:	82 e0       	ldi	r24, 0x02	; 2
    3014:	65 e0       	ldi	r22, 0x05	; 5
    3016:	49 2f       	mov	r20, r25
    3018:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <GPIO_writePin>
			GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN6 , GET_BIT(ch,6) );
    301c:	fe 01       	movw	r30, r28
    301e:	ed 59       	subi	r30, 0x9D	; 157
    3020:	ff 4f       	sbci	r31, 0xFF	; 255
    3022:	80 81       	ld	r24, Z
    3024:	88 2f       	mov	r24, r24
    3026:	90 e0       	ldi	r25, 0x00	; 0
    3028:	80 74       	andi	r24, 0x40	; 64
    302a:	90 70       	andi	r25, 0x00	; 0
    302c:	08 2e       	mov	r0, r24
    302e:	89 2f       	mov	r24, r25
    3030:	00 0c       	add	r0, r0
    3032:	88 1f       	adc	r24, r24
    3034:	99 0b       	sbc	r25, r25
    3036:	00 0c       	add	r0, r0
    3038:	88 1f       	adc	r24, r24
    303a:	99 1f       	adc	r25, r25
    303c:	98 2f       	mov	r25, r24
    303e:	82 e0       	ldi	r24, 0x02	; 2
    3040:	66 e0       	ldi	r22, 0x06	; 6
    3042:	49 2f       	mov	r20, r25
    3044:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <GPIO_writePin>
			GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN7 , GET_BIT(ch,7) );
    3048:	fe 01       	movw	r30, r28
    304a:	ed 59       	subi	r30, 0x9D	; 157
    304c:	ff 4f       	sbci	r31, 0xFF	; 255
    304e:	80 81       	ld	r24, Z
    3050:	98 2f       	mov	r25, r24
    3052:	99 1f       	adc	r25, r25
    3054:	99 27       	eor	r25, r25
    3056:	99 1f       	adc	r25, r25
    3058:	82 e0       	ldi	r24, 0x02	; 2
    305a:	67 e0       	ldi	r22, 0x07	; 7
    305c:	49 2f       	mov	r20, r25
    305e:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <GPIO_writePin>
    3062:	fe 01       	movw	r30, r28
    3064:	ed 5b       	subi	r30, 0xBD	; 189
    3066:	ff 4f       	sbci	r31, 0xFF	; 255
    3068:	80 e0       	ldi	r24, 0x00	; 0
    306a:	90 e0       	ldi	r25, 0x00	; 0
    306c:	a0 e8       	ldi	r26, 0x80	; 128
    306e:	bf e3       	ldi	r27, 0x3F	; 63
    3070:	80 83       	st	Z, r24
    3072:	91 83       	std	Z+1, r25	; 0x01
    3074:	a2 83       	std	Z+2, r26	; 0x02
    3076:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3078:	8e 01       	movw	r16, r28
    307a:	01 5c       	subi	r16, 0xC1	; 193
    307c:	1f 4f       	sbci	r17, 0xFF	; 255
    307e:	fe 01       	movw	r30, r28
    3080:	ed 5b       	subi	r30, 0xBD	; 189
    3082:	ff 4f       	sbci	r31, 0xFF	; 255
    3084:	60 81       	ld	r22, Z
    3086:	71 81       	ldd	r23, Z+1	; 0x01
    3088:	82 81       	ldd	r24, Z+2	; 0x02
    308a:	93 81       	ldd	r25, Z+3	; 0x03
    308c:	20 e0       	ldi	r18, 0x00	; 0
    308e:	30 e0       	ldi	r19, 0x00	; 0
    3090:	4a ef       	ldi	r20, 0xFA	; 250
    3092:	54 e4       	ldi	r21, 0x44	; 68
    3094:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3098:	dc 01       	movw	r26, r24
    309a:	cb 01       	movw	r24, r22
    309c:	f8 01       	movw	r30, r16
    309e:	80 83       	st	Z, r24
    30a0:	91 83       	std	Z+1, r25	; 0x01
    30a2:	a2 83       	std	Z+2, r26	; 0x02
    30a4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    30a6:	fe 01       	movw	r30, r28
    30a8:	ff 96       	adiw	r30, 0x3f	; 63
    30aa:	60 81       	ld	r22, Z
    30ac:	71 81       	ldd	r23, Z+1	; 0x01
    30ae:	82 81       	ldd	r24, Z+2	; 0x02
    30b0:	93 81       	ldd	r25, Z+3	; 0x03
    30b2:	20 e0       	ldi	r18, 0x00	; 0
    30b4:	30 e0       	ldi	r19, 0x00	; 0
    30b6:	40 e8       	ldi	r20, 0x80	; 128
    30b8:	5f e3       	ldi	r21, 0x3F	; 63
    30ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30be:	88 23       	and	r24, r24
    30c0:	2c f4       	brge	.+10     	; 0x30cc <LCD_writeChar+0x40e>
		__ticks = 1;
    30c2:	81 e0       	ldi	r24, 0x01	; 1
    30c4:	90 e0       	ldi	r25, 0x00	; 0
    30c6:	9e af       	std	Y+62, r25	; 0x3e
    30c8:	8d af       	std	Y+61, r24	; 0x3d
    30ca:	46 c0       	rjmp	.+140    	; 0x3158 <LCD_writeChar+0x49a>
	else if (__tmp > 65535)
    30cc:	fe 01       	movw	r30, r28
    30ce:	ff 96       	adiw	r30, 0x3f	; 63
    30d0:	60 81       	ld	r22, Z
    30d2:	71 81       	ldd	r23, Z+1	; 0x01
    30d4:	82 81       	ldd	r24, Z+2	; 0x02
    30d6:	93 81       	ldd	r25, Z+3	; 0x03
    30d8:	20 e0       	ldi	r18, 0x00	; 0
    30da:	3f ef       	ldi	r19, 0xFF	; 255
    30dc:	4f e7       	ldi	r20, 0x7F	; 127
    30de:	57 e4       	ldi	r21, 0x47	; 71
    30e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30e4:	18 16       	cp	r1, r24
    30e6:	64 f5       	brge	.+88     	; 0x3140 <LCD_writeChar+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30e8:	fe 01       	movw	r30, r28
    30ea:	ed 5b       	subi	r30, 0xBD	; 189
    30ec:	ff 4f       	sbci	r31, 0xFF	; 255
    30ee:	60 81       	ld	r22, Z
    30f0:	71 81       	ldd	r23, Z+1	; 0x01
    30f2:	82 81       	ldd	r24, Z+2	; 0x02
    30f4:	93 81       	ldd	r25, Z+3	; 0x03
    30f6:	20 e0       	ldi	r18, 0x00	; 0
    30f8:	30 e0       	ldi	r19, 0x00	; 0
    30fa:	40 e2       	ldi	r20, 0x20	; 32
    30fc:	51 e4       	ldi	r21, 0x41	; 65
    30fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3102:	dc 01       	movw	r26, r24
    3104:	cb 01       	movw	r24, r22
    3106:	bc 01       	movw	r22, r24
    3108:	cd 01       	movw	r24, r26
    310a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    310e:	dc 01       	movw	r26, r24
    3110:	cb 01       	movw	r24, r22
    3112:	9e af       	std	Y+62, r25	; 0x3e
    3114:	8d af       	std	Y+61, r24	; 0x3d
    3116:	0f c0       	rjmp	.+30     	; 0x3136 <LCD_writeChar+0x478>
    3118:	88 ec       	ldi	r24, 0xC8	; 200
    311a:	90 e0       	ldi	r25, 0x00	; 0
    311c:	9c af       	std	Y+60, r25	; 0x3c
    311e:	8b af       	std	Y+59, r24	; 0x3b
    3120:	8b ad       	ldd	r24, Y+59	; 0x3b
    3122:	9c ad       	ldd	r25, Y+60	; 0x3c
    3124:	01 97       	sbiw	r24, 0x01	; 1
    3126:	f1 f7       	brne	.-4      	; 0x3124 <LCD_writeChar+0x466>
    3128:	9c af       	std	Y+60, r25	; 0x3c
    312a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    312c:	8d ad       	ldd	r24, Y+61	; 0x3d
    312e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3130:	01 97       	sbiw	r24, 0x01	; 1
    3132:	9e af       	std	Y+62, r25	; 0x3e
    3134:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3136:	8d ad       	ldd	r24, Y+61	; 0x3d
    3138:	9e ad       	ldd	r25, Y+62	; 0x3e
    313a:	00 97       	sbiw	r24, 0x00	; 0
    313c:	69 f7       	brne	.-38     	; 0x3118 <LCD_writeChar+0x45a>
    313e:	16 c0       	rjmp	.+44     	; 0x316c <LCD_writeChar+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3140:	fe 01       	movw	r30, r28
    3142:	ff 96       	adiw	r30, 0x3f	; 63
    3144:	60 81       	ld	r22, Z
    3146:	71 81       	ldd	r23, Z+1	; 0x01
    3148:	82 81       	ldd	r24, Z+2	; 0x02
    314a:	93 81       	ldd	r25, Z+3	; 0x03
    314c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3150:	dc 01       	movw	r26, r24
    3152:	cb 01       	movw	r24, r22
    3154:	9e af       	std	Y+62, r25	; 0x3e
    3156:	8d af       	std	Y+61, r24	; 0x3d
    3158:	8d ad       	ldd	r24, Y+61	; 0x3d
    315a:	9e ad       	ldd	r25, Y+62	; 0x3e
    315c:	9a af       	std	Y+58, r25	; 0x3a
    315e:	89 af       	std	Y+57, r24	; 0x39
    3160:	89 ad       	ldd	r24, Y+57	; 0x39
    3162:	9a ad       	ldd	r25, Y+58	; 0x3a
    3164:	01 97       	sbiw	r24, 0x01	; 1
    3166:	f1 f7       	brne	.-4      	; 0x3164 <LCD_writeChar+0x4a6>
    3168:	9a af       	std	Y+58, r25	; 0x3a
    316a:	89 af       	std	Y+57, r24	; 0x39

			_delay_ms(1);
			GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, LOGIC_LOW); /*write 0 in enable pin to make falling edge*/
    316c:	83 e0       	ldi	r24, 0x03	; 3
    316e:	63 e0       	ldi	r22, 0x03	; 3
    3170:	40 e0       	ldi	r20, 0x00	; 0
    3172:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <GPIO_writePin>
    3176:	80 e0       	ldi	r24, 0x00	; 0
    3178:	90 e0       	ldi	r25, 0x00	; 0
    317a:	a0 e8       	ldi	r26, 0x80	; 128
    317c:	bf e3       	ldi	r27, 0x3F	; 63
    317e:	8d ab       	std	Y+53, r24	; 0x35
    3180:	9e ab       	std	Y+54, r25	; 0x36
    3182:	af ab       	std	Y+55, r26	; 0x37
    3184:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3186:	6d a9       	ldd	r22, Y+53	; 0x35
    3188:	7e a9       	ldd	r23, Y+54	; 0x36
    318a:	8f a9       	ldd	r24, Y+55	; 0x37
    318c:	98 ad       	ldd	r25, Y+56	; 0x38
    318e:	20 e0       	ldi	r18, 0x00	; 0
    3190:	30 e0       	ldi	r19, 0x00	; 0
    3192:	4a ef       	ldi	r20, 0xFA	; 250
    3194:	54 e4       	ldi	r21, 0x44	; 68
    3196:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    319a:	dc 01       	movw	r26, r24
    319c:	cb 01       	movw	r24, r22
    319e:	89 ab       	std	Y+49, r24	; 0x31
    31a0:	9a ab       	std	Y+50, r25	; 0x32
    31a2:	ab ab       	std	Y+51, r26	; 0x33
    31a4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    31a6:	69 a9       	ldd	r22, Y+49	; 0x31
    31a8:	7a a9       	ldd	r23, Y+50	; 0x32
    31aa:	8b a9       	ldd	r24, Y+51	; 0x33
    31ac:	9c a9       	ldd	r25, Y+52	; 0x34
    31ae:	20 e0       	ldi	r18, 0x00	; 0
    31b0:	30 e0       	ldi	r19, 0x00	; 0
    31b2:	40 e8       	ldi	r20, 0x80	; 128
    31b4:	5f e3       	ldi	r21, 0x3F	; 63
    31b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31ba:	88 23       	and	r24, r24
    31bc:	2c f4       	brge	.+10     	; 0x31c8 <LCD_writeChar+0x50a>
		__ticks = 1;
    31be:	81 e0       	ldi	r24, 0x01	; 1
    31c0:	90 e0       	ldi	r25, 0x00	; 0
    31c2:	98 ab       	std	Y+48, r25	; 0x30
    31c4:	8f a7       	std	Y+47, r24	; 0x2f
    31c6:	3f c0       	rjmp	.+126    	; 0x3246 <LCD_writeChar+0x588>
	else if (__tmp > 65535)
    31c8:	69 a9       	ldd	r22, Y+49	; 0x31
    31ca:	7a a9       	ldd	r23, Y+50	; 0x32
    31cc:	8b a9       	ldd	r24, Y+51	; 0x33
    31ce:	9c a9       	ldd	r25, Y+52	; 0x34
    31d0:	20 e0       	ldi	r18, 0x00	; 0
    31d2:	3f ef       	ldi	r19, 0xFF	; 255
    31d4:	4f e7       	ldi	r20, 0x7F	; 127
    31d6:	57 e4       	ldi	r21, 0x47	; 71
    31d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31dc:	18 16       	cp	r1, r24
    31de:	4c f5       	brge	.+82     	; 0x3232 <LCD_writeChar+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31e0:	6d a9       	ldd	r22, Y+53	; 0x35
    31e2:	7e a9       	ldd	r23, Y+54	; 0x36
    31e4:	8f a9       	ldd	r24, Y+55	; 0x37
    31e6:	98 ad       	ldd	r25, Y+56	; 0x38
    31e8:	20 e0       	ldi	r18, 0x00	; 0
    31ea:	30 e0       	ldi	r19, 0x00	; 0
    31ec:	40 e2       	ldi	r20, 0x20	; 32
    31ee:	51 e4       	ldi	r21, 0x41	; 65
    31f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31f4:	dc 01       	movw	r26, r24
    31f6:	cb 01       	movw	r24, r22
    31f8:	bc 01       	movw	r22, r24
    31fa:	cd 01       	movw	r24, r26
    31fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3200:	dc 01       	movw	r26, r24
    3202:	cb 01       	movw	r24, r22
    3204:	98 ab       	std	Y+48, r25	; 0x30
    3206:	8f a7       	std	Y+47, r24	; 0x2f
    3208:	0f c0       	rjmp	.+30     	; 0x3228 <LCD_writeChar+0x56a>
    320a:	88 ec       	ldi	r24, 0xC8	; 200
    320c:	90 e0       	ldi	r25, 0x00	; 0
    320e:	9e a7       	std	Y+46, r25	; 0x2e
    3210:	8d a7       	std	Y+45, r24	; 0x2d
    3212:	8d a5       	ldd	r24, Y+45	; 0x2d
    3214:	9e a5       	ldd	r25, Y+46	; 0x2e
    3216:	01 97       	sbiw	r24, 0x01	; 1
    3218:	f1 f7       	brne	.-4      	; 0x3216 <LCD_writeChar+0x558>
    321a:	9e a7       	std	Y+46, r25	; 0x2e
    321c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    321e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3220:	98 a9       	ldd	r25, Y+48	; 0x30
    3222:	01 97       	sbiw	r24, 0x01	; 1
    3224:	98 ab       	std	Y+48, r25	; 0x30
    3226:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3228:	8f a5       	ldd	r24, Y+47	; 0x2f
    322a:	98 a9       	ldd	r25, Y+48	; 0x30
    322c:	00 97       	sbiw	r24, 0x00	; 0
    322e:	69 f7       	brne	.-38     	; 0x320a <LCD_writeChar+0x54c>
    3230:	14 c0       	rjmp	.+40     	; 0x325a <LCD_writeChar+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3232:	69 a9       	ldd	r22, Y+49	; 0x31
    3234:	7a a9       	ldd	r23, Y+50	; 0x32
    3236:	8b a9       	ldd	r24, Y+51	; 0x33
    3238:	9c a9       	ldd	r25, Y+52	; 0x34
    323a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    323e:	dc 01       	movw	r26, r24
    3240:	cb 01       	movw	r24, r22
    3242:	98 ab       	std	Y+48, r25	; 0x30
    3244:	8f a7       	std	Y+47, r24	; 0x2f
    3246:	8f a5       	ldd	r24, Y+47	; 0x2f
    3248:	98 a9       	ldd	r25, Y+48	; 0x30
    324a:	9c a7       	std	Y+44, r25	; 0x2c
    324c:	8b a7       	std	Y+43, r24	; 0x2b
    324e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3250:	9c a5       	ldd	r25, Y+44	; 0x2c
    3252:	01 97       	sbiw	r24, 0x01	; 1
    3254:	f1 f7       	brne	.-4      	; 0x3252 <LCD_writeChar+0x594>
    3256:	9c a7       	std	Y+44, r25	; 0x2c
    3258:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1);
			GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, LOGIC_HIGH); /*write 1 in enable pin */
    325a:	83 e0       	ldi	r24, 0x03	; 3
    325c:	63 e0       	ldi	r22, 0x03	; 3
    325e:	41 e0       	ldi	r20, 0x01	; 1
    3260:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <GPIO_writePin>
    3264:	80 e0       	ldi	r24, 0x00	; 0
    3266:	90 e0       	ldi	r25, 0x00	; 0
    3268:	a0 e8       	ldi	r26, 0x80	; 128
    326a:	bf e3       	ldi	r27, 0x3F	; 63
    326c:	8f a3       	std	Y+39, r24	; 0x27
    326e:	98 a7       	std	Y+40, r25	; 0x28
    3270:	a9 a7       	std	Y+41, r26	; 0x29
    3272:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3274:	6f a1       	ldd	r22, Y+39	; 0x27
    3276:	78 a5       	ldd	r23, Y+40	; 0x28
    3278:	89 a5       	ldd	r24, Y+41	; 0x29
    327a:	9a a5       	ldd	r25, Y+42	; 0x2a
    327c:	20 e0       	ldi	r18, 0x00	; 0
    327e:	30 e0       	ldi	r19, 0x00	; 0
    3280:	4a ef       	ldi	r20, 0xFA	; 250
    3282:	54 e4       	ldi	r21, 0x44	; 68
    3284:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3288:	dc 01       	movw	r26, r24
    328a:	cb 01       	movw	r24, r22
    328c:	8b a3       	std	Y+35, r24	; 0x23
    328e:	9c a3       	std	Y+36, r25	; 0x24
    3290:	ad a3       	std	Y+37, r26	; 0x25
    3292:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3294:	6b a1       	ldd	r22, Y+35	; 0x23
    3296:	7c a1       	ldd	r23, Y+36	; 0x24
    3298:	8d a1       	ldd	r24, Y+37	; 0x25
    329a:	9e a1       	ldd	r25, Y+38	; 0x26
    329c:	20 e0       	ldi	r18, 0x00	; 0
    329e:	30 e0       	ldi	r19, 0x00	; 0
    32a0:	40 e8       	ldi	r20, 0x80	; 128
    32a2:	5f e3       	ldi	r21, 0x3F	; 63
    32a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32a8:	88 23       	and	r24, r24
    32aa:	2c f4       	brge	.+10     	; 0x32b6 <LCD_writeChar+0x5f8>
		__ticks = 1;
    32ac:	81 e0       	ldi	r24, 0x01	; 1
    32ae:	90 e0       	ldi	r25, 0x00	; 0
    32b0:	9a a3       	std	Y+34, r25	; 0x22
    32b2:	89 a3       	std	Y+33, r24	; 0x21
    32b4:	3f c0       	rjmp	.+126    	; 0x3334 <LCD_writeChar+0x676>
	else if (__tmp > 65535)
    32b6:	6b a1       	ldd	r22, Y+35	; 0x23
    32b8:	7c a1       	ldd	r23, Y+36	; 0x24
    32ba:	8d a1       	ldd	r24, Y+37	; 0x25
    32bc:	9e a1       	ldd	r25, Y+38	; 0x26
    32be:	20 e0       	ldi	r18, 0x00	; 0
    32c0:	3f ef       	ldi	r19, 0xFF	; 255
    32c2:	4f e7       	ldi	r20, 0x7F	; 127
    32c4:	57 e4       	ldi	r21, 0x47	; 71
    32c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32ca:	18 16       	cp	r1, r24
    32cc:	4c f5       	brge	.+82     	; 0x3320 <LCD_writeChar+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32ce:	6f a1       	ldd	r22, Y+39	; 0x27
    32d0:	78 a5       	ldd	r23, Y+40	; 0x28
    32d2:	89 a5       	ldd	r24, Y+41	; 0x29
    32d4:	9a a5       	ldd	r25, Y+42	; 0x2a
    32d6:	20 e0       	ldi	r18, 0x00	; 0
    32d8:	30 e0       	ldi	r19, 0x00	; 0
    32da:	40 e2       	ldi	r20, 0x20	; 32
    32dc:	51 e4       	ldi	r21, 0x41	; 65
    32de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32e2:	dc 01       	movw	r26, r24
    32e4:	cb 01       	movw	r24, r22
    32e6:	bc 01       	movw	r22, r24
    32e8:	cd 01       	movw	r24, r26
    32ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ee:	dc 01       	movw	r26, r24
    32f0:	cb 01       	movw	r24, r22
    32f2:	9a a3       	std	Y+34, r25	; 0x22
    32f4:	89 a3       	std	Y+33, r24	; 0x21
    32f6:	0f c0       	rjmp	.+30     	; 0x3316 <LCD_writeChar+0x658>
    32f8:	88 ec       	ldi	r24, 0xC8	; 200
    32fa:	90 e0       	ldi	r25, 0x00	; 0
    32fc:	98 a3       	std	Y+32, r25	; 0x20
    32fe:	8f 8f       	std	Y+31, r24	; 0x1f
    3300:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3302:	98 a1       	ldd	r25, Y+32	; 0x20
    3304:	01 97       	sbiw	r24, 0x01	; 1
    3306:	f1 f7       	brne	.-4      	; 0x3304 <LCD_writeChar+0x646>
    3308:	98 a3       	std	Y+32, r25	; 0x20
    330a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    330c:	89 a1       	ldd	r24, Y+33	; 0x21
    330e:	9a a1       	ldd	r25, Y+34	; 0x22
    3310:	01 97       	sbiw	r24, 0x01	; 1
    3312:	9a a3       	std	Y+34, r25	; 0x22
    3314:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3316:	89 a1       	ldd	r24, Y+33	; 0x21
    3318:	9a a1       	ldd	r25, Y+34	; 0x22
    331a:	00 97       	sbiw	r24, 0x00	; 0
    331c:	69 f7       	brne	.-38     	; 0x32f8 <LCD_writeChar+0x63a>
    331e:	14 c0       	rjmp	.+40     	; 0x3348 <LCD_writeChar+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3320:	6b a1       	ldd	r22, Y+35	; 0x23
    3322:	7c a1       	ldd	r23, Y+36	; 0x24
    3324:	8d a1       	ldd	r24, Y+37	; 0x25
    3326:	9e a1       	ldd	r25, Y+38	; 0x26
    3328:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    332c:	dc 01       	movw	r26, r24
    332e:	cb 01       	movw	r24, r22
    3330:	9a a3       	std	Y+34, r25	; 0x22
    3332:	89 a3       	std	Y+33, r24	; 0x21
    3334:	89 a1       	ldd	r24, Y+33	; 0x21
    3336:	9a a1       	ldd	r25, Y+34	; 0x22
    3338:	9e 8f       	std	Y+30, r25	; 0x1e
    333a:	8d 8f       	std	Y+29, r24	; 0x1d
    333c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    333e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3340:	01 97       	sbiw	r24, 0x01	; 1
    3342:	f1 f7       	brne	.-4      	; 0x3340 <LCD_writeChar+0x682>
    3344:	9e 8f       	std	Y+30, r25	; 0x1e
    3346:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(1);

			GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN4 , GET_BIT(ch,0) );
    3348:	fe 01       	movw	r30, r28
    334a:	ed 59       	subi	r30, 0x9D	; 157
    334c:	ff 4f       	sbci	r31, 0xFF	; 255
    334e:	80 81       	ld	r24, Z
    3350:	98 2f       	mov	r25, r24
    3352:	91 70       	andi	r25, 0x01	; 1
    3354:	82 e0       	ldi	r24, 0x02	; 2
    3356:	64 e0       	ldi	r22, 0x04	; 4
    3358:	49 2f       	mov	r20, r25
    335a:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <GPIO_writePin>
			GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN5 , GET_BIT(ch,1) );
    335e:	fe 01       	movw	r30, r28
    3360:	ed 59       	subi	r30, 0x9D	; 157
    3362:	ff 4f       	sbci	r31, 0xFF	; 255
    3364:	80 81       	ld	r24, Z
    3366:	88 2f       	mov	r24, r24
    3368:	90 e0       	ldi	r25, 0x00	; 0
    336a:	82 70       	andi	r24, 0x02	; 2
    336c:	90 70       	andi	r25, 0x00	; 0
    336e:	95 95       	asr	r25
    3370:	87 95       	ror	r24
    3372:	98 2f       	mov	r25, r24
    3374:	82 e0       	ldi	r24, 0x02	; 2
    3376:	65 e0       	ldi	r22, 0x05	; 5
    3378:	49 2f       	mov	r20, r25
    337a:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <GPIO_writePin>
			GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN6 , GET_BIT(ch,2) );
    337e:	fe 01       	movw	r30, r28
    3380:	ed 59       	subi	r30, 0x9D	; 157
    3382:	ff 4f       	sbci	r31, 0xFF	; 255
    3384:	80 81       	ld	r24, Z
    3386:	88 2f       	mov	r24, r24
    3388:	90 e0       	ldi	r25, 0x00	; 0
    338a:	84 70       	andi	r24, 0x04	; 4
    338c:	90 70       	andi	r25, 0x00	; 0
    338e:	95 95       	asr	r25
    3390:	87 95       	ror	r24
    3392:	95 95       	asr	r25
    3394:	87 95       	ror	r24
    3396:	98 2f       	mov	r25, r24
    3398:	82 e0       	ldi	r24, 0x02	; 2
    339a:	66 e0       	ldi	r22, 0x06	; 6
    339c:	49 2f       	mov	r20, r25
    339e:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <GPIO_writePin>
			GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN7 , GET_BIT(ch,3) );
    33a2:	fe 01       	movw	r30, r28
    33a4:	ed 59       	subi	r30, 0x9D	; 157
    33a6:	ff 4f       	sbci	r31, 0xFF	; 255
    33a8:	80 81       	ld	r24, Z
    33aa:	88 2f       	mov	r24, r24
    33ac:	90 e0       	ldi	r25, 0x00	; 0
    33ae:	88 70       	andi	r24, 0x08	; 8
    33b0:	90 70       	andi	r25, 0x00	; 0
    33b2:	95 95       	asr	r25
    33b4:	87 95       	ror	r24
    33b6:	95 95       	asr	r25
    33b8:	87 95       	ror	r24
    33ba:	95 95       	asr	r25
    33bc:	87 95       	ror	r24
    33be:	98 2f       	mov	r25, r24
    33c0:	82 e0       	ldi	r24, 0x02	; 2
    33c2:	67 e0       	ldi	r22, 0x07	; 7
    33c4:	49 2f       	mov	r20, r25
    33c6:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <GPIO_writePin>
    33ca:	80 e0       	ldi	r24, 0x00	; 0
    33cc:	90 e0       	ldi	r25, 0x00	; 0
    33ce:	a0 e8       	ldi	r26, 0x80	; 128
    33d0:	bf e3       	ldi	r27, 0x3F	; 63
    33d2:	89 8f       	std	Y+25, r24	; 0x19
    33d4:	9a 8f       	std	Y+26, r25	; 0x1a
    33d6:	ab 8f       	std	Y+27, r26	; 0x1b
    33d8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33da:	69 8d       	ldd	r22, Y+25	; 0x19
    33dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    33de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33e2:	20 e0       	ldi	r18, 0x00	; 0
    33e4:	30 e0       	ldi	r19, 0x00	; 0
    33e6:	4a ef       	ldi	r20, 0xFA	; 250
    33e8:	54 e4       	ldi	r21, 0x44	; 68
    33ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33ee:	dc 01       	movw	r26, r24
    33f0:	cb 01       	movw	r24, r22
    33f2:	8d 8b       	std	Y+21, r24	; 0x15
    33f4:	9e 8b       	std	Y+22, r25	; 0x16
    33f6:	af 8b       	std	Y+23, r26	; 0x17
    33f8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    33fa:	6d 89       	ldd	r22, Y+21	; 0x15
    33fc:	7e 89       	ldd	r23, Y+22	; 0x16
    33fe:	8f 89       	ldd	r24, Y+23	; 0x17
    3400:	98 8d       	ldd	r25, Y+24	; 0x18
    3402:	20 e0       	ldi	r18, 0x00	; 0
    3404:	30 e0       	ldi	r19, 0x00	; 0
    3406:	40 e8       	ldi	r20, 0x80	; 128
    3408:	5f e3       	ldi	r21, 0x3F	; 63
    340a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    340e:	88 23       	and	r24, r24
    3410:	2c f4       	brge	.+10     	; 0x341c <LCD_writeChar+0x75e>
		__ticks = 1;
    3412:	81 e0       	ldi	r24, 0x01	; 1
    3414:	90 e0       	ldi	r25, 0x00	; 0
    3416:	9c 8b       	std	Y+20, r25	; 0x14
    3418:	8b 8b       	std	Y+19, r24	; 0x13
    341a:	3f c0       	rjmp	.+126    	; 0x349a <LCD_writeChar+0x7dc>
	else if (__tmp > 65535)
    341c:	6d 89       	ldd	r22, Y+21	; 0x15
    341e:	7e 89       	ldd	r23, Y+22	; 0x16
    3420:	8f 89       	ldd	r24, Y+23	; 0x17
    3422:	98 8d       	ldd	r25, Y+24	; 0x18
    3424:	20 e0       	ldi	r18, 0x00	; 0
    3426:	3f ef       	ldi	r19, 0xFF	; 255
    3428:	4f e7       	ldi	r20, 0x7F	; 127
    342a:	57 e4       	ldi	r21, 0x47	; 71
    342c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3430:	18 16       	cp	r1, r24
    3432:	4c f5       	brge	.+82     	; 0x3486 <LCD_writeChar+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3434:	69 8d       	ldd	r22, Y+25	; 0x19
    3436:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3438:	8b 8d       	ldd	r24, Y+27	; 0x1b
    343a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    343c:	20 e0       	ldi	r18, 0x00	; 0
    343e:	30 e0       	ldi	r19, 0x00	; 0
    3440:	40 e2       	ldi	r20, 0x20	; 32
    3442:	51 e4       	ldi	r21, 0x41	; 65
    3444:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3448:	dc 01       	movw	r26, r24
    344a:	cb 01       	movw	r24, r22
    344c:	bc 01       	movw	r22, r24
    344e:	cd 01       	movw	r24, r26
    3450:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3454:	dc 01       	movw	r26, r24
    3456:	cb 01       	movw	r24, r22
    3458:	9c 8b       	std	Y+20, r25	; 0x14
    345a:	8b 8b       	std	Y+19, r24	; 0x13
    345c:	0f c0       	rjmp	.+30     	; 0x347c <LCD_writeChar+0x7be>
    345e:	88 ec       	ldi	r24, 0xC8	; 200
    3460:	90 e0       	ldi	r25, 0x00	; 0
    3462:	9a 8b       	std	Y+18, r25	; 0x12
    3464:	89 8b       	std	Y+17, r24	; 0x11
    3466:	89 89       	ldd	r24, Y+17	; 0x11
    3468:	9a 89       	ldd	r25, Y+18	; 0x12
    346a:	01 97       	sbiw	r24, 0x01	; 1
    346c:	f1 f7       	brne	.-4      	; 0x346a <LCD_writeChar+0x7ac>
    346e:	9a 8b       	std	Y+18, r25	; 0x12
    3470:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3472:	8b 89       	ldd	r24, Y+19	; 0x13
    3474:	9c 89       	ldd	r25, Y+20	; 0x14
    3476:	01 97       	sbiw	r24, 0x01	; 1
    3478:	9c 8b       	std	Y+20, r25	; 0x14
    347a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    347c:	8b 89       	ldd	r24, Y+19	; 0x13
    347e:	9c 89       	ldd	r25, Y+20	; 0x14
    3480:	00 97       	sbiw	r24, 0x00	; 0
    3482:	69 f7       	brne	.-38     	; 0x345e <LCD_writeChar+0x7a0>
    3484:	14 c0       	rjmp	.+40     	; 0x34ae <LCD_writeChar+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3486:	6d 89       	ldd	r22, Y+21	; 0x15
    3488:	7e 89       	ldd	r23, Y+22	; 0x16
    348a:	8f 89       	ldd	r24, Y+23	; 0x17
    348c:	98 8d       	ldd	r25, Y+24	; 0x18
    348e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3492:	dc 01       	movw	r26, r24
    3494:	cb 01       	movw	r24, r22
    3496:	9c 8b       	std	Y+20, r25	; 0x14
    3498:	8b 8b       	std	Y+19, r24	; 0x13
    349a:	8b 89       	ldd	r24, Y+19	; 0x13
    349c:	9c 89       	ldd	r25, Y+20	; 0x14
    349e:	98 8b       	std	Y+16, r25	; 0x10
    34a0:	8f 87       	std	Y+15, r24	; 0x0f
    34a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    34a4:	98 89       	ldd	r25, Y+16	; 0x10
    34a6:	01 97       	sbiw	r24, 0x01	; 1
    34a8:	f1 f7       	brne	.-4      	; 0x34a6 <LCD_writeChar+0x7e8>
    34aa:	98 8b       	std	Y+16, r25	; 0x10
    34ac:	8f 87       	std	Y+15, r24	; 0x0f



		#endif

			GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, LOGIC_LOW);
    34ae:	83 e0       	ldi	r24, 0x03	; 3
    34b0:	63 e0       	ldi	r22, 0x03	; 3
    34b2:	40 e0       	ldi	r20, 0x00	; 0
    34b4:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <GPIO_writePin>
    34b8:	80 e0       	ldi	r24, 0x00	; 0
    34ba:	90 e0       	ldi	r25, 0x00	; 0
    34bc:	a0 e8       	ldi	r26, 0x80	; 128
    34be:	bf e3       	ldi	r27, 0x3F	; 63
    34c0:	8b 87       	std	Y+11, r24	; 0x0b
    34c2:	9c 87       	std	Y+12, r25	; 0x0c
    34c4:	ad 87       	std	Y+13, r26	; 0x0d
    34c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    34ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    34cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    34ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    34d0:	20 e0       	ldi	r18, 0x00	; 0
    34d2:	30 e0       	ldi	r19, 0x00	; 0
    34d4:	4a ef       	ldi	r20, 0xFA	; 250
    34d6:	54 e4       	ldi	r21, 0x44	; 68
    34d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34dc:	dc 01       	movw	r26, r24
    34de:	cb 01       	movw	r24, r22
    34e0:	8f 83       	std	Y+7, r24	; 0x07
    34e2:	98 87       	std	Y+8, r25	; 0x08
    34e4:	a9 87       	std	Y+9, r26	; 0x09
    34e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    34e8:	6f 81       	ldd	r22, Y+7	; 0x07
    34ea:	78 85       	ldd	r23, Y+8	; 0x08
    34ec:	89 85       	ldd	r24, Y+9	; 0x09
    34ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    34f0:	20 e0       	ldi	r18, 0x00	; 0
    34f2:	30 e0       	ldi	r19, 0x00	; 0
    34f4:	40 e8       	ldi	r20, 0x80	; 128
    34f6:	5f e3       	ldi	r21, 0x3F	; 63
    34f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34fc:	88 23       	and	r24, r24
    34fe:	2c f4       	brge	.+10     	; 0x350a <LCD_writeChar+0x84c>
		__ticks = 1;
    3500:	81 e0       	ldi	r24, 0x01	; 1
    3502:	90 e0       	ldi	r25, 0x00	; 0
    3504:	9e 83       	std	Y+6, r25	; 0x06
    3506:	8d 83       	std	Y+5, r24	; 0x05
    3508:	3f c0       	rjmp	.+126    	; 0x3588 <LCD_writeChar+0x8ca>
	else if (__tmp > 65535)
    350a:	6f 81       	ldd	r22, Y+7	; 0x07
    350c:	78 85       	ldd	r23, Y+8	; 0x08
    350e:	89 85       	ldd	r24, Y+9	; 0x09
    3510:	9a 85       	ldd	r25, Y+10	; 0x0a
    3512:	20 e0       	ldi	r18, 0x00	; 0
    3514:	3f ef       	ldi	r19, 0xFF	; 255
    3516:	4f e7       	ldi	r20, 0x7F	; 127
    3518:	57 e4       	ldi	r21, 0x47	; 71
    351a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    351e:	18 16       	cp	r1, r24
    3520:	4c f5       	brge	.+82     	; 0x3574 <LCD_writeChar+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3522:	6b 85       	ldd	r22, Y+11	; 0x0b
    3524:	7c 85       	ldd	r23, Y+12	; 0x0c
    3526:	8d 85       	ldd	r24, Y+13	; 0x0d
    3528:	9e 85       	ldd	r25, Y+14	; 0x0e
    352a:	20 e0       	ldi	r18, 0x00	; 0
    352c:	30 e0       	ldi	r19, 0x00	; 0
    352e:	40 e2       	ldi	r20, 0x20	; 32
    3530:	51 e4       	ldi	r21, 0x41	; 65
    3532:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3536:	dc 01       	movw	r26, r24
    3538:	cb 01       	movw	r24, r22
    353a:	bc 01       	movw	r22, r24
    353c:	cd 01       	movw	r24, r26
    353e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3542:	dc 01       	movw	r26, r24
    3544:	cb 01       	movw	r24, r22
    3546:	9e 83       	std	Y+6, r25	; 0x06
    3548:	8d 83       	std	Y+5, r24	; 0x05
    354a:	0f c0       	rjmp	.+30     	; 0x356a <LCD_writeChar+0x8ac>
    354c:	88 ec       	ldi	r24, 0xC8	; 200
    354e:	90 e0       	ldi	r25, 0x00	; 0
    3550:	9c 83       	std	Y+4, r25	; 0x04
    3552:	8b 83       	std	Y+3, r24	; 0x03
    3554:	8b 81       	ldd	r24, Y+3	; 0x03
    3556:	9c 81       	ldd	r25, Y+4	; 0x04
    3558:	01 97       	sbiw	r24, 0x01	; 1
    355a:	f1 f7       	brne	.-4      	; 0x3558 <LCD_writeChar+0x89a>
    355c:	9c 83       	std	Y+4, r25	; 0x04
    355e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3560:	8d 81       	ldd	r24, Y+5	; 0x05
    3562:	9e 81       	ldd	r25, Y+6	; 0x06
    3564:	01 97       	sbiw	r24, 0x01	; 1
    3566:	9e 83       	std	Y+6, r25	; 0x06
    3568:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    356a:	8d 81       	ldd	r24, Y+5	; 0x05
    356c:	9e 81       	ldd	r25, Y+6	; 0x06
    356e:	00 97       	sbiw	r24, 0x00	; 0
    3570:	69 f7       	brne	.-38     	; 0x354c <LCD_writeChar+0x88e>
    3572:	14 c0       	rjmp	.+40     	; 0x359c <LCD_writeChar+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3574:	6f 81       	ldd	r22, Y+7	; 0x07
    3576:	78 85       	ldd	r23, Y+8	; 0x08
    3578:	89 85       	ldd	r24, Y+9	; 0x09
    357a:	9a 85       	ldd	r25, Y+10	; 0x0a
    357c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3580:	dc 01       	movw	r26, r24
    3582:	cb 01       	movw	r24, r22
    3584:	9e 83       	std	Y+6, r25	; 0x06
    3586:	8d 83       	std	Y+5, r24	; 0x05
    3588:	8d 81       	ldd	r24, Y+5	; 0x05
    358a:	9e 81       	ldd	r25, Y+6	; 0x06
    358c:	9a 83       	std	Y+2, r25	; 0x02
    358e:	89 83       	std	Y+1, r24	; 0x01
    3590:	89 81       	ldd	r24, Y+1	; 0x01
    3592:	9a 81       	ldd	r25, Y+2	; 0x02
    3594:	01 97       	sbiw	r24, 0x01	; 1
    3596:	f1 f7       	brne	.-4      	; 0x3594 <LCD_writeChar+0x8d6>
    3598:	9a 83       	std	Y+2, r25	; 0x02
    359a:	89 83       	std	Y+1, r24	; 0x01
			/*write  0 in enable pin beacase LCD read the at falling edge of enable, so we make it 1 then 0*/

			_delay_ms(1);
}
    359c:	cd 59       	subi	r28, 0x9D	; 157
    359e:	df 4f       	sbci	r29, 0xFF	; 255
    35a0:	0f b6       	in	r0, 0x3f	; 63
    35a2:	f8 94       	cli
    35a4:	de bf       	out	0x3e, r29	; 62
    35a6:	0f be       	out	0x3f, r0	; 63
    35a8:	cd bf       	out	0x3d, r28	; 61
    35aa:	cf 91       	pop	r28
    35ac:	df 91       	pop	r29
    35ae:	1f 91       	pop	r17
    35b0:	0f 91       	pop	r16
    35b2:	08 95       	ret

000035b4 <LCD_writeString>:

void LCD_writeString(uint8 *str)
{
    35b4:	df 93       	push	r29
    35b6:	cf 93       	push	r28
    35b8:	00 d0       	rcall	.+0      	; 0x35ba <LCD_writeString+0x6>
    35ba:	00 d0       	rcall	.+0      	; 0x35bc <LCD_writeString+0x8>
    35bc:	cd b7       	in	r28, 0x3d	; 61
    35be:	de b7       	in	r29, 0x3e	; 62
    35c0:	9c 83       	std	Y+4, r25	; 0x04
    35c2:	8b 83       	std	Y+3, r24	; 0x03
	int i=0;
    35c4:	1a 82       	std	Y+2, r1	; 0x02
    35c6:	19 82       	std	Y+1, r1	; 0x01
    35c8:	0f c0       	rjmp	.+30     	; 0x35e8 <LCD_writeString+0x34>
	while(str[i]!='\0')
	{
		LCD_writeChar(str[i]);
    35ca:	29 81       	ldd	r18, Y+1	; 0x01
    35cc:	3a 81       	ldd	r19, Y+2	; 0x02
    35ce:	8b 81       	ldd	r24, Y+3	; 0x03
    35d0:	9c 81       	ldd	r25, Y+4	; 0x04
    35d2:	fc 01       	movw	r30, r24
    35d4:	e2 0f       	add	r30, r18
    35d6:	f3 1f       	adc	r31, r19
    35d8:	80 81       	ld	r24, Z
    35da:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <LCD_writeChar>
		i++;
    35de:	89 81       	ldd	r24, Y+1	; 0x01
    35e0:	9a 81       	ldd	r25, Y+2	; 0x02
    35e2:	01 96       	adiw	r24, 0x01	; 1
    35e4:	9a 83       	std	Y+2, r25	; 0x02
    35e6:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_writeString(uint8 *str)
{
	int i=0;
	while(str[i]!='\0')
    35e8:	29 81       	ldd	r18, Y+1	; 0x01
    35ea:	3a 81       	ldd	r19, Y+2	; 0x02
    35ec:	8b 81       	ldd	r24, Y+3	; 0x03
    35ee:	9c 81       	ldd	r25, Y+4	; 0x04
    35f0:	fc 01       	movw	r30, r24
    35f2:	e2 0f       	add	r30, r18
    35f4:	f3 1f       	adc	r31, r19
    35f6:	80 81       	ld	r24, Z
    35f8:	88 23       	and	r24, r24
    35fa:	39 f7       	brne	.-50     	; 0x35ca <LCD_writeString+0x16>
	{
		LCD_writeChar(str[i]);
		i++;
	}
}
    35fc:	0f 90       	pop	r0
    35fe:	0f 90       	pop	r0
    3600:	0f 90       	pop	r0
    3602:	0f 90       	pop	r0
    3604:	cf 91       	pop	r28
    3606:	df 91       	pop	r29
    3608:	08 95       	ret

0000360a <LCD_moveCursor>:

void LCD_moveCursor(uint8 row , uint8 col)
{
    360a:	df 93       	push	r29
    360c:	cf 93       	push	r28
    360e:	00 d0       	rcall	.+0      	; 0x3610 <LCD_moveCursor+0x6>
    3610:	00 d0       	rcall	.+0      	; 0x3612 <LCD_moveCursor+0x8>
    3612:	0f 92       	push	r0
    3614:	cd b7       	in	r28, 0x3d	; 61
    3616:	de b7       	in	r29, 0x3e	; 62
    3618:	8a 83       	std	Y+2, r24	; 0x02
    361a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address=0x00;
    361c:	19 82       	std	Y+1, r1	; 0x01
	switch(row)
    361e:	8a 81       	ldd	r24, Y+2	; 0x02
    3620:	28 2f       	mov	r18, r24
    3622:	30 e0       	ldi	r19, 0x00	; 0
    3624:	3d 83       	std	Y+5, r19	; 0x05
    3626:	2c 83       	std	Y+4, r18	; 0x04
    3628:	8c 81       	ldd	r24, Y+4	; 0x04
    362a:	9d 81       	ldd	r25, Y+5	; 0x05
    362c:	81 30       	cpi	r24, 0x01	; 1
    362e:	91 05       	cpc	r25, r1
    3630:	c1 f0       	breq	.+48     	; 0x3662 <LCD_moveCursor+0x58>
    3632:	2c 81       	ldd	r18, Y+4	; 0x04
    3634:	3d 81       	ldd	r19, Y+5	; 0x05
    3636:	22 30       	cpi	r18, 0x02	; 2
    3638:	31 05       	cpc	r19, r1
    363a:	2c f4       	brge	.+10     	; 0x3646 <LCD_moveCursor+0x3c>
    363c:	8c 81       	ldd	r24, Y+4	; 0x04
    363e:	9d 81       	ldd	r25, Y+5	; 0x05
    3640:	00 97       	sbiw	r24, 0x00	; 0
    3642:	61 f0       	breq	.+24     	; 0x365c <LCD_moveCursor+0x52>
    3644:	19 c0       	rjmp	.+50     	; 0x3678 <LCD_moveCursor+0x6e>
    3646:	2c 81       	ldd	r18, Y+4	; 0x04
    3648:	3d 81       	ldd	r19, Y+5	; 0x05
    364a:	22 30       	cpi	r18, 0x02	; 2
    364c:	31 05       	cpc	r19, r1
    364e:	69 f0       	breq	.+26     	; 0x366a <LCD_moveCursor+0x60>
    3650:	8c 81       	ldd	r24, Y+4	; 0x04
    3652:	9d 81       	ldd	r25, Y+5	; 0x05
    3654:	83 30       	cpi	r24, 0x03	; 3
    3656:	91 05       	cpc	r25, r1
    3658:	61 f0       	breq	.+24     	; 0x3672 <LCD_moveCursor+0x68>
    365a:	0e c0       	rjmp	.+28     	; 0x3678 <LCD_moveCursor+0x6e>
	{
	case 0:
		lcd_memory_address=col+0x00;
    365c:	8b 81       	ldd	r24, Y+3	; 0x03
    365e:	89 83       	std	Y+1, r24	; 0x01
    3660:	0b c0       	rjmp	.+22     	; 0x3678 <LCD_moveCursor+0x6e>
		break;
	case 1:
		lcd_memory_address=col+0x40;
    3662:	8b 81       	ldd	r24, Y+3	; 0x03
    3664:	80 5c       	subi	r24, 0xC0	; 192
    3666:	89 83       	std	Y+1, r24	; 0x01
    3668:	07 c0       	rjmp	.+14     	; 0x3678 <LCD_moveCursor+0x6e>
		break;
	case 2: /*for 4 line LCD*/
		lcd_memory_address=col+0x10;
    366a:	8b 81       	ldd	r24, Y+3	; 0x03
    366c:	80 5f       	subi	r24, 0xF0	; 240
    366e:	89 83       	std	Y+1, r24	; 0x01
    3670:	03 c0       	rjmp	.+6      	; 0x3678 <LCD_moveCursor+0x6e>
		break;
	case 3:
		lcd_memory_address=col+0x50;
    3672:	8b 81       	ldd	r24, Y+3	; 0x03
    3674:	80 5b       	subi	r24, 0xB0	; 176
    3676:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	LCD_sendCommand(lcd_memory_address | 0x80);
    3678:	89 81       	ldd	r24, Y+1	; 0x01
    367a:	80 68       	ori	r24, 0x80	; 128
    367c:	0e 94 c0 10 	call	0x2180	; 0x2180 <LCD_sendCommand>
}
    3680:	0f 90       	pop	r0
    3682:	0f 90       	pop	r0
    3684:	0f 90       	pop	r0
    3686:	0f 90       	pop	r0
    3688:	0f 90       	pop	r0
    368a:	cf 91       	pop	r28
    368c:	df 91       	pop	r29
    368e:	08 95       	ret

00003690 <LCD_integerToString>:


void LCD_integerToString(uint16 num)
{
    3690:	df 93       	push	r29
    3692:	cf 93       	push	r28
    3694:	cd b7       	in	r28, 0x3d	; 61
    3696:	de b7       	in	r29, 0x3e	; 62
    3698:	62 97       	sbiw	r28, 0x12	; 18
    369a:	0f b6       	in	r0, 0x3f	; 63
    369c:	f8 94       	cli
    369e:	de bf       	out	0x3e, r29	; 62
    36a0:	0f be       	out	0x3f, r0	; 63
    36a2:	cd bf       	out	0x3d, r28	; 61
    36a4:	9a 8b       	std	Y+18, r25	; 0x12
    36a6:	89 8b       	std	Y+17, r24	; 0x11
	char numInAsci[16];
	itoa(num,numInAsci,10);
    36a8:	89 89       	ldd	r24, Y+17	; 0x11
    36aa:	9a 89       	ldd	r25, Y+18	; 0x12
    36ac:	9e 01       	movw	r18, r28
    36ae:	2f 5f       	subi	r18, 0xFF	; 255
    36b0:	3f 4f       	sbci	r19, 0xFF	; 255
    36b2:	b9 01       	movw	r22, r18
    36b4:	4a e0       	ldi	r20, 0x0A	; 10
    36b6:	50 e0       	ldi	r21, 0x00	; 0
    36b8:	0e 94 6d 1c 	call	0x38da	; 0x38da <itoa>
	LCD_writeString(numInAsci);
    36bc:	ce 01       	movw	r24, r28
    36be:	01 96       	adiw	r24, 0x01	; 1
    36c0:	0e 94 da 1a 	call	0x35b4	; 0x35b4 <LCD_writeString>
}
    36c4:	62 96       	adiw	r28, 0x12	; 18
    36c6:	0f b6       	in	r0, 0x3f	; 63
    36c8:	f8 94       	cli
    36ca:	de bf       	out	0x3e, r29	; 62
    36cc:	0f be       	out	0x3f, r0	; 63
    36ce:	cd bf       	out	0x3d, r28	; 61
    36d0:	cf 91       	pop	r28
    36d2:	df 91       	pop	r29
    36d4:	08 95       	ret

000036d6 <LCD_clearScreen>:

void LCD_clearScreen()
{
    36d6:	df 93       	push	r29
    36d8:	cf 93       	push	r28
    36da:	cd b7       	in	r28, 0x3d	; 61
    36dc:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    36de:	81 e0       	ldi	r24, 0x01	; 1
    36e0:	0e 94 c0 10 	call	0x2180	; 0x2180 <LCD_sendCommand>
}
    36e4:	cf 91       	pop	r28
    36e6:	df 91       	pop	r29
    36e8:	08 95       	ret

000036ea <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    36ea:	0f 93       	push	r16
    36ec:	1f 93       	push	r17
    36ee:	df 93       	push	r29
    36f0:	cf 93       	push	r28
    36f2:	00 d0       	rcall	.+0      	; 0x36f4 <TWI_init+0xa>
    36f4:	cd b7       	in	r28, 0x3d	; 61
    36f6:	de b7       	in	r29, 0x3e	; 62
    36f8:	9a 83       	std	Y+2, r25	; 0x02
    36fa:	89 83       	std	Y+1, r24	; 0x01
    TWBR = (F_CPU/(2*Config_Ptr->bit_rate))-8;
    36fc:	00 e2       	ldi	r16, 0x20	; 32
    36fe:	10 e0       	ldi	r17, 0x00	; 0
    3700:	e9 81       	ldd	r30, Y+1	; 0x01
    3702:	fa 81       	ldd	r31, Y+2	; 0x02
    3704:	81 81       	ldd	r24, Z+1	; 0x01
    3706:	92 81       	ldd	r25, Z+2	; 0x02
    3708:	a3 81       	ldd	r26, Z+3	; 0x03
    370a:	b4 81       	ldd	r27, Z+4	; 0x04
    370c:	9c 01       	movw	r18, r24
    370e:	ad 01       	movw	r20, r26
    3710:	22 0f       	add	r18, r18
    3712:	33 1f       	adc	r19, r19
    3714:	44 1f       	adc	r20, r20
    3716:	55 1f       	adc	r21, r21
    3718:	80 e0       	ldi	r24, 0x00	; 0
    371a:	92 e1       	ldi	r25, 0x12	; 18
    371c:	aa e7       	ldi	r26, 0x7A	; 122
    371e:	b0 e0       	ldi	r27, 0x00	; 0
    3720:	bc 01       	movw	r22, r24
    3722:	cd 01       	movw	r24, r26
    3724:	0e 94 14 1c 	call	0x3828	; 0x3828 <__udivmodsi4>
    3728:	da 01       	movw	r26, r20
    372a:	c9 01       	movw	r24, r18
    372c:	88 50       	subi	r24, 0x08	; 8
    372e:	f8 01       	movw	r30, r16
    3730:	80 83       	st	Z, r24
	TWSR = 0x00; /*Zero pre_scaler*/
    3732:	e1 e2       	ldi	r30, 0x21	; 33
    3734:	f0 e0       	ldi	r31, 0x00	; 0
    3736:	10 82       	st	Z, r1
	

    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = Config_Ptr->address; // my address = 0x01 :)
    3738:	a2 e2       	ldi	r26, 0x22	; 34
    373a:	b0 e0       	ldi	r27, 0x00	; 0
    373c:	e9 81       	ldd	r30, Y+1	; 0x01
    373e:	fa 81       	ldd	r31, Y+2	; 0x02
    3740:	80 81       	ld	r24, Z
    3742:	8c 93       	st	X, r24
    TWCR = (1<<TWEN); /* enable TWI */
    3744:	e6 e5       	ldi	r30, 0x56	; 86
    3746:	f0 e0       	ldi	r31, 0x00	; 0
    3748:	84 e0       	ldi	r24, 0x04	; 4
    374a:	80 83       	st	Z, r24
}
    374c:	0f 90       	pop	r0
    374e:	0f 90       	pop	r0
    3750:	cf 91       	pop	r28
    3752:	df 91       	pop	r29
    3754:	1f 91       	pop	r17
    3756:	0f 91       	pop	r16
    3758:	08 95       	ret

0000375a <TWI_start>:

void TWI_start(void)
{
    375a:	df 93       	push	r29
    375c:	cf 93       	push	r28
    375e:	cd b7       	in	r28, 0x3d	; 61
    3760:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    3762:	e6 e5       	ldi	r30, 0x56	; 86
    3764:	f0 e0       	ldi	r31, 0x00	; 0
    3766:	84 ea       	ldi	r24, 0xA4	; 164
    3768:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    376a:	e6 e5       	ldi	r30, 0x56	; 86
    376c:	f0 e0       	ldi	r31, 0x00	; 0
    376e:	80 81       	ld	r24, Z
    3770:	88 23       	and	r24, r24
    3772:	dc f7       	brge	.-10     	; 0x376a <TWI_start+0x10>
}
    3774:	cf 91       	pop	r28
    3776:	df 91       	pop	r29
    3778:	08 95       	ret

0000377a <TWI_stop>:

void TWI_stop(void)
{
    377a:	df 93       	push	r29
    377c:	cf 93       	push	r28
    377e:	cd b7       	in	r28, 0x3d	; 61
    3780:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    3782:	e6 e5       	ldi	r30, 0x56	; 86
    3784:	f0 e0       	ldi	r31, 0x00	; 0
    3786:	84 e9       	ldi	r24, 0x94	; 148
    3788:	80 83       	st	Z, r24
}
    378a:	cf 91       	pop	r28
    378c:	df 91       	pop	r29
    378e:	08 95       	ret

00003790 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    3790:	df 93       	push	r29
    3792:	cf 93       	push	r28
    3794:	0f 92       	push	r0
    3796:	cd b7       	in	r28, 0x3d	; 61
    3798:	de b7       	in	r29, 0x3e	; 62
    379a:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    379c:	e3 e2       	ldi	r30, 0x23	; 35
    379e:	f0 e0       	ldi	r31, 0x00	; 0
    37a0:	89 81       	ldd	r24, Y+1	; 0x01
    37a2:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    37a4:	e6 e5       	ldi	r30, 0x56	; 86
    37a6:	f0 e0       	ldi	r31, 0x00	; 0
    37a8:	84 e8       	ldi	r24, 0x84	; 132
    37aa:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    37ac:	e6 e5       	ldi	r30, 0x56	; 86
    37ae:	f0 e0       	ldi	r31, 0x00	; 0
    37b0:	80 81       	ld	r24, Z
    37b2:	88 23       	and	r24, r24
    37b4:	dc f7       	brge	.-10     	; 0x37ac <TWI_writeByte+0x1c>
}
    37b6:	0f 90       	pop	r0
    37b8:	cf 91       	pop	r28
    37ba:	df 91       	pop	r29
    37bc:	08 95       	ret

000037be <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    37be:	df 93       	push	r29
    37c0:	cf 93       	push	r28
    37c2:	cd b7       	in	r28, 0x3d	; 61
    37c4:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    37c6:	e6 e5       	ldi	r30, 0x56	; 86
    37c8:	f0 e0       	ldi	r31, 0x00	; 0
    37ca:	84 ec       	ldi	r24, 0xC4	; 196
    37cc:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    37ce:	e6 e5       	ldi	r30, 0x56	; 86
    37d0:	f0 e0       	ldi	r31, 0x00	; 0
    37d2:	80 81       	ld	r24, Z
    37d4:	88 23       	and	r24, r24
    37d6:	dc f7       	brge	.-10     	; 0x37ce <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    37d8:	e3 e2       	ldi	r30, 0x23	; 35
    37da:	f0 e0       	ldi	r31, 0x00	; 0
    37dc:	80 81       	ld	r24, Z
}
    37de:	cf 91       	pop	r28
    37e0:	df 91       	pop	r29
    37e2:	08 95       	ret

000037e4 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    37e4:	df 93       	push	r29
    37e6:	cf 93       	push	r28
    37e8:	cd b7       	in	r28, 0x3d	; 61
    37ea:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    37ec:	e6 e5       	ldi	r30, 0x56	; 86
    37ee:	f0 e0       	ldi	r31, 0x00	; 0
    37f0:	84 e8       	ldi	r24, 0x84	; 132
    37f2:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    37f4:	e6 e5       	ldi	r30, 0x56	; 86
    37f6:	f0 e0       	ldi	r31, 0x00	; 0
    37f8:	80 81       	ld	r24, Z
    37fa:	88 23       	and	r24, r24
    37fc:	dc f7       	brge	.-10     	; 0x37f4 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    37fe:	e3 e2       	ldi	r30, 0x23	; 35
    3800:	f0 e0       	ldi	r31, 0x00	; 0
    3802:	80 81       	ld	r24, Z
}
    3804:	cf 91       	pop	r28
    3806:	df 91       	pop	r29
    3808:	08 95       	ret

0000380a <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    380a:	df 93       	push	r29
    380c:	cf 93       	push	r28
    380e:	0f 92       	push	r0
    3810:	cd b7       	in	r28, 0x3d	; 61
    3812:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    3814:	e1 e2       	ldi	r30, 0x21	; 33
    3816:	f0 e0       	ldi	r31, 0x00	; 0
    3818:	80 81       	ld	r24, Z
    381a:	88 7f       	andi	r24, 0xF8	; 248
    381c:	89 83       	std	Y+1, r24	; 0x01
    return status;
    381e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3820:	0f 90       	pop	r0
    3822:	cf 91       	pop	r28
    3824:	df 91       	pop	r29
    3826:	08 95       	ret

00003828 <__udivmodsi4>:
    3828:	a1 e2       	ldi	r26, 0x21	; 33
    382a:	1a 2e       	mov	r1, r26
    382c:	aa 1b       	sub	r26, r26
    382e:	bb 1b       	sub	r27, r27
    3830:	fd 01       	movw	r30, r26
    3832:	0d c0       	rjmp	.+26     	; 0x384e <__udivmodsi4_ep>

00003834 <__udivmodsi4_loop>:
    3834:	aa 1f       	adc	r26, r26
    3836:	bb 1f       	adc	r27, r27
    3838:	ee 1f       	adc	r30, r30
    383a:	ff 1f       	adc	r31, r31
    383c:	a2 17       	cp	r26, r18
    383e:	b3 07       	cpc	r27, r19
    3840:	e4 07       	cpc	r30, r20
    3842:	f5 07       	cpc	r31, r21
    3844:	20 f0       	brcs	.+8      	; 0x384e <__udivmodsi4_ep>
    3846:	a2 1b       	sub	r26, r18
    3848:	b3 0b       	sbc	r27, r19
    384a:	e4 0b       	sbc	r30, r20
    384c:	f5 0b       	sbc	r31, r21

0000384e <__udivmodsi4_ep>:
    384e:	66 1f       	adc	r22, r22
    3850:	77 1f       	adc	r23, r23
    3852:	88 1f       	adc	r24, r24
    3854:	99 1f       	adc	r25, r25
    3856:	1a 94       	dec	r1
    3858:	69 f7       	brne	.-38     	; 0x3834 <__udivmodsi4_loop>
    385a:	60 95       	com	r22
    385c:	70 95       	com	r23
    385e:	80 95       	com	r24
    3860:	90 95       	com	r25
    3862:	9b 01       	movw	r18, r22
    3864:	ac 01       	movw	r20, r24
    3866:	bd 01       	movw	r22, r26
    3868:	cf 01       	movw	r24, r30
    386a:	08 95       	ret

0000386c <__prologue_saves__>:
    386c:	2f 92       	push	r2
    386e:	3f 92       	push	r3
    3870:	4f 92       	push	r4
    3872:	5f 92       	push	r5
    3874:	6f 92       	push	r6
    3876:	7f 92       	push	r7
    3878:	8f 92       	push	r8
    387a:	9f 92       	push	r9
    387c:	af 92       	push	r10
    387e:	bf 92       	push	r11
    3880:	cf 92       	push	r12
    3882:	df 92       	push	r13
    3884:	ef 92       	push	r14
    3886:	ff 92       	push	r15
    3888:	0f 93       	push	r16
    388a:	1f 93       	push	r17
    388c:	cf 93       	push	r28
    388e:	df 93       	push	r29
    3890:	cd b7       	in	r28, 0x3d	; 61
    3892:	de b7       	in	r29, 0x3e	; 62
    3894:	ca 1b       	sub	r28, r26
    3896:	db 0b       	sbc	r29, r27
    3898:	0f b6       	in	r0, 0x3f	; 63
    389a:	f8 94       	cli
    389c:	de bf       	out	0x3e, r29	; 62
    389e:	0f be       	out	0x3f, r0	; 63
    38a0:	cd bf       	out	0x3d, r28	; 61
    38a2:	09 94       	ijmp

000038a4 <__epilogue_restores__>:
    38a4:	2a 88       	ldd	r2, Y+18	; 0x12
    38a6:	39 88       	ldd	r3, Y+17	; 0x11
    38a8:	48 88       	ldd	r4, Y+16	; 0x10
    38aa:	5f 84       	ldd	r5, Y+15	; 0x0f
    38ac:	6e 84       	ldd	r6, Y+14	; 0x0e
    38ae:	7d 84       	ldd	r7, Y+13	; 0x0d
    38b0:	8c 84       	ldd	r8, Y+12	; 0x0c
    38b2:	9b 84       	ldd	r9, Y+11	; 0x0b
    38b4:	aa 84       	ldd	r10, Y+10	; 0x0a
    38b6:	b9 84       	ldd	r11, Y+9	; 0x09
    38b8:	c8 84       	ldd	r12, Y+8	; 0x08
    38ba:	df 80       	ldd	r13, Y+7	; 0x07
    38bc:	ee 80       	ldd	r14, Y+6	; 0x06
    38be:	fd 80       	ldd	r15, Y+5	; 0x05
    38c0:	0c 81       	ldd	r16, Y+4	; 0x04
    38c2:	1b 81       	ldd	r17, Y+3	; 0x03
    38c4:	aa 81       	ldd	r26, Y+2	; 0x02
    38c6:	b9 81       	ldd	r27, Y+1	; 0x01
    38c8:	ce 0f       	add	r28, r30
    38ca:	d1 1d       	adc	r29, r1
    38cc:	0f b6       	in	r0, 0x3f	; 63
    38ce:	f8 94       	cli
    38d0:	de bf       	out	0x3e, r29	; 62
    38d2:	0f be       	out	0x3f, r0	; 63
    38d4:	cd bf       	out	0x3d, r28	; 61
    38d6:	ed 01       	movw	r28, r26
    38d8:	08 95       	ret

000038da <itoa>:
    38da:	fb 01       	movw	r30, r22
    38dc:	9f 01       	movw	r18, r30
    38de:	e8 94       	clt
    38e0:	42 30       	cpi	r20, 0x02	; 2
    38e2:	c4 f0       	brlt	.+48     	; 0x3914 <itoa+0x3a>
    38e4:	45 32       	cpi	r20, 0x25	; 37
    38e6:	b4 f4       	brge	.+44     	; 0x3914 <itoa+0x3a>
    38e8:	4a 30       	cpi	r20, 0x0A	; 10
    38ea:	29 f4       	brne	.+10     	; 0x38f6 <itoa+0x1c>
    38ec:	97 fb       	bst	r25, 7
    38ee:	1e f4       	brtc	.+6      	; 0x38f6 <itoa+0x1c>
    38f0:	90 95       	com	r25
    38f2:	81 95       	neg	r24
    38f4:	9f 4f       	sbci	r25, 0xFF	; 255
    38f6:	64 2f       	mov	r22, r20
    38f8:	77 27       	eor	r23, r23
    38fa:	0e 94 9e 1c 	call	0x393c	; 0x393c <__udivmodhi4>
    38fe:	80 5d       	subi	r24, 0xD0	; 208
    3900:	8a 33       	cpi	r24, 0x3A	; 58
    3902:	0c f0       	brlt	.+2      	; 0x3906 <itoa+0x2c>
    3904:	89 5d       	subi	r24, 0xD9	; 217
    3906:	81 93       	st	Z+, r24
    3908:	cb 01       	movw	r24, r22
    390a:	00 97       	sbiw	r24, 0x00	; 0
    390c:	a1 f7       	brne	.-24     	; 0x38f6 <itoa+0x1c>
    390e:	16 f4       	brtc	.+4      	; 0x3914 <itoa+0x3a>
    3910:	5d e2       	ldi	r21, 0x2D	; 45
    3912:	51 93       	st	Z+, r21
    3914:	10 82       	st	Z, r1
    3916:	c9 01       	movw	r24, r18
    3918:	0c 94 8e 1c 	jmp	0x391c	; 0x391c <strrev>

0000391c <strrev>:
    391c:	dc 01       	movw	r26, r24
    391e:	fc 01       	movw	r30, r24
    3920:	67 2f       	mov	r22, r23
    3922:	71 91       	ld	r23, Z+
    3924:	77 23       	and	r23, r23
    3926:	e1 f7       	brne	.-8      	; 0x3920 <strrev+0x4>
    3928:	32 97       	sbiw	r30, 0x02	; 2
    392a:	04 c0       	rjmp	.+8      	; 0x3934 <strrev+0x18>
    392c:	7c 91       	ld	r23, X
    392e:	6d 93       	st	X+, r22
    3930:	70 83       	st	Z, r23
    3932:	62 91       	ld	r22, -Z
    3934:	ae 17       	cp	r26, r30
    3936:	bf 07       	cpc	r27, r31
    3938:	c8 f3       	brcs	.-14     	; 0x392c <strrev+0x10>
    393a:	08 95       	ret

0000393c <__udivmodhi4>:
    393c:	aa 1b       	sub	r26, r26
    393e:	bb 1b       	sub	r27, r27
    3940:	51 e1       	ldi	r21, 0x11	; 17
    3942:	07 c0       	rjmp	.+14     	; 0x3952 <__udivmodhi4_ep>

00003944 <__udivmodhi4_loop>:
    3944:	aa 1f       	adc	r26, r26
    3946:	bb 1f       	adc	r27, r27
    3948:	a6 17       	cp	r26, r22
    394a:	b7 07       	cpc	r27, r23
    394c:	10 f0       	brcs	.+4      	; 0x3952 <__udivmodhi4_ep>
    394e:	a6 1b       	sub	r26, r22
    3950:	b7 0b       	sbc	r27, r23

00003952 <__udivmodhi4_ep>:
    3952:	88 1f       	adc	r24, r24
    3954:	99 1f       	adc	r25, r25
    3956:	5a 95       	dec	r21
    3958:	a9 f7       	brne	.-22     	; 0x3944 <__udivmodhi4_loop>
    395a:	80 95       	com	r24
    395c:	90 95       	com	r25
    395e:	bc 01       	movw	r22, r24
    3960:	cd 01       	movw	r24, r26
    3962:	08 95       	ret

00003964 <_exit>:
    3964:	f8 94       	cli

00003966 <__stop_program>:
    3966:	ff cf       	rjmp	.-2      	; 0x3966 <__stop_program>
