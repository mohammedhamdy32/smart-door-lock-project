
MC_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004f2e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000bc  00800060  00004f2e  00004fc2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  0080011c  0080011c  0000507e  2**0
                  ALLOC
  3 .stab         00004ee4  00000000  00000000  00005080  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000161f  00000000  00000000  00009f64  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000b583  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000b6c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000b833  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000d47c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000e367  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000f114  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000f274  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000f501  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000fccf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 cc 05 	jmp	0xb98	; 0xb98 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e2       	ldi	r30, 0x2E	; 46
      68:	ff e4       	ldi	r31, 0x4F	; 79
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 31       	cpi	r26, 0x1C	; 28
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e1       	ldi	r26, 0x1C	; 28
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 32       	cpi	r26, 0x26	; 38
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 8d 25 	call	0x4b1a	; 0x4b1a <main>
      8a:	0c 94 95 27 	jmp	0x4f2a	; 0x4f2a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 19 27 	jmp	0x4e32	; 0x4e32 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e0       	ldi	r26, 0x00	; 0
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 35 27 	jmp	0x4e6a	; 0x4e6a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 25 27 	jmp	0x4e4a	; 0x4e4a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 41 27 	jmp	0x4e82	; 0x4e82 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 25 27 	jmp	0x4e4a	; 0x4e4a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 41 27 	jmp	0x4e82	; 0x4e82 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 19 27 	jmp	0x4e32	; 0x4e32 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e0       	ldi	r24, 0x00	; 0
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 35 27 	jmp	0x4e6a	; 0x4e6a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 25 27 	jmp	0x4e4a	; 0x4e4a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 41 27 	jmp	0x4e82	; 0x4e82 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 25 27 	jmp	0x4e4a	; 0x4e4a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 41 27 	jmp	0x4e82	; 0x4e82 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 25 27 	jmp	0x4e4a	; 0x4e4a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 41 27 	jmp	0x4e82	; 0x4e82 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 29 27 	jmp	0x4e52	; 0x4e52 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 45 27 	jmp	0x4e8a	; 0x4e8a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Buzzer_init>:
 */

#include "Buzzer.h"

void Buzzer_init()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID,OUTPUT);
     b4e:	83 e0       	ldi	r24, 0x03	; 3
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <GPIO_setupPinDirection>
	/*set buzzer direction pin*/
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, BUZZER_OFF);
     b58:	83 e0       	ldi	r24, 0x03	; 3
     b5a:	67 e0       	ldi	r22, 0x07	; 7
     b5c:	40 e0       	ldi	r20, 0x00	; 0
     b5e:	0e 94 01 17 	call	0x2e02	; 0x2e02 <GPIO_writePin>
}
     b62:	cf 91       	pop	r28
     b64:	df 91       	pop	r29
     b66:	08 95       	ret

00000b68 <Buzzer_on>:

void Buzzer_on(void)
{
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, BUZZER_ON);
     b70:	83 e0       	ldi	r24, 0x03	; 3
     b72:	67 e0       	ldi	r22, 0x07	; 7
     b74:	41 e0       	ldi	r20, 0x01	; 1
     b76:	0e 94 01 17 	call	0x2e02	; 0x2e02 <GPIO_writePin>
}
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	08 95       	ret

00000b80 <Buzzer_off>:

void Buzzer_off(void)
{
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, BUZZER_OFF);
     b88:	83 e0       	ldi	r24, 0x03	; 3
     b8a:	67 e0       	ldi	r22, 0x07	; 7
     b8c:	40 e0       	ldi	r20, 0x00	; 0
     b8e:	0e 94 01 17 	call	0x2e02	; 0x2e02 <GPIO_writePin>
}
     b92:	cf 91       	pop	r28
     b94:	df 91       	pop	r29
     b96:	08 95       	ret

00000b98 <__vector_7>:
#include "avr/interrupt.h"

static volatile void (*g_callBackFun)(void)=NULL_PTR;

ISR(TIMER1_COMPA_vect)
{
     b98:	1f 92       	push	r1
     b9a:	0f 92       	push	r0
     b9c:	0f b6       	in	r0, 0x3f	; 63
     b9e:	0f 92       	push	r0
     ba0:	11 24       	eor	r1, r1
     ba2:	2f 93       	push	r18
     ba4:	3f 93       	push	r19
     ba6:	4f 93       	push	r20
     ba8:	5f 93       	push	r21
     baa:	6f 93       	push	r22
     bac:	7f 93       	push	r23
     bae:	8f 93       	push	r24
     bb0:	9f 93       	push	r25
     bb2:	af 93       	push	r26
     bb4:	bf 93       	push	r27
     bb6:	ef 93       	push	r30
     bb8:	ff 93       	push	r31
     bba:	df 93       	push	r29
     bbc:	cf 93       	push	r28
     bbe:	cd b7       	in	r28, 0x3d	; 61
     bc0:	de b7       	in	r29, 0x3e	; 62
	(*g_callBackFun)();
     bc2:	e0 91 1c 01 	lds	r30, 0x011C
     bc6:	f0 91 1d 01 	lds	r31, 0x011D
     bca:	09 95       	icall
}
     bcc:	cf 91       	pop	r28
     bce:	df 91       	pop	r29
     bd0:	ff 91       	pop	r31
     bd2:	ef 91       	pop	r30
     bd4:	bf 91       	pop	r27
     bd6:	af 91       	pop	r26
     bd8:	9f 91       	pop	r25
     bda:	8f 91       	pop	r24
     bdc:	7f 91       	pop	r23
     bde:	6f 91       	pop	r22
     be0:	5f 91       	pop	r21
     be2:	4f 91       	pop	r20
     be4:	3f 91       	pop	r19
     be6:	2f 91       	pop	r18
     be8:	0f 90       	pop	r0
     bea:	0f be       	out	0x3f, r0	; 63
     bec:	0f 90       	pop	r0
     bee:	1f 90       	pop	r1
     bf0:	18 95       	reti

00000bf2 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
     bf2:	1f 92       	push	r1
     bf4:	0f 92       	push	r0
     bf6:	0f b6       	in	r0, 0x3f	; 63
     bf8:	0f 92       	push	r0
     bfa:	11 24       	eor	r1, r1
     bfc:	2f 93       	push	r18
     bfe:	3f 93       	push	r19
     c00:	4f 93       	push	r20
     c02:	5f 93       	push	r21
     c04:	6f 93       	push	r22
     c06:	7f 93       	push	r23
     c08:	8f 93       	push	r24
     c0a:	9f 93       	push	r25
     c0c:	af 93       	push	r26
     c0e:	bf 93       	push	r27
     c10:	ef 93       	push	r30
     c12:	ff 93       	push	r31
     c14:	df 93       	push	r29
     c16:	cf 93       	push	r28
     c18:	cd b7       	in	r28, 0x3d	; 61
     c1a:	de b7       	in	r29, 0x3e	; 62
	(*g_callBackFun)();
     c1c:	e0 91 1c 01 	lds	r30, 0x011C
     c20:	f0 91 1d 01 	lds	r31, 0x011D
     c24:	09 95       	icall
}
     c26:	cf 91       	pop	r28
     c28:	df 91       	pop	r29
     c2a:	ff 91       	pop	r31
     c2c:	ef 91       	pop	r30
     c2e:	bf 91       	pop	r27
     c30:	af 91       	pop	r26
     c32:	9f 91       	pop	r25
     c34:	8f 91       	pop	r24
     c36:	7f 91       	pop	r23
     c38:	6f 91       	pop	r22
     c3a:	5f 91       	pop	r21
     c3c:	4f 91       	pop	r20
     c3e:	3f 91       	pop	r19
     c40:	2f 91       	pop	r18
     c42:	0f 90       	pop	r0
     c44:	0f be       	out	0x3f, r0	; 63
     c46:	0f 90       	pop	r0
     c48:	1f 90       	pop	r1
     c4a:	18 95       	reti

00000c4c <Timer1_init>:

void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
     c4c:	df 93       	push	r29
     c4e:	cf 93       	push	r28
     c50:	00 d0       	rcall	.+0      	; 0xc52 <Timer1_init+0x6>
     c52:	cd b7       	in	r28, 0x3d	; 61
     c54:	de b7       	in	r29, 0x3e	; 62
     c56:	9a 83       	std	Y+2, r25	; 0x02
     c58:	89 83       	std	Y+1, r24	; 0x01
	TCCR1A = (1<<FOC1A) | (1<<FOC1A);  /*Non PWM mode*/
     c5a:	ef e4       	ldi	r30, 0x4F	; 79
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	88 e0       	ldi	r24, 0x08	; 8
     c60:	80 83       	st	Z, r24

	TCCR1B = Config_Ptr->prescaler;  /*to set the prescaler of timer*/
     c62:	ae e4       	ldi	r26, 0x4E	; 78
     c64:	b0 e0       	ldi	r27, 0x00	; 0
     c66:	e9 81       	ldd	r30, Y+1	; 0x01
     c68:	fa 81       	ldd	r31, Y+2	; 0x02
     c6a:	84 81       	ldd	r24, Z+4	; 0x04
     c6c:	8c 93       	st	X, r24

	TCCR1B |= (Config_Ptr->mode<<WGM12); /*set timer mode Normal or compare mode*/
     c6e:	ae e4       	ldi	r26, 0x4E	; 78
     c70:	b0 e0       	ldi	r27, 0x00	; 0
     c72:	ee e4       	ldi	r30, 0x4E	; 78
     c74:	f0 e0       	ldi	r31, 0x00	; 0
     c76:	80 81       	ld	r24, Z
     c78:	28 2f       	mov	r18, r24
     c7a:	e9 81       	ldd	r30, Y+1	; 0x01
     c7c:	fa 81       	ldd	r31, Y+2	; 0x02
     c7e:	85 81       	ldd	r24, Z+5	; 0x05
     c80:	88 2f       	mov	r24, r24
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	88 0f       	add	r24, r24
     c86:	99 1f       	adc	r25, r25
     c88:	88 0f       	add	r24, r24
     c8a:	99 1f       	adc	r25, r25
     c8c:	88 0f       	add	r24, r24
     c8e:	99 1f       	adc	r25, r25
     c90:	82 2b       	or	r24, r18
     c92:	8c 93       	st	X, r24

	TCNT1 = Config_Ptr->initial_value;  /*set initial value of timer*/
     c94:	ac e4       	ldi	r26, 0x4C	; 76
     c96:	b0 e0       	ldi	r27, 0x00	; 0
     c98:	e9 81       	ldd	r30, Y+1	; 0x01
     c9a:	fa 81       	ldd	r31, Y+2	; 0x02
     c9c:	80 81       	ld	r24, Z
     c9e:	91 81       	ldd	r25, Z+1	; 0x01
     ca0:	11 96       	adiw	r26, 0x01	; 1
     ca2:	9c 93       	st	X, r25
     ca4:	8e 93       	st	-X, r24

	OCR1A = Config_Ptr->compare_value; /*set compare value*/
     ca6:	aa e4       	ldi	r26, 0x4A	; 74
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e9 81       	ldd	r30, Y+1	; 0x01
     cac:	fa 81       	ldd	r31, Y+2	; 0x02
     cae:	82 81       	ldd	r24, Z+2	; 0x02
     cb0:	93 81       	ldd	r25, Z+3	; 0x03
     cb2:	11 96       	adiw	r26, 0x01	; 1
     cb4:	9c 93       	st	X, r25
     cb6:	8e 93       	st	-X, r24

	TIMSK |= (1<<TICIE1) | (1<<OCIE1A); /*open intrrupt for normal mode and compare */
     cb8:	a9 e5       	ldi	r26, 0x59	; 89
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	e9 e5       	ldi	r30, 0x59	; 89
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	80 63       	ori	r24, 0x30	; 48
     cc4:	8c 93       	st	X, r24

}
     cc6:	0f 90       	pop	r0
     cc8:	0f 90       	pop	r0
     cca:	cf 91       	pop	r28
     ccc:	df 91       	pop	r29
     cce:	08 95       	ret

00000cd0 <Timer1_set_initial_value>:

void Timer1_set_initial_value(uint16 a_initial_value )
{
     cd0:	df 93       	push	r29
     cd2:	cf 93       	push	r28
     cd4:	00 d0       	rcall	.+0      	; 0xcd6 <Timer1_set_initial_value+0x6>
     cd6:	cd b7       	in	r28, 0x3d	; 61
     cd8:	de b7       	in	r29, 0x3e	; 62
     cda:	9a 83       	std	Y+2, r25	; 0x02
     cdc:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = a_initial_value;
     cde:	ec e4       	ldi	r30, 0x4C	; 76
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	89 81       	ldd	r24, Y+1	; 0x01
     ce4:	9a 81       	ldd	r25, Y+2	; 0x02
     ce6:	91 83       	std	Z+1, r25	; 0x01
     ce8:	80 83       	st	Z, r24
}
     cea:	0f 90       	pop	r0
     cec:	0f 90       	pop	r0
     cee:	cf 91       	pop	r28
     cf0:	df 91       	pop	r29
     cf2:	08 95       	ret

00000cf4 <Timer1_deInit>:

void Timer1_deInit(void)
{
     cf4:	df 93       	push	r29
     cf6:	cf 93       	push	r28
     cf8:	cd b7       	in	r28, 0x3d	; 61
     cfa:	de b7       	in	r29, 0x3e	; 62
	/*To deinit the timer we close the clock source to timer*/
	CLEAR_BIT(TCCR1B,CS10);
     cfc:	ae e4       	ldi	r26, 0x4E	; 78
     cfe:	b0 e0       	ldi	r27, 0x00	; 0
     d00:	ee e4       	ldi	r30, 0x4E	; 78
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	80 81       	ld	r24, Z
     d06:	8e 7f       	andi	r24, 0xFE	; 254
     d08:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,CS11);
     d0a:	ae e4       	ldi	r26, 0x4E	; 78
     d0c:	b0 e0       	ldi	r27, 0x00	; 0
     d0e:	ee e4       	ldi	r30, 0x4E	; 78
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	80 81       	ld	r24, Z
     d14:	8d 7f       	andi	r24, 0xFD	; 253
     d16:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,CS12);
     d18:	ae e4       	ldi	r26, 0x4E	; 78
     d1a:	b0 e0       	ldi	r27, 0x00	; 0
     d1c:	ee e4       	ldi	r30, 0x4E	; 78
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	80 81       	ld	r24, Z
     d22:	8b 7f       	andi	r24, 0xFB	; 251
     d24:	8c 93       	st	X, r24

}
     d26:	cf 91       	pop	r28
     d28:	df 91       	pop	r29
     d2a:	08 95       	ret

00000d2c <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void))
{
     d2c:	df 93       	push	r29
     d2e:	cf 93       	push	r28
     d30:	00 d0       	rcall	.+0      	; 0xd32 <Timer1_setCallBack+0x6>
     d32:	cd b7       	in	r28, 0x3d	; 61
     d34:	de b7       	in	r29, 0x3e	; 62
     d36:	9a 83       	std	Y+2, r25	; 0x02
     d38:	89 83       	std	Y+1, r24	; 0x01
	g_callBackFun = a_ptr;
     d3a:	89 81       	ldd	r24, Y+1	; 0x01
     d3c:	9a 81       	ldd	r25, Y+2	; 0x02
     d3e:	90 93 1d 01 	sts	0x011D, r25
     d42:	80 93 1c 01 	sts	0x011C, r24
}
     d46:	0f 90       	pop	r0
     d48:	0f 90       	pop	r0
     d4a:	cf 91       	pop	r28
     d4c:	df 91       	pop	r29
     d4e:	08 95       	ret

00000d50 <UART_init>:
#include "UART.h"
#include "avr/io.h"
#include "common_macros.h"

void UART_init(UART_configType *configPtr)
{
     d50:	df 93       	push	r29
     d52:	cf 93       	push	r28
     d54:	00 d0       	rcall	.+0      	; 0xd56 <UART_init+0x6>
     d56:	0f 92       	push	r0
     d58:	cd b7       	in	r28, 0x3d	; 61
     d5a:	de b7       	in	r29, 0x3e	; 62
     d5c:	9b 83       	std	Y+3, r25	; 0x03
     d5e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 ubrr_value;
	UCSRA= (1<<U2X);
     d60:	eb e2       	ldi	r30, 0x2B	; 43
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	82 e0       	ldi	r24, 0x02	; 2
     d66:	80 83       	st	Z, r24
	/*Double the USART Transmission Speed*/
	UCSRB = (1<<RXEN) | (1<<TXEN) | ( (GET_BIT(configPtr->char_size,2))<<2 );
     d68:	aa e2       	ldi	r26, 0x2A	; 42
     d6a:	b0 e0       	ldi	r27, 0x00	; 0
     d6c:	ea 81       	ldd	r30, Y+2	; 0x02
     d6e:	fb 81       	ldd	r31, Y+3	; 0x03
     d70:	82 81       	ldd	r24, Z+2	; 0x02
     d72:	84 70       	andi	r24, 0x04	; 4
     d74:	88 61       	ori	r24, 0x18	; 24
     d76:	8c 93       	st	X, r24
	/*
	 RXEN Enable the RX
	 TXEN Enable the TX
	 */
	UCSRC = (1<<URSEL) | ( (configPtr->stop_bit)<<USBS)
     d78:	a0 e4       	ldi	r26, 0x40	; 64
     d7a:	b0 e0       	ldi	r27, 0x00	; 0
     d7c:	ea 81       	ldd	r30, Y+2	; 0x02
     d7e:	fb 81       	ldd	r31, Y+3	; 0x03
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	88 2f       	mov	r24, r24
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	88 0f       	add	r24, r24
     d88:	99 1f       	adc	r25, r25
     d8a:	88 0f       	add	r24, r24
     d8c:	99 1f       	adc	r25, r25
     d8e:	88 0f       	add	r24, r24
     d90:	99 1f       	adc	r25, r25
     d92:	28 2f       	mov	r18, r24
     d94:	20 68       	ori	r18, 0x80	; 128
     d96:	ea 81       	ldd	r30, Y+2	; 0x02
     d98:	fb 81       	ldd	r31, Y+3	; 0x03
     d9a:	82 81       	ldd	r24, Z+2	; 0x02
     d9c:	88 2f       	mov	r24, r24
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	81 70       	andi	r24, 0x01	; 1
     da2:	90 70       	andi	r25, 0x00	; 0
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	28 2b       	or	r18, r24
     daa:	ea 81       	ldd	r30, Y+2	; 0x02
     dac:	fb 81       	ldd	r31, Y+3	; 0x03
     dae:	82 81       	ldd	r24, Z+2	; 0x02
     db0:	88 2f       	mov	r24, r24
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	82 70       	andi	r24, 0x02	; 2
     db6:	90 70       	andi	r25, 0x00	; 0
     db8:	95 95       	asr	r25
     dba:	87 95       	ror	r24
     dbc:	88 0f       	add	r24, r24
     dbe:	99 1f       	adc	r25, r25
     dc0:	88 0f       	add	r24, r24
     dc2:	99 1f       	adc	r25, r25
     dc4:	82 2b       	or	r24, r18
     dc6:	8c 93       	st	X, r24
					| ((GET_BIT(configPtr->char_size,0))<< 1) | ( (GET_BIT(configPtr->char_size,1))<<2 );
	UCSRC = (UCSRC & 0xCF) | ( (configPtr->parity_mode)<<4 );
     dc8:	a0 e4       	ldi	r26, 0x40	; 64
     dca:	b0 e0       	ldi	r27, 0x00	; 0
     dcc:	e0 e4       	ldi	r30, 0x40	; 64
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	80 81       	ld	r24, Z
     dd2:	28 2f       	mov	r18, r24
     dd4:	2f 7c       	andi	r18, 0xCF	; 207
     dd6:	ea 81       	ldd	r30, Y+2	; 0x02
     dd8:	fb 81       	ldd	r31, Y+3	; 0x03
     dda:	80 81       	ld	r24, Z
     ddc:	88 2f       	mov	r24, r24
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	82 95       	swap	r24
     de2:	92 95       	swap	r25
     de4:	90 7f       	andi	r25, 0xF0	; 240
     de6:	98 27       	eor	r25, r24
     de8:	80 7f       	andi	r24, 0xF0	; 240
     dea:	98 27       	eor	r25, r24
     dec:	82 2b       	or	r24, r18
     dee:	8c 93       	st	X, r24
	 Asynchronous operation
	 Parity mode is disable
	 1 bit for stop bit
	 */
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (configPtr->baud_rate * 8UL))) - 1);/*equation in data sheet*/
     df0:	ea 81       	ldd	r30, Y+2	; 0x02
     df2:	fb 81       	ldd	r31, Y+3	; 0x03
     df4:	83 81       	ldd	r24, Z+3	; 0x03
     df6:	94 81       	ldd	r25, Z+4	; 0x04
     df8:	a5 81       	ldd	r26, Z+5	; 0x05
     dfa:	b6 81       	ldd	r27, Z+6	; 0x06
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	aa 1f       	adc	r26, r26
     e02:	bb 1f       	adc	r27, r27
     e04:	88 0f       	add	r24, r24
     e06:	99 1f       	adc	r25, r25
     e08:	aa 1f       	adc	r26, r26
     e0a:	bb 1f       	adc	r27, r27
     e0c:	88 0f       	add	r24, r24
     e0e:	99 1f       	adc	r25, r25
     e10:	aa 1f       	adc	r26, r26
     e12:	bb 1f       	adc	r27, r27
     e14:	9c 01       	movw	r18, r24
     e16:	ad 01       	movw	r20, r26
     e18:	80 e4       	ldi	r24, 0x40	; 64
     e1a:	92 e4       	ldi	r25, 0x42	; 66
     e1c:	af e0       	ldi	r26, 0x0F	; 15
     e1e:	b0 e0       	ldi	r27, 0x00	; 0
     e20:	bc 01       	movw	r22, r24
     e22:	cd 01       	movw	r24, r26
     e24:	0e 94 f7 26 	call	0x4dee	; 0x4dee <__udivmodsi4>
     e28:	da 01       	movw	r26, r20
     e2a:	c9 01       	movw	r24, r18
     e2c:	81 50       	subi	r24, 0x01	; 1
     e2e:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
     e30:	e0 e4       	ldi	r30, 0x40	; 64
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	89 81       	ldd	r24, Y+1	; 0x01
     e36:	88 2f       	mov	r24, r24
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	89 2f       	mov	r24, r25
     e3c:	99 0f       	add	r25, r25
     e3e:	99 0b       	sbc	r25, r25
     e40:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
     e42:	e9 e2       	ldi	r30, 0x29	; 41
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	89 81       	ldd	r24, Y+1	; 0x01
     e48:	80 83       	st	Z, r24

}
     e4a:	0f 90       	pop	r0
     e4c:	0f 90       	pop	r0
     e4e:	0f 90       	pop	r0
     e50:	cf 91       	pop	r28
     e52:	df 91       	pop	r29
     e54:	08 95       	ret

00000e56 <UART_sendByte>:


void UART_sendByte(uint8 const data)
{
     e56:	df 93       	push	r29
     e58:	cf 93       	push	r28
     e5a:	0f 92       	push	r0
     e5c:	cd b7       	in	r28, 0x3d	; 61
     e5e:	de b7       	in	r29, 0x3e	; 62
     e60:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(UCSRA,TXC));
	/*we make polling to make sure that we didn't end the function until all bits are shifted to shift register*/
	SET_BIT(UCSRA,TXC);
	/*To clear the flag*/
#else
	while(BIT_IS_CLEAR(UCSRA,UDRE));
     e62:	eb e2       	ldi	r30, 0x2B	; 43
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	88 2f       	mov	r24, r24
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	80 72       	andi	r24, 0x20	; 32
     e6e:	90 70       	andi	r25, 0x00	; 0
     e70:	00 97       	sbiw	r24, 0x00	; 0
     e72:	b9 f3       	breq	.-18     	; 0xe62 <UART_sendByte+0xc>
	/*This bit is set if the transimeter is ready to receive another byte*/
	UDR = data;
     e74:	ec e2       	ldi	r30, 0x2C	; 44
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	89 81       	ldd	r24, Y+1	; 0x01
     e7a:	80 83       	st	Z, r24
#endif
}
     e7c:	0f 90       	pop	r0
     e7e:	cf 91       	pop	r28
     e80:	df 91       	pop	r29
     e82:	08 95       	ret

00000e84 <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
     e84:	df 93       	push	r29
     e86:	cf 93       	push	r28
     e88:	cd b7       	in	r28, 0x3d	; 61
     e8a:	de b7       	in	r29, 0x3e	; 62
	/*To wait until this bit is 1 ,becase this bit is set when
	  there are data which is ready to be read in UDR*/
	while(BIT_IS_CLEAR(UCSRA,RXC));
     e8c:	eb e2       	ldi	r30, 0x2B	; 43
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	88 23       	and	r24, r24
     e94:	dc f7       	brge	.-10     	; 0xe8c <UART_recieveByte+0x8>
	return UDR;
     e96:	ec e2       	ldi	r30, 0x2C	; 44
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
}
     e9c:	cf 91       	pop	r28
     e9e:	df 91       	pop	r29
     ea0:	08 95       	ret

00000ea2 <UART_sendString>:

void UART_sendString(const uint8 *str)
{
     ea2:	df 93       	push	r29
     ea4:	cf 93       	push	r28
     ea6:	00 d0       	rcall	.+0      	; 0xea8 <UART_sendString+0x6>
     ea8:	00 d0       	rcall	.+0      	; 0xeaa <UART_sendString+0x8>
     eaa:	cd b7       	in	r28, 0x3d	; 61
     eac:	de b7       	in	r29, 0x3e	; 62
     eae:	9c 83       	std	Y+4, r25	; 0x04
     eb0:	8b 83       	std	Y+3, r24	; 0x03
	uint16 i=0;
     eb2:	1a 82       	std	Y+2, r1	; 0x02
     eb4:	19 82       	std	Y+1, r1	; 0x01
     eb6:	0f c0       	rjmp	.+30     	; 0xed6 <UART_sendString+0x34>
	while(str[i] != '\0')
	{
		UART_sendByte(str[i]);
     eb8:	2b 81       	ldd	r18, Y+3	; 0x03
     eba:	3c 81       	ldd	r19, Y+4	; 0x04
     ebc:	89 81       	ldd	r24, Y+1	; 0x01
     ebe:	9a 81       	ldd	r25, Y+2	; 0x02
     ec0:	f9 01       	movw	r30, r18
     ec2:	e8 0f       	add	r30, r24
     ec4:	f9 1f       	adc	r31, r25
     ec6:	80 81       	ld	r24, Z
     ec8:	0e 94 2b 07 	call	0xe56	; 0xe56 <UART_sendByte>
		i++;
     ecc:	89 81       	ldd	r24, Y+1	; 0x01
     ece:	9a 81       	ldd	r25, Y+2	; 0x02
     ed0:	01 96       	adiw	r24, 0x01	; 1
     ed2:	9a 83       	std	Y+2, r25	; 0x02
     ed4:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *str)
{
	uint16 i=0;
	while(str[i] != '\0')
     ed6:	2b 81       	ldd	r18, Y+3	; 0x03
     ed8:	3c 81       	ldd	r19, Y+4	; 0x04
     eda:	89 81       	ldd	r24, Y+1	; 0x01
     edc:	9a 81       	ldd	r25, Y+2	; 0x02
     ede:	f9 01       	movw	r30, r18
     ee0:	e8 0f       	add	r30, r24
     ee2:	f9 1f       	adc	r31, r25
     ee4:	80 81       	ld	r24, Z
     ee6:	88 23       	and	r24, r24
     ee8:	39 f7       	brne	.-50     	; 0xeb8 <UART_sendString+0x16>
	{
		UART_sendByte(str[i]);
		i++;
	}

}
     eea:	0f 90       	pop	r0
     eec:	0f 90       	pop	r0
     eee:	0f 90       	pop	r0
     ef0:	0f 90       	pop	r0
     ef2:	cf 91       	pop	r28
     ef4:	df 91       	pop	r29
     ef6:	08 95       	ret

00000ef8 <UART_recieveString>:


void UART_recieveString(uint8 *str)
{
     ef8:	0f 93       	push	r16
     efa:	1f 93       	push	r17
     efc:	df 93       	push	r29
     efe:	cf 93       	push	r28
     f00:	00 d0       	rcall	.+0      	; 0xf02 <UART_recieveString+0xa>
     f02:	00 d0       	rcall	.+0      	; 0xf04 <UART_recieveString+0xc>
     f04:	0f 92       	push	r0
     f06:	cd b7       	in	r28, 0x3d	; 61
     f08:	de b7       	in	r29, 0x3e	; 62
     f0a:	9c 83       	std	Y+4, r25	; 0x04
     f0c:	8b 83       	std	Y+3, r24	; 0x03
	uint16 i=0;
     f0e:	1a 82       	std	Y+2, r1	; 0x02
     f10:	19 82       	std	Y+1, r1	; 0x01
	str[i]=UART_recieveByte();
     f12:	2b 81       	ldd	r18, Y+3	; 0x03
     f14:	3c 81       	ldd	r19, Y+4	; 0x04
     f16:	89 81       	ldd	r24, Y+1	; 0x01
     f18:	9a 81       	ldd	r25, Y+2	; 0x02
     f1a:	89 01       	movw	r16, r18
     f1c:	08 0f       	add	r16, r24
     f1e:	19 1f       	adc	r17, r25
     f20:	0e 94 42 07 	call	0xe84	; 0xe84 <UART_recieveByte>
     f24:	f8 01       	movw	r30, r16
     f26:	80 83       	st	Z, r24
     f28:	0b c0       	rjmp	.+22     	; 0xf40 <UART_recieveString+0x48>

	while('#' != str[i++]){
		str[i]=UART_recieveByte();
     f2a:	2b 81       	ldd	r18, Y+3	; 0x03
     f2c:	3c 81       	ldd	r19, Y+4	; 0x04
     f2e:	89 81       	ldd	r24, Y+1	; 0x01
     f30:	9a 81       	ldd	r25, Y+2	; 0x02
     f32:	89 01       	movw	r16, r18
     f34:	08 0f       	add	r16, r24
     f36:	19 1f       	adc	r17, r25
     f38:	0e 94 42 07 	call	0xe84	; 0xe84 <UART_recieveByte>
     f3c:	f8 01       	movw	r30, r16
     f3e:	80 83       	st	Z, r24
void UART_recieveString(uint8 *str)
{
	uint16 i=0;
	str[i]=UART_recieveByte();

	while('#' != str[i++]){
     f40:	2b 81       	ldd	r18, Y+3	; 0x03
     f42:	3c 81       	ldd	r19, Y+4	; 0x04
     f44:	89 81       	ldd	r24, Y+1	; 0x01
     f46:	9a 81       	ldd	r25, Y+2	; 0x02
     f48:	f9 01       	movw	r30, r18
     f4a:	e8 0f       	add	r30, r24
     f4c:	f9 1f       	adc	r31, r25
     f4e:	80 81       	ld	r24, Z
     f50:	1d 82       	std	Y+5, r1	; 0x05
     f52:	83 32       	cpi	r24, 0x23	; 35
     f54:	11 f0       	breq	.+4      	; 0xf5a <UART_recieveString+0x62>
     f56:	f1 e0       	ldi	r31, 0x01	; 1
     f58:	fd 83       	std	Y+5, r31	; 0x05
     f5a:	89 81       	ldd	r24, Y+1	; 0x01
     f5c:	9a 81       	ldd	r25, Y+2	; 0x02
     f5e:	01 96       	adiw	r24, 0x01	; 1
     f60:	9a 83       	std	Y+2, r25	; 0x02
     f62:	89 83       	std	Y+1, r24	; 0x01
     f64:	8d 81       	ldd	r24, Y+5	; 0x05
     f66:	88 23       	and	r24, r24
     f68:	01 f7       	brne	.-64     	; 0xf2a <UART_recieveString+0x32>
		str[i]=UART_recieveByte();
	  }

	str[i]='\0';
     f6a:	8b 81       	ldd	r24, Y+3	; 0x03
     f6c:	9c 81       	ldd	r25, Y+4	; 0x04
     f6e:	29 81       	ldd	r18, Y+1	; 0x01
     f70:	3a 81       	ldd	r19, Y+2	; 0x02
     f72:	fc 01       	movw	r30, r24
     f74:	e2 0f       	add	r30, r18
     f76:	f3 1f       	adc	r31, r19
     f78:	10 82       	st	Z, r1
}
     f7a:	0f 90       	pop	r0
     f7c:	0f 90       	pop	r0
     f7e:	0f 90       	pop	r0
     f80:	0f 90       	pop	r0
     f82:	0f 90       	pop	r0
     f84:	cf 91       	pop	r28
     f86:	df 91       	pop	r29
     f88:	1f 91       	pop	r17
     f8a:	0f 91       	pop	r16
     f8c:	08 95       	ret

00000f8e <callback_functon>:
 * Description : a call back function for ISR if timer1
 * Args   : void
 * return : void
 ************************************************************/
void callback_functon(void)
{
     f8e:	df 93       	push	r29
     f90:	cf 93       	push	r28
     f92:	cd b7       	in	r28, 0x3d	; 61
     f94:	de b7       	in	r29, 0x3e	; 62
	trim++;
     f96:	80 91 24 01 	lds	r24, 0x0124
     f9a:	8f 5f       	subi	r24, 0xFF	; 255
     f9c:	80 93 24 01 	sts	0x0124, r24
	Timer1_set_initial_value(TIMER_INITIAL_VALUE);
     fa0:	83 ee       	ldi	r24, 0xE3	; 227
     fa2:	97 e6       	ldi	r25, 0x67	; 103
     fa4:	0e 94 68 06 	call	0xcd0	; 0xcd0 <Timer1_set_initial_value>
	if(trim==trim_numb)
     fa8:	90 91 24 01 	lds	r25, 0x0124
     fac:	80 91 1e 01 	lds	r24, 0x011E
     fb0:	98 17       	cp	r25, r24
     fb2:	31 f4       	brne	.+12     	; 0xfc0 <callback_functon+0x32>
	{
		g_blocked=FALSE;
     fb4:	10 92 25 01 	sts	0x0125, r1
		Timer1_deInit();
     fb8:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <Timer1_deInit>
		trim=0;
     fbc:	10 92 24 01 	sts	0x0124, r1
	}
}
     fc0:	cf 91       	pop	r28
     fc2:	df 91       	pop	r29
     fc4:	08 95       	ret

00000fc6 <write_pass_in_eeprom>:
 * password (g_pass) in eeprom
 * Args   : void
 * return : void
 ************************************************************/
void write_pass_in_eeprom(void)
{
     fc6:	df 93       	push	r29
     fc8:	cf 93       	push	r28
     fca:	cd b7       	in	r28, 0x3d	; 61
     fcc:	de b7       	in	r29, 0x3e	; 62
     fce:	60 97       	sbiw	r28, 0x10	; 16
     fd0:	0f b6       	in	r0, 0x3f	; 63
     fd2:	f8 94       	cli
     fd4:	de bf       	out	0x3e, r29	; 62
     fd6:	0f be       	out	0x3f, r0	; 63
     fd8:	cd bf       	out	0x3d, r28	; 61
	for(int k=0;k<PASS_SIZE;k++)
     fda:	18 8a       	std	Y+16, r1	; 0x10
     fdc:	1f 86       	std	Y+15, r1	; 0x0f
     fde:	86 c0       	rjmp	.+268    	; 0x10ec <write_pass_in_eeprom+0x126>
	{
		EEPROM_writeByte(PASSWORD_ADDERESS+k, g_pass[k]); /* Write 0x0F in the external EEPROM */
     fe0:	8f 85       	ldd	r24, Y+15	; 0x0f
     fe2:	98 89       	ldd	r25, Y+16	; 0x10
     fe4:	8f 5e       	subi	r24, 0xEF	; 239
     fe6:	9c 4f       	sbci	r25, 0xFC	; 252
     fe8:	9c 01       	movw	r18, r24
     fea:	8f 85       	ldd	r24, Y+15	; 0x0f
     fec:	98 89       	ldd	r25, Y+16	; 0x10
     fee:	fc 01       	movw	r30, r24
     ff0:	e1 5e       	subi	r30, 0xE1	; 225
     ff2:	fe 4f       	sbci	r31, 0xFE	; 254
     ff4:	40 81       	ld	r20, Z
     ff6:	c9 01       	movw	r24, r18
     ff8:	64 2f       	mov	r22, r20
     ffa:	0e 94 75 15 	call	0x2aea	; 0x2aea <EEPROM_writeByte>
     ffe:	80 e0       	ldi	r24, 0x00	; 0
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	a0 e2       	ldi	r26, 0x20	; 32
    1004:	b1 e4       	ldi	r27, 0x41	; 65
    1006:	8b 87       	std	Y+11, r24	; 0x0b
    1008:	9c 87       	std	Y+12, r25	; 0x0c
    100a:	ad 87       	std	Y+13, r26	; 0x0d
    100c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    100e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1010:	7c 85       	ldd	r23, Y+12	; 0x0c
    1012:	8d 85       	ldd	r24, Y+13	; 0x0d
    1014:	9e 85       	ldd	r25, Y+14	; 0x0e
    1016:	20 e0       	ldi	r18, 0x00	; 0
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	4a ef       	ldi	r20, 0xFA	; 250
    101c:	54 e4       	ldi	r21, 0x44	; 68
    101e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1022:	dc 01       	movw	r26, r24
    1024:	cb 01       	movw	r24, r22
    1026:	8f 83       	std	Y+7, r24	; 0x07
    1028:	98 87       	std	Y+8, r25	; 0x08
    102a:	a9 87       	std	Y+9, r26	; 0x09
    102c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    102e:	6f 81       	ldd	r22, Y+7	; 0x07
    1030:	78 85       	ldd	r23, Y+8	; 0x08
    1032:	89 85       	ldd	r24, Y+9	; 0x09
    1034:	9a 85       	ldd	r25, Y+10	; 0x0a
    1036:	20 e0       	ldi	r18, 0x00	; 0
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	40 e8       	ldi	r20, 0x80	; 128
    103c:	5f e3       	ldi	r21, 0x3F	; 63
    103e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1042:	88 23       	and	r24, r24
    1044:	2c f4       	brge	.+10     	; 0x1050 <write_pass_in_eeprom+0x8a>
		__ticks = 1;
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	9e 83       	std	Y+6, r25	; 0x06
    104c:	8d 83       	std	Y+5, r24	; 0x05
    104e:	3f c0       	rjmp	.+126    	; 0x10ce <write_pass_in_eeprom+0x108>
	else if (__tmp > 65535)
    1050:	6f 81       	ldd	r22, Y+7	; 0x07
    1052:	78 85       	ldd	r23, Y+8	; 0x08
    1054:	89 85       	ldd	r24, Y+9	; 0x09
    1056:	9a 85       	ldd	r25, Y+10	; 0x0a
    1058:	20 e0       	ldi	r18, 0x00	; 0
    105a:	3f ef       	ldi	r19, 0xFF	; 255
    105c:	4f e7       	ldi	r20, 0x7F	; 127
    105e:	57 e4       	ldi	r21, 0x47	; 71
    1060:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1064:	18 16       	cp	r1, r24
    1066:	4c f5       	brge	.+82     	; 0x10ba <write_pass_in_eeprom+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1068:	6b 85       	ldd	r22, Y+11	; 0x0b
    106a:	7c 85       	ldd	r23, Y+12	; 0x0c
    106c:	8d 85       	ldd	r24, Y+13	; 0x0d
    106e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1070:	20 e0       	ldi	r18, 0x00	; 0
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	40 e2       	ldi	r20, 0x20	; 32
    1076:	51 e4       	ldi	r21, 0x41	; 65
    1078:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    107c:	dc 01       	movw	r26, r24
    107e:	cb 01       	movw	r24, r22
    1080:	bc 01       	movw	r22, r24
    1082:	cd 01       	movw	r24, r26
    1084:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1088:	dc 01       	movw	r26, r24
    108a:	cb 01       	movw	r24, r22
    108c:	9e 83       	std	Y+6, r25	; 0x06
    108e:	8d 83       	std	Y+5, r24	; 0x05
    1090:	0f c0       	rjmp	.+30     	; 0x10b0 <write_pass_in_eeprom+0xea>
    1092:	88 ec       	ldi	r24, 0xC8	; 200
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	9c 83       	std	Y+4, r25	; 0x04
    1098:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    109a:	8b 81       	ldd	r24, Y+3	; 0x03
    109c:	9c 81       	ldd	r25, Y+4	; 0x04
    109e:	01 97       	sbiw	r24, 0x01	; 1
    10a0:	f1 f7       	brne	.-4      	; 0x109e <write_pass_in_eeprom+0xd8>
    10a2:	9c 83       	std	Y+4, r25	; 0x04
    10a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10a6:	8d 81       	ldd	r24, Y+5	; 0x05
    10a8:	9e 81       	ldd	r25, Y+6	; 0x06
    10aa:	01 97       	sbiw	r24, 0x01	; 1
    10ac:	9e 83       	std	Y+6, r25	; 0x06
    10ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10b0:	8d 81       	ldd	r24, Y+5	; 0x05
    10b2:	9e 81       	ldd	r25, Y+6	; 0x06
    10b4:	00 97       	sbiw	r24, 0x00	; 0
    10b6:	69 f7       	brne	.-38     	; 0x1092 <write_pass_in_eeprom+0xcc>
    10b8:	14 c0       	rjmp	.+40     	; 0x10e2 <write_pass_in_eeprom+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10ba:	6f 81       	ldd	r22, Y+7	; 0x07
    10bc:	78 85       	ldd	r23, Y+8	; 0x08
    10be:	89 85       	ldd	r24, Y+9	; 0x09
    10c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    10c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10c6:	dc 01       	movw	r26, r24
    10c8:	cb 01       	movw	r24, r22
    10ca:	9e 83       	std	Y+6, r25	; 0x06
    10cc:	8d 83       	std	Y+5, r24	; 0x05
    10ce:	8d 81       	ldd	r24, Y+5	; 0x05
    10d0:	9e 81       	ldd	r25, Y+6	; 0x06
    10d2:	9a 83       	std	Y+2, r25	; 0x02
    10d4:	89 83       	std	Y+1, r24	; 0x01
    10d6:	89 81       	ldd	r24, Y+1	; 0x01
    10d8:	9a 81       	ldd	r25, Y+2	; 0x02
    10da:	01 97       	sbiw	r24, 0x01	; 1
    10dc:	f1 f7       	brne	.-4      	; 0x10da <write_pass_in_eeprom+0x114>
    10de:	9a 83       	std	Y+2, r25	; 0x02
    10e0:	89 83       	std	Y+1, r24	; 0x01
 * Args   : void
 * return : void
 ************************************************************/
void write_pass_in_eeprom(void)
{
	for(int k=0;k<PASS_SIZE;k++)
    10e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    10e4:	98 89       	ldd	r25, Y+16	; 0x10
    10e6:	01 96       	adiw	r24, 0x01	; 1
    10e8:	98 8b       	std	Y+16, r25	; 0x10
    10ea:	8f 87       	std	Y+15, r24	; 0x0f
    10ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    10ee:	98 89       	ldd	r25, Y+16	; 0x10
    10f0:	85 30       	cpi	r24, 0x05	; 5
    10f2:	91 05       	cpc	r25, r1
    10f4:	0c f4       	brge	.+2      	; 0x10f8 <write_pass_in_eeprom+0x132>
    10f6:	74 cf       	rjmp	.-280    	; 0xfe0 <write_pass_in_eeprom+0x1a>
	{
		EEPROM_writeByte(PASSWORD_ADDERESS+k, g_pass[k]); /* Write 0x0F in the external EEPROM */
		_delay_ms(10);
	}
}
    10f8:	60 96       	adiw	r28, 0x10	; 16
    10fa:	0f b6       	in	r0, 0x3f	; 63
    10fc:	f8 94       	cli
    10fe:	de bf       	out	0x3e, r29	; 62
    1100:	0f be       	out	0x3f, r0	; 63
    1102:	cd bf       	out	0x3d, r28	; 61
    1104:	cf 91       	pop	r28
    1106:	df 91       	pop	r29
    1108:	08 95       	ret

0000110a <read_pass_from_eeprom>:
 * IN : a_pass is an pointer to uint8 which will points to an array
 * contains password
 * return : void
 ***********************************************************************/
void read_pass_from_eeprom(uint8* a_pass)
{
    110a:	df 93       	push	r29
    110c:	cf 93       	push	r28
    110e:	cd b7       	in	r28, 0x3d	; 61
    1110:	de b7       	in	r29, 0x3e	; 62
    1112:	62 97       	sbiw	r28, 0x12	; 18
    1114:	0f b6       	in	r0, 0x3f	; 63
    1116:	f8 94       	cli
    1118:	de bf       	out	0x3e, r29	; 62
    111a:	0f be       	out	0x3f, r0	; 63
    111c:	cd bf       	out	0x3d, r28	; 61
    111e:	9a 8b       	std	Y+18, r25	; 0x12
    1120:	89 8b       	std	Y+17, r24	; 0x11
	for(int k=0;k<PASS_SIZE;k++)
    1122:	18 8a       	std	Y+16, r1	; 0x10
    1124:	1f 86       	std	Y+15, r1	; 0x0f
    1126:	86 c0       	rjmp	.+268    	; 0x1234 <read_pass_from_eeprom+0x12a>
	{
		EEPROM_readByte(PASSWORD_ADDERESS+k, &a_pass[k]);
    1128:	8f 85       	ldd	r24, Y+15	; 0x0f
    112a:	98 89       	ldd	r25, Y+16	; 0x10
    112c:	8f 5e       	subi	r24, 0xEF	; 239
    112e:	9c 4f       	sbci	r25, 0xFC	; 252
    1130:	ac 01       	movw	r20, r24
    1132:	2f 85       	ldd	r18, Y+15	; 0x0f
    1134:	38 89       	ldd	r19, Y+16	; 0x10
    1136:	89 89       	ldd	r24, Y+17	; 0x11
    1138:	9a 89       	ldd	r25, Y+18	; 0x12
    113a:	28 0f       	add	r18, r24
    113c:	39 1f       	adc	r19, r25
    113e:	ca 01       	movw	r24, r20
    1140:	b9 01       	movw	r22, r18
    1142:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <EEPROM_readByte>
    1146:	80 e0       	ldi	r24, 0x00	; 0
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	a0 e2       	ldi	r26, 0x20	; 32
    114c:	b1 e4       	ldi	r27, 0x41	; 65
    114e:	8b 87       	std	Y+11, r24	; 0x0b
    1150:	9c 87       	std	Y+12, r25	; 0x0c
    1152:	ad 87       	std	Y+13, r26	; 0x0d
    1154:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1156:	6b 85       	ldd	r22, Y+11	; 0x0b
    1158:	7c 85       	ldd	r23, Y+12	; 0x0c
    115a:	8d 85       	ldd	r24, Y+13	; 0x0d
    115c:	9e 85       	ldd	r25, Y+14	; 0x0e
    115e:	20 e0       	ldi	r18, 0x00	; 0
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	4a ef       	ldi	r20, 0xFA	; 250
    1164:	54 e4       	ldi	r21, 0x44	; 68
    1166:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    116a:	dc 01       	movw	r26, r24
    116c:	cb 01       	movw	r24, r22
    116e:	8f 83       	std	Y+7, r24	; 0x07
    1170:	98 87       	std	Y+8, r25	; 0x08
    1172:	a9 87       	std	Y+9, r26	; 0x09
    1174:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1176:	6f 81       	ldd	r22, Y+7	; 0x07
    1178:	78 85       	ldd	r23, Y+8	; 0x08
    117a:	89 85       	ldd	r24, Y+9	; 0x09
    117c:	9a 85       	ldd	r25, Y+10	; 0x0a
    117e:	20 e0       	ldi	r18, 0x00	; 0
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	40 e8       	ldi	r20, 0x80	; 128
    1184:	5f e3       	ldi	r21, 0x3F	; 63
    1186:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    118a:	88 23       	and	r24, r24
    118c:	2c f4       	brge	.+10     	; 0x1198 <read_pass_from_eeprom+0x8e>
		__ticks = 1;
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	9e 83       	std	Y+6, r25	; 0x06
    1194:	8d 83       	std	Y+5, r24	; 0x05
    1196:	3f c0       	rjmp	.+126    	; 0x1216 <read_pass_from_eeprom+0x10c>
	else if (__tmp > 65535)
    1198:	6f 81       	ldd	r22, Y+7	; 0x07
    119a:	78 85       	ldd	r23, Y+8	; 0x08
    119c:	89 85       	ldd	r24, Y+9	; 0x09
    119e:	9a 85       	ldd	r25, Y+10	; 0x0a
    11a0:	20 e0       	ldi	r18, 0x00	; 0
    11a2:	3f ef       	ldi	r19, 0xFF	; 255
    11a4:	4f e7       	ldi	r20, 0x7F	; 127
    11a6:	57 e4       	ldi	r21, 0x47	; 71
    11a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11ac:	18 16       	cp	r1, r24
    11ae:	4c f5       	brge	.+82     	; 0x1202 <read_pass_from_eeprom+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    11b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    11b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    11b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    11b8:	20 e0       	ldi	r18, 0x00	; 0
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	40 e2       	ldi	r20, 0x20	; 32
    11be:	51 e4       	ldi	r21, 0x41	; 65
    11c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11c4:	dc 01       	movw	r26, r24
    11c6:	cb 01       	movw	r24, r22
    11c8:	bc 01       	movw	r22, r24
    11ca:	cd 01       	movw	r24, r26
    11cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11d0:	dc 01       	movw	r26, r24
    11d2:	cb 01       	movw	r24, r22
    11d4:	9e 83       	std	Y+6, r25	; 0x06
    11d6:	8d 83       	std	Y+5, r24	; 0x05
    11d8:	0f c0       	rjmp	.+30     	; 0x11f8 <read_pass_from_eeprom+0xee>
    11da:	88 ec       	ldi	r24, 0xC8	; 200
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	9c 83       	std	Y+4, r25	; 0x04
    11e0:	8b 83       	std	Y+3, r24	; 0x03
    11e2:	8b 81       	ldd	r24, Y+3	; 0x03
    11e4:	9c 81       	ldd	r25, Y+4	; 0x04
    11e6:	01 97       	sbiw	r24, 0x01	; 1
    11e8:	f1 f7       	brne	.-4      	; 0x11e6 <read_pass_from_eeprom+0xdc>
    11ea:	9c 83       	std	Y+4, r25	; 0x04
    11ec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11ee:	8d 81       	ldd	r24, Y+5	; 0x05
    11f0:	9e 81       	ldd	r25, Y+6	; 0x06
    11f2:	01 97       	sbiw	r24, 0x01	; 1
    11f4:	9e 83       	std	Y+6, r25	; 0x06
    11f6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11f8:	8d 81       	ldd	r24, Y+5	; 0x05
    11fa:	9e 81       	ldd	r25, Y+6	; 0x06
    11fc:	00 97       	sbiw	r24, 0x00	; 0
    11fe:	69 f7       	brne	.-38     	; 0x11da <read_pass_from_eeprom+0xd0>
    1200:	14 c0       	rjmp	.+40     	; 0x122a <read_pass_from_eeprom+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1202:	6f 81       	ldd	r22, Y+7	; 0x07
    1204:	78 85       	ldd	r23, Y+8	; 0x08
    1206:	89 85       	ldd	r24, Y+9	; 0x09
    1208:	9a 85       	ldd	r25, Y+10	; 0x0a
    120a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    120e:	dc 01       	movw	r26, r24
    1210:	cb 01       	movw	r24, r22
    1212:	9e 83       	std	Y+6, r25	; 0x06
    1214:	8d 83       	std	Y+5, r24	; 0x05
    1216:	8d 81       	ldd	r24, Y+5	; 0x05
    1218:	9e 81       	ldd	r25, Y+6	; 0x06
    121a:	9a 83       	std	Y+2, r25	; 0x02
    121c:	89 83       	std	Y+1, r24	; 0x01
    121e:	89 81       	ldd	r24, Y+1	; 0x01
    1220:	9a 81       	ldd	r25, Y+2	; 0x02
    1222:	01 97       	sbiw	r24, 0x01	; 1
    1224:	f1 f7       	brne	.-4      	; 0x1222 <read_pass_from_eeprom+0x118>
    1226:	9a 83       	std	Y+2, r25	; 0x02
    1228:	89 83       	std	Y+1, r24	; 0x01
 * contains password
 * return : void
 ***********************************************************************/
void read_pass_from_eeprom(uint8* a_pass)
{
	for(int k=0;k<PASS_SIZE;k++)
    122a:	8f 85       	ldd	r24, Y+15	; 0x0f
    122c:	98 89       	ldd	r25, Y+16	; 0x10
    122e:	01 96       	adiw	r24, 0x01	; 1
    1230:	98 8b       	std	Y+16, r25	; 0x10
    1232:	8f 87       	std	Y+15, r24	; 0x0f
    1234:	8f 85       	ldd	r24, Y+15	; 0x0f
    1236:	98 89       	ldd	r25, Y+16	; 0x10
    1238:	85 30       	cpi	r24, 0x05	; 5
    123a:	91 05       	cpc	r25, r1
    123c:	0c f4       	brge	.+2      	; 0x1240 <read_pass_from_eeprom+0x136>
    123e:	74 cf       	rjmp	.-280    	; 0x1128 <read_pass_from_eeprom+0x1e>
	{
		EEPROM_readByte(PASSWORD_ADDERESS+k, &a_pass[k]);
		_delay_ms(10);
	}
}
    1240:	62 96       	adiw	r28, 0x12	; 18
    1242:	0f b6       	in	r0, 0x3f	; 63
    1244:	f8 94       	cli
    1246:	de bf       	out	0x3e, r29	; 62
    1248:	0f be       	out	0x3f, r0	; 63
    124a:	cd bf       	out	0x3d, r28	; 61
    124c:	cf 91       	pop	r28
    124e:	df 91       	pop	r29
    1250:	08 95       	ret

00001252 <step_1_set_password>:
 *
 * Args   : void
 * return : void
 ***********************************************************************/
void step_1_set_password(void)
{
    1252:	df 93       	push	r29
    1254:	cf 93       	push	r28
    1256:	cd b7       	in	r28, 0x3d	; 61
    1258:	de b7       	in	r29, 0x3e	; 62
    125a:	ea 97       	sbiw	r28, 0x3a	; 58
    125c:	0f b6       	in	r0, 0x3f	; 63
    125e:	f8 94       	cli
    1260:	de bf       	out	0x3e, r29	; 62
    1262:	0f be       	out	0x3f, r0	; 63
    1264:	cd bf       	out	0x3d, r28	; 61
	boolean again=TRUE; /*if this variable is true it will loop till it become false*/
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	8d ab       	std	Y+53, r24	; 0x35
    126a:	c7 c1       	rjmp	.+910    	; 0x15fa <step_1_set_password+0x3a8>

	while(again) /*when again is false this means that the two entered passwords are same*/
	{
		LCD_clearScreen();
    126c:	0e 94 83 25 	call	0x4b06	; 0x4b06 <LCD_clearScreen>
		LCD_writeString("PLZ enter pass:");
    1270:	80 e6       	ldi	r24, 0x60	; 96
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	0e 94 f2 24 	call	0x49e4	; 0x49e4 <LCD_writeString>
		LCD_sendCommand(LCD_CURSOR_ON);
    1278:	8e e0       	ldi	r24, 0x0E	; 14
    127a:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <LCD_sendCommand>
		LCD_moveCursor(1,0);
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	60 e0       	ldi	r22, 0x00	; 0
    1282:	0e 94 1d 25 	call	0x4a3a	; 0x4a3a <LCD_moveCursor>

		uint8 pressed_button;
		int i;
		for(i=0;i<PASS_SIZE;)
    1286:	1b aa       	std	Y+51, r1	; 0x33
    1288:	1a aa       	std	Y+50, r1	; 0x32
    128a:	b1 c0       	rjmp	.+354    	; 0x13ee <step_1_set_password+0x19c>
		{
			pressed_button=KEYPAD_getPressedKey();
    128c:	0e 94 55 19 	call	0x32aa	; 0x32aa <KEYPAD_getPressedKey>
    1290:	8c ab       	std	Y+52, r24	; 0x34
    1292:	80 e0       	ldi	r24, 0x00	; 0
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	a6 e9       	ldi	r26, 0x96	; 150
    1298:	b3 e4       	ldi	r27, 0x43	; 67
    129a:	8f a3       	std	Y+39, r24	; 0x27
    129c:	98 a7       	std	Y+40, r25	; 0x28
    129e:	a9 a7       	std	Y+41, r26	; 0x29
    12a0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12a2:	6f a1       	ldd	r22, Y+39	; 0x27
    12a4:	78 a5       	ldd	r23, Y+40	; 0x28
    12a6:	89 a5       	ldd	r24, Y+41	; 0x29
    12a8:	9a a5       	ldd	r25, Y+42	; 0x2a
    12aa:	20 e0       	ldi	r18, 0x00	; 0
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	4a ef       	ldi	r20, 0xFA	; 250
    12b0:	54 e4       	ldi	r21, 0x44	; 68
    12b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12b6:	dc 01       	movw	r26, r24
    12b8:	cb 01       	movw	r24, r22
    12ba:	8b a3       	std	Y+35, r24	; 0x23
    12bc:	9c a3       	std	Y+36, r25	; 0x24
    12be:	ad a3       	std	Y+37, r26	; 0x25
    12c0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    12c2:	6b a1       	ldd	r22, Y+35	; 0x23
    12c4:	7c a1       	ldd	r23, Y+36	; 0x24
    12c6:	8d a1       	ldd	r24, Y+37	; 0x25
    12c8:	9e a1       	ldd	r25, Y+38	; 0x26
    12ca:	20 e0       	ldi	r18, 0x00	; 0
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	40 e8       	ldi	r20, 0x80	; 128
    12d0:	5f e3       	ldi	r21, 0x3F	; 63
    12d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12d6:	88 23       	and	r24, r24
    12d8:	2c f4       	brge	.+10     	; 0x12e4 <step_1_set_password+0x92>
		__ticks = 1;
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	9a a3       	std	Y+34, r25	; 0x22
    12e0:	89 a3       	std	Y+33, r24	; 0x21
    12e2:	3f c0       	rjmp	.+126    	; 0x1362 <step_1_set_password+0x110>
	else if (__tmp > 65535)
    12e4:	6b a1       	ldd	r22, Y+35	; 0x23
    12e6:	7c a1       	ldd	r23, Y+36	; 0x24
    12e8:	8d a1       	ldd	r24, Y+37	; 0x25
    12ea:	9e a1       	ldd	r25, Y+38	; 0x26
    12ec:	20 e0       	ldi	r18, 0x00	; 0
    12ee:	3f ef       	ldi	r19, 0xFF	; 255
    12f0:	4f e7       	ldi	r20, 0x7F	; 127
    12f2:	57 e4       	ldi	r21, 0x47	; 71
    12f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12f8:	18 16       	cp	r1, r24
    12fa:	4c f5       	brge	.+82     	; 0x134e <step_1_set_password+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12fc:	6f a1       	ldd	r22, Y+39	; 0x27
    12fe:	78 a5       	ldd	r23, Y+40	; 0x28
    1300:	89 a5       	ldd	r24, Y+41	; 0x29
    1302:	9a a5       	ldd	r25, Y+42	; 0x2a
    1304:	20 e0       	ldi	r18, 0x00	; 0
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	40 e2       	ldi	r20, 0x20	; 32
    130a:	51 e4       	ldi	r21, 0x41	; 65
    130c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1310:	dc 01       	movw	r26, r24
    1312:	cb 01       	movw	r24, r22
    1314:	bc 01       	movw	r22, r24
    1316:	cd 01       	movw	r24, r26
    1318:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    131c:	dc 01       	movw	r26, r24
    131e:	cb 01       	movw	r24, r22
    1320:	9a a3       	std	Y+34, r25	; 0x22
    1322:	89 a3       	std	Y+33, r24	; 0x21
    1324:	0f c0       	rjmp	.+30     	; 0x1344 <step_1_set_password+0xf2>
    1326:	88 ec       	ldi	r24, 0xC8	; 200
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	98 a3       	std	Y+32, r25	; 0x20
    132c:	8f 8f       	std	Y+31, r24	; 0x1f
    132e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1330:	98 a1       	ldd	r25, Y+32	; 0x20
    1332:	01 97       	sbiw	r24, 0x01	; 1
    1334:	f1 f7       	brne	.-4      	; 0x1332 <step_1_set_password+0xe0>
    1336:	98 a3       	std	Y+32, r25	; 0x20
    1338:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    133a:	89 a1       	ldd	r24, Y+33	; 0x21
    133c:	9a a1       	ldd	r25, Y+34	; 0x22
    133e:	01 97       	sbiw	r24, 0x01	; 1
    1340:	9a a3       	std	Y+34, r25	; 0x22
    1342:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1344:	89 a1       	ldd	r24, Y+33	; 0x21
    1346:	9a a1       	ldd	r25, Y+34	; 0x22
    1348:	00 97       	sbiw	r24, 0x00	; 0
    134a:	69 f7       	brne	.-38     	; 0x1326 <step_1_set_password+0xd4>
    134c:	14 c0       	rjmp	.+40     	; 0x1376 <step_1_set_password+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    134e:	6b a1       	ldd	r22, Y+35	; 0x23
    1350:	7c a1       	ldd	r23, Y+36	; 0x24
    1352:	8d a1       	ldd	r24, Y+37	; 0x25
    1354:	9e a1       	ldd	r25, Y+38	; 0x26
    1356:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    135a:	dc 01       	movw	r26, r24
    135c:	cb 01       	movw	r24, r22
    135e:	9a a3       	std	Y+34, r25	; 0x22
    1360:	89 a3       	std	Y+33, r24	; 0x21
    1362:	89 a1       	ldd	r24, Y+33	; 0x21
    1364:	9a a1       	ldd	r25, Y+34	; 0x22
    1366:	9e 8f       	std	Y+30, r25	; 0x1e
    1368:	8d 8f       	std	Y+29, r24	; 0x1d
    136a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    136c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    136e:	01 97       	sbiw	r24, 0x01	; 1
    1370:	f1 f7       	brne	.-4      	; 0x136e <step_1_set_password+0x11c>
    1372:	9e 8f       	std	Y+30, r25	; 0x1e
    1374:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(300); /* Press time */

			if(pressed_button=='/') /*when the user wants to delete*/
    1376:	8c a9       	ldd	r24, Y+52	; 0x34
    1378:	8f 32       	cpi	r24, 0x2F	; 47
    137a:	f1 f4       	brne	.+60     	; 0x13b8 <step_1_set_password+0x166>
			{
				if(i!=0) /*if i=0 then there is nothing*/
    137c:	8a a9       	ldd	r24, Y+50	; 0x32
    137e:	9b a9       	ldd	r25, Y+51	; 0x33
    1380:	00 97       	sbiw	r24, 0x00	; 0
    1382:	a9 f1       	breq	.+106    	; 0x13ee <step_1_set_password+0x19c>
				{
					i--;
    1384:	8a a9       	ldd	r24, Y+50	; 0x32
    1386:	9b a9       	ldd	r25, Y+51	; 0x33
    1388:	01 97       	sbiw	r24, 0x01	; 1
    138a:	9b ab       	std	Y+51, r25	; 0x33
    138c:	8a ab       	std	Y+50, r24	; 0x32
					g_pass[i]=100;
    138e:	8a a9       	ldd	r24, Y+50	; 0x32
    1390:	9b a9       	ldd	r25, Y+51	; 0x33
    1392:	fc 01       	movw	r30, r24
    1394:	e1 5e       	subi	r30, 0xE1	; 225
    1396:	fe 4f       	sbci	r31, 0xFE	; 254
    1398:	84 e6       	ldi	r24, 0x64	; 100
    139a:	80 83       	st	Z, r24
					LCD_moveCursor(1,i);
    139c:	9a a9       	ldd	r25, Y+50	; 0x32
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	69 2f       	mov	r22, r25
    13a2:	0e 94 1d 25 	call	0x4a3a	; 0x4a3a <LCD_moveCursor>
					LCD_writeChar(' ');
    13a6:	80 e2       	ldi	r24, 0x20	; 32
    13a8:	0e 94 77 20 	call	0x40ee	; 0x40ee <LCD_writeChar>
					LCD_moveCursor(1,i);
    13ac:	9a a9       	ldd	r25, Y+50	; 0x32
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	69 2f       	mov	r22, r25
    13b2:	0e 94 1d 25 	call	0x4a3a	; 0x4a3a <LCD_moveCursor>
    13b6:	1b c0       	rjmp	.+54     	; 0x13ee <step_1_set_password+0x19c>
				}
			}else if(pressed_button == ' ' || pressed_button == '='
    13b8:	8c a9       	ldd	r24, Y+52	; 0x34
    13ba:	80 32       	cpi	r24, 0x20	; 32
    13bc:	c1 f0       	breq	.+48     	; 0x13ee <step_1_set_password+0x19c>
    13be:	8c a9       	ldd	r24, Y+52	; 0x34
    13c0:	8d 33       	cpi	r24, 0x3D	; 61
    13c2:	a9 f0       	breq	.+42     	; 0x13ee <step_1_set_password+0x19c>
    13c4:	8c a9       	ldd	r24, Y+52	; 0x34
    13c6:	8b 32       	cpi	r24, 0x2B	; 43
    13c8:	91 f0       	breq	.+36     	; 0x13ee <step_1_set_password+0x19c>
    13ca:	8c a9       	ldd	r24, Y+52	; 0x34
    13cc:	8d 32       	cpi	r24, 0x2D	; 45
    13ce:	79 f0       	breq	.+30     	; 0x13ee <step_1_set_password+0x19c>
			{
				/*Do nothing*/
			}
			else
			{
				g_pass[i]=pressed_button;
    13d0:	8a a9       	ldd	r24, Y+50	; 0x32
    13d2:	9b a9       	ldd	r25, Y+51	; 0x33
    13d4:	fc 01       	movw	r30, r24
    13d6:	e1 5e       	subi	r30, 0xE1	; 225
    13d8:	fe 4f       	sbci	r31, 0xFE	; 254
    13da:	8c a9       	ldd	r24, Y+52	; 0x34
    13dc:	80 83       	st	Z, r24
				//				LCD_integerToString(g_pass[i]);
				LCD_writeChar('*');
    13de:	8a e2       	ldi	r24, 0x2A	; 42
    13e0:	0e 94 77 20 	call	0x40ee	; 0x40ee <LCD_writeChar>
				i++;
    13e4:	8a a9       	ldd	r24, Y+50	; 0x32
    13e6:	9b a9       	ldd	r25, Y+51	; 0x33
    13e8:	01 96       	adiw	r24, 0x01	; 1
    13ea:	9b ab       	std	Y+51, r25	; 0x33
    13ec:	8a ab       	std	Y+50, r24	; 0x32
		LCD_sendCommand(LCD_CURSOR_ON);
		LCD_moveCursor(1,0);

		uint8 pressed_button;
		int i;
		for(i=0;i<PASS_SIZE;)
    13ee:	8a a9       	ldd	r24, Y+50	; 0x32
    13f0:	9b a9       	ldd	r25, Y+51	; 0x33
    13f2:	85 30       	cpi	r24, 0x05	; 5
    13f4:	91 05       	cpc	r25, r1
    13f6:	0c f4       	brge	.+2      	; 0x13fa <step_1_set_password+0x1a8>
    13f8:	49 cf       	rjmp	.-366    	; 0x128c <step_1_set_password+0x3a>
		}


		uint8 re_pass[5];  /*An array contains the re_enterd password by user*/

		LCD_clearScreen();
    13fa:	0e 94 83 25 	call	0x4b06	; 0x4b06 <LCD_clearScreen>
		LCD_writeString("PLZ re_enter the");
    13fe:	80 e7       	ldi	r24, 0x70	; 112
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	0e 94 f2 24 	call	0x49e4	; 0x49e4 <LCD_writeString>
		LCD_moveCursor(1,0);
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	60 e0       	ldi	r22, 0x00	; 0
    140a:	0e 94 1d 25 	call	0x4a3a	; 0x4a3a <LCD_moveCursor>
		LCD_writeString("same pass:");
    140e:	81 e8       	ldi	r24, 0x81	; 129
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	0e 94 f2 24 	call	0x49e4	; 0x49e4 <LCD_writeString>

		for(int j=0;j<PASS_SIZE;)
    1416:	18 aa       	std	Y+48, r1	; 0x30
    1418:	1f a6       	std	Y+47, r1	; 0x2f
    141a:	bd c0       	rjmp	.+378    	; 0x1596 <step_1_set_password+0x344>
		{
			pressed_button=KEYPAD_getPressedKey();
    141c:	0e 94 55 19 	call	0x32aa	; 0x32aa <KEYPAD_getPressedKey>
    1420:	8c ab       	std	Y+52, r24	; 0x34
    1422:	80 e0       	ldi	r24, 0x00	; 0
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	a6 e9       	ldi	r26, 0x96	; 150
    1428:	b3 e4       	ldi	r27, 0x43	; 67
    142a:	89 8f       	std	Y+25, r24	; 0x19
    142c:	9a 8f       	std	Y+26, r25	; 0x1a
    142e:	ab 8f       	std	Y+27, r26	; 0x1b
    1430:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1432:	69 8d       	ldd	r22, Y+25	; 0x19
    1434:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1436:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1438:	9c 8d       	ldd	r25, Y+28	; 0x1c
    143a:	20 e0       	ldi	r18, 0x00	; 0
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	4a ef       	ldi	r20, 0xFA	; 250
    1440:	54 e4       	ldi	r21, 0x44	; 68
    1442:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1446:	dc 01       	movw	r26, r24
    1448:	cb 01       	movw	r24, r22
    144a:	8d 8b       	std	Y+21, r24	; 0x15
    144c:	9e 8b       	std	Y+22, r25	; 0x16
    144e:	af 8b       	std	Y+23, r26	; 0x17
    1450:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1452:	6d 89       	ldd	r22, Y+21	; 0x15
    1454:	7e 89       	ldd	r23, Y+22	; 0x16
    1456:	8f 89       	ldd	r24, Y+23	; 0x17
    1458:	98 8d       	ldd	r25, Y+24	; 0x18
    145a:	20 e0       	ldi	r18, 0x00	; 0
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	40 e8       	ldi	r20, 0x80	; 128
    1460:	5f e3       	ldi	r21, 0x3F	; 63
    1462:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1466:	88 23       	and	r24, r24
    1468:	2c f4       	brge	.+10     	; 0x1474 <step_1_set_password+0x222>
		__ticks = 1;
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	9c 8b       	std	Y+20, r25	; 0x14
    1470:	8b 8b       	std	Y+19, r24	; 0x13
    1472:	3f c0       	rjmp	.+126    	; 0x14f2 <step_1_set_password+0x2a0>
	else if (__tmp > 65535)
    1474:	6d 89       	ldd	r22, Y+21	; 0x15
    1476:	7e 89       	ldd	r23, Y+22	; 0x16
    1478:	8f 89       	ldd	r24, Y+23	; 0x17
    147a:	98 8d       	ldd	r25, Y+24	; 0x18
    147c:	20 e0       	ldi	r18, 0x00	; 0
    147e:	3f ef       	ldi	r19, 0xFF	; 255
    1480:	4f e7       	ldi	r20, 0x7F	; 127
    1482:	57 e4       	ldi	r21, 0x47	; 71
    1484:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1488:	18 16       	cp	r1, r24
    148a:	4c f5       	brge	.+82     	; 0x14de <step_1_set_password+0x28c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    148c:	69 8d       	ldd	r22, Y+25	; 0x19
    148e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1490:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1492:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1494:	20 e0       	ldi	r18, 0x00	; 0
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	40 e2       	ldi	r20, 0x20	; 32
    149a:	51 e4       	ldi	r21, 0x41	; 65
    149c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14a0:	dc 01       	movw	r26, r24
    14a2:	cb 01       	movw	r24, r22
    14a4:	bc 01       	movw	r22, r24
    14a6:	cd 01       	movw	r24, r26
    14a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ac:	dc 01       	movw	r26, r24
    14ae:	cb 01       	movw	r24, r22
    14b0:	9c 8b       	std	Y+20, r25	; 0x14
    14b2:	8b 8b       	std	Y+19, r24	; 0x13
    14b4:	0f c0       	rjmp	.+30     	; 0x14d4 <step_1_set_password+0x282>
    14b6:	88 ec       	ldi	r24, 0xC8	; 200
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	9a 8b       	std	Y+18, r25	; 0x12
    14bc:	89 8b       	std	Y+17, r24	; 0x11
    14be:	89 89       	ldd	r24, Y+17	; 0x11
    14c0:	9a 89       	ldd	r25, Y+18	; 0x12
    14c2:	01 97       	sbiw	r24, 0x01	; 1
    14c4:	f1 f7       	brne	.-4      	; 0x14c2 <step_1_set_password+0x270>
    14c6:	9a 8b       	std	Y+18, r25	; 0x12
    14c8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14ca:	8b 89       	ldd	r24, Y+19	; 0x13
    14cc:	9c 89       	ldd	r25, Y+20	; 0x14
    14ce:	01 97       	sbiw	r24, 0x01	; 1
    14d0:	9c 8b       	std	Y+20, r25	; 0x14
    14d2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14d4:	8b 89       	ldd	r24, Y+19	; 0x13
    14d6:	9c 89       	ldd	r25, Y+20	; 0x14
    14d8:	00 97       	sbiw	r24, 0x00	; 0
    14da:	69 f7       	brne	.-38     	; 0x14b6 <step_1_set_password+0x264>
    14dc:	14 c0       	rjmp	.+40     	; 0x1506 <step_1_set_password+0x2b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14de:	6d 89       	ldd	r22, Y+21	; 0x15
    14e0:	7e 89       	ldd	r23, Y+22	; 0x16
    14e2:	8f 89       	ldd	r24, Y+23	; 0x17
    14e4:	98 8d       	ldd	r25, Y+24	; 0x18
    14e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ea:	dc 01       	movw	r26, r24
    14ec:	cb 01       	movw	r24, r22
    14ee:	9c 8b       	std	Y+20, r25	; 0x14
    14f0:	8b 8b       	std	Y+19, r24	; 0x13
    14f2:	8b 89       	ldd	r24, Y+19	; 0x13
    14f4:	9c 89       	ldd	r25, Y+20	; 0x14
    14f6:	98 8b       	std	Y+16, r25	; 0x10
    14f8:	8f 87       	std	Y+15, r24	; 0x0f
    14fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    14fc:	98 89       	ldd	r25, Y+16	; 0x10
    14fe:	01 97       	sbiw	r24, 0x01	; 1
    1500:	f1 f7       	brne	.-4      	; 0x14fe <step_1_set_password+0x2ac>
    1502:	98 8b       	std	Y+16, r25	; 0x10
    1504:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(300); /* Press time */
			if(pressed_button=='/')
    1506:	8c a9       	ldd	r24, Y+52	; 0x34
    1508:	8f 32       	cpi	r24, 0x2F	; 47
    150a:	29 f5       	brne	.+74     	; 0x1556 <step_1_set_password+0x304>
			{
				if(j!=0)/*when the user wants to delete*/
    150c:	8f a5       	ldd	r24, Y+47	; 0x2f
    150e:	98 a9       	ldd	r25, Y+48	; 0x30
    1510:	00 97       	sbiw	r24, 0x00	; 0
    1512:	09 f4       	brne	.+2      	; 0x1516 <step_1_set_password+0x2c4>
    1514:	40 c0       	rjmp	.+128    	; 0x1596 <step_1_set_password+0x344>
				{
					j--;
    1516:	8f a5       	ldd	r24, Y+47	; 0x2f
    1518:	98 a9       	ldd	r25, Y+48	; 0x30
    151a:	01 97       	sbiw	r24, 0x01	; 1
    151c:	98 ab       	std	Y+48, r25	; 0x30
    151e:	8f a7       	std	Y+47, r24	; 0x2f
					re_pass[j]=100;
    1520:	2f a5       	ldd	r18, Y+47	; 0x2f
    1522:	38 a9       	ldd	r19, Y+48	; 0x30
    1524:	ce 01       	movw	r24, r28
    1526:	c6 96       	adiw	r24, 0x36	; 54
    1528:	fc 01       	movw	r30, r24
    152a:	e2 0f       	add	r30, r18
    152c:	f3 1f       	adc	r31, r19
    152e:	84 e6       	ldi	r24, 0x64	; 100
    1530:	80 83       	st	Z, r24
					LCD_moveCursor(1,10+j);
    1532:	8f a5       	ldd	r24, Y+47	; 0x2f
    1534:	98 2f       	mov	r25, r24
    1536:	96 5f       	subi	r25, 0xF6	; 246
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	69 2f       	mov	r22, r25
    153c:	0e 94 1d 25 	call	0x4a3a	; 0x4a3a <LCD_moveCursor>
					LCD_writeChar(' ');
    1540:	80 e2       	ldi	r24, 0x20	; 32
    1542:	0e 94 77 20 	call	0x40ee	; 0x40ee <LCD_writeChar>
					LCD_moveCursor(1,10+j);
    1546:	8f a5       	ldd	r24, Y+47	; 0x2f
    1548:	98 2f       	mov	r25, r24
    154a:	96 5f       	subi	r25, 0xF6	; 246
    154c:	81 e0       	ldi	r24, 0x01	; 1
    154e:	69 2f       	mov	r22, r25
    1550:	0e 94 1d 25 	call	0x4a3a	; 0x4a3a <LCD_moveCursor>
    1554:	20 c0       	rjmp	.+64     	; 0x1596 <step_1_set_password+0x344>
				}
			}else if(pressed_button=='*')
    1556:	8c a9       	ldd	r24, Y+52	; 0x34
    1558:	8a 32       	cpi	r24, 0x2A	; 42
    155a:	19 f1       	breq	.+70     	; 0x15a2 <step_1_set_password+0x350>
			{
				break;
			}else if(pressed_button == ' ' || pressed_button == '='
    155c:	8c a9       	ldd	r24, Y+52	; 0x34
    155e:	80 32       	cpi	r24, 0x20	; 32
    1560:	d1 f0       	breq	.+52     	; 0x1596 <step_1_set_password+0x344>
    1562:	8c a9       	ldd	r24, Y+52	; 0x34
    1564:	8d 33       	cpi	r24, 0x3D	; 61
    1566:	b9 f0       	breq	.+46     	; 0x1596 <step_1_set_password+0x344>
    1568:	8c a9       	ldd	r24, Y+52	; 0x34
    156a:	8b 32       	cpi	r24, 0x2B	; 43
    156c:	a1 f0       	breq	.+40     	; 0x1596 <step_1_set_password+0x344>
    156e:	8c a9       	ldd	r24, Y+52	; 0x34
    1570:	8d 32       	cpi	r24, 0x2D	; 45
    1572:	89 f0       	breq	.+34     	; 0x1596 <step_1_set_password+0x344>
			{
				/*Do nothing*/
			}
			else
			{
				re_pass[j]=pressed_button;
    1574:	2f a5       	ldd	r18, Y+47	; 0x2f
    1576:	38 a9       	ldd	r19, Y+48	; 0x30
    1578:	ce 01       	movw	r24, r28
    157a:	c6 96       	adiw	r24, 0x36	; 54
    157c:	fc 01       	movw	r30, r24
    157e:	e2 0f       	add	r30, r18
    1580:	f3 1f       	adc	r31, r19
    1582:	8c a9       	ldd	r24, Y+52	; 0x34
    1584:	80 83       	st	Z, r24
				//				LCD_integerToString(re_pass[j]);
				LCD_writeChar('*');
    1586:	8a e2       	ldi	r24, 0x2A	; 42
    1588:	0e 94 77 20 	call	0x40ee	; 0x40ee <LCD_writeChar>
				j++;
    158c:	8f a5       	ldd	r24, Y+47	; 0x2f
    158e:	98 a9       	ldd	r25, Y+48	; 0x30
    1590:	01 96       	adiw	r24, 0x01	; 1
    1592:	98 ab       	std	Y+48, r25	; 0x30
    1594:	8f a7       	std	Y+47, r24	; 0x2f
		LCD_clearScreen();
		LCD_writeString("PLZ re_enter the");
		LCD_moveCursor(1,0);
		LCD_writeString("same pass:");

		for(int j=0;j<PASS_SIZE;)
    1596:	8f a5       	ldd	r24, Y+47	; 0x2f
    1598:	98 a9       	ldd	r25, Y+48	; 0x30
    159a:	85 30       	cpi	r24, 0x05	; 5
    159c:	91 05       	cpc	r25, r1
    159e:	0c f4       	brge	.+2      	; 0x15a2 <step_1_set_password+0x350>
    15a0:	3d cf       	rjmp	.-390    	; 0x141c <step_1_set_password+0x1ca>
				j++;
			}
		}


		LCD_clearScreen();
    15a2:	0e 94 83 25 	call	0x4b06	; 0x4b06 <LCD_clearScreen>

		boolean check_pass=TRUE;
    15a6:	81 e0       	ldi	r24, 0x01	; 1
    15a8:	89 ab       	std	Y+49, r24	; 0x31
		/*check if two passwords are same */
		for(int j=0;j<i;j++)
    15aa:	1e a6       	std	Y+46, r1	; 0x2e
    15ac:	1d a6       	std	Y+45, r1	; 0x2d
    15ae:	17 c0       	rjmp	.+46     	; 0x15de <step_1_set_password+0x38c>
		{
			if(g_pass[j] != re_pass[j])
    15b0:	8d a5       	ldd	r24, Y+45	; 0x2d
    15b2:	9e a5       	ldd	r25, Y+46	; 0x2e
    15b4:	fc 01       	movw	r30, r24
    15b6:	e1 5e       	subi	r30, 0xE1	; 225
    15b8:	fe 4f       	sbci	r31, 0xFE	; 254
    15ba:	40 81       	ld	r20, Z
    15bc:	2d a5       	ldd	r18, Y+45	; 0x2d
    15be:	3e a5       	ldd	r19, Y+46	; 0x2e
    15c0:	ce 01       	movw	r24, r28
    15c2:	c6 96       	adiw	r24, 0x36	; 54
    15c4:	fc 01       	movw	r30, r24
    15c6:	e2 0f       	add	r30, r18
    15c8:	f3 1f       	adc	r31, r19
    15ca:	80 81       	ld	r24, Z
    15cc:	48 17       	cp	r20, r24
    15ce:	11 f0       	breq	.+4      	; 0x15d4 <step_1_set_password+0x382>
			{
				check_pass = FALSE;
    15d0:	19 aa       	std	Y+49, r1	; 0x31
    15d2:	0c c0       	rjmp	.+24     	; 0x15ec <step_1_set_password+0x39a>

		LCD_clearScreen();

		boolean check_pass=TRUE;
		/*check if two passwords are same */
		for(int j=0;j<i;j++)
    15d4:	8d a5       	ldd	r24, Y+45	; 0x2d
    15d6:	9e a5       	ldd	r25, Y+46	; 0x2e
    15d8:	01 96       	adiw	r24, 0x01	; 1
    15da:	9e a7       	std	Y+46, r25	; 0x2e
    15dc:	8d a7       	std	Y+45, r24	; 0x2d
    15de:	2d a5       	ldd	r18, Y+45	; 0x2d
    15e0:	3e a5       	ldd	r19, Y+46	; 0x2e
    15e2:	8a a9       	ldd	r24, Y+50	; 0x32
    15e4:	9b a9       	ldd	r25, Y+51	; 0x33
    15e6:	28 17       	cp	r18, r24
    15e8:	39 07       	cpc	r19, r25
    15ea:	14 f3       	brlt	.-60     	; 0x15b0 <step_1_set_password+0x35e>
				break;
			}
		}


		if(check_pass)
    15ec:	89 a9       	ldd	r24, Y+49	; 0x31
    15ee:	88 23       	and	r24, r24
    15f0:	11 f0       	breq	.+4      	; 0x15f6 <step_1_set_password+0x3a4>
			again=FALSE; /*if the two passwords are not same will loop again*/
    15f2:	1d aa       	std	Y+53, r1	; 0x35
    15f4:	02 c0       	rjmp	.+4      	; 0x15fa <step_1_set_password+0x3a8>
		else
			again=TRUE;  /*if the two passwords are same will exit from loop*/
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	8d ab       	std	Y+53, r24	; 0x35
 ***********************************************************************/
void step_1_set_password(void)
{
	boolean again=TRUE; /*if this variable is true it will loop till it become false*/

	while(again) /*when again is false this means that the two entered passwords are same*/
    15fa:	8d a9       	ldd	r24, Y+53	; 0x35
    15fc:	88 23       	and	r24, r24
    15fe:	09 f0       	breq	.+2      	; 0x1602 <step_1_set_password+0x3b0>
    1600:	35 ce       	rjmp	.-918    	; 0x126c <step_1_set_password+0x1a>

	}

	/*At this point the password is similar to re_password so i will save it in External eeprom*/

	UART_sendByte(SEND_PASSWORD); /*tell the MC2 that he will send a password*/
    1602:	8e ef       	ldi	r24, 0xFE	; 254
    1604:	0e 94 2b 07 	call	0xe56	; 0xe56 <UART_sendByte>

	for(int j=0;j<PASS_SIZE;j++)
    1608:	1c a6       	std	Y+44, r1	; 0x2c
    160a:	1b a6       	std	Y+43, r1	; 0x2b
    160c:	7f c0       	rjmp	.+254    	; 0x170c <step_1_set_password+0x4ba>
	{
		UART_sendByte(g_pass[j]); /*sending the password to MC2*/
    160e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1610:	9c a5       	ldd	r25, Y+44	; 0x2c
    1612:	fc 01       	movw	r30, r24
    1614:	e1 5e       	subi	r30, 0xE1	; 225
    1616:	fe 4f       	sbci	r31, 0xFE	; 254
    1618:	80 81       	ld	r24, Z
    161a:	0e 94 2b 07 	call	0xe56	; 0xe56 <UART_sendByte>
    161e:	80 e0       	ldi	r24, 0x00	; 0
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	a0 e2       	ldi	r26, 0x20	; 32
    1624:	b1 e4       	ldi	r27, 0x41	; 65
    1626:	8b 87       	std	Y+11, r24	; 0x0b
    1628:	9c 87       	std	Y+12, r25	; 0x0c
    162a:	ad 87       	std	Y+13, r26	; 0x0d
    162c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    162e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1630:	7c 85       	ldd	r23, Y+12	; 0x0c
    1632:	8d 85       	ldd	r24, Y+13	; 0x0d
    1634:	9e 85       	ldd	r25, Y+14	; 0x0e
    1636:	20 e0       	ldi	r18, 0x00	; 0
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	4a ef       	ldi	r20, 0xFA	; 250
    163c:	54 e4       	ldi	r21, 0x44	; 68
    163e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1642:	dc 01       	movw	r26, r24
    1644:	cb 01       	movw	r24, r22
    1646:	8f 83       	std	Y+7, r24	; 0x07
    1648:	98 87       	std	Y+8, r25	; 0x08
    164a:	a9 87       	std	Y+9, r26	; 0x09
    164c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    164e:	6f 81       	ldd	r22, Y+7	; 0x07
    1650:	78 85       	ldd	r23, Y+8	; 0x08
    1652:	89 85       	ldd	r24, Y+9	; 0x09
    1654:	9a 85       	ldd	r25, Y+10	; 0x0a
    1656:	20 e0       	ldi	r18, 0x00	; 0
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	40 e8       	ldi	r20, 0x80	; 128
    165c:	5f e3       	ldi	r21, 0x3F	; 63
    165e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1662:	88 23       	and	r24, r24
    1664:	2c f4       	brge	.+10     	; 0x1670 <step_1_set_password+0x41e>
		__ticks = 1;
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	9e 83       	std	Y+6, r25	; 0x06
    166c:	8d 83       	std	Y+5, r24	; 0x05
    166e:	3f c0       	rjmp	.+126    	; 0x16ee <step_1_set_password+0x49c>
	else if (__tmp > 65535)
    1670:	6f 81       	ldd	r22, Y+7	; 0x07
    1672:	78 85       	ldd	r23, Y+8	; 0x08
    1674:	89 85       	ldd	r24, Y+9	; 0x09
    1676:	9a 85       	ldd	r25, Y+10	; 0x0a
    1678:	20 e0       	ldi	r18, 0x00	; 0
    167a:	3f ef       	ldi	r19, 0xFF	; 255
    167c:	4f e7       	ldi	r20, 0x7F	; 127
    167e:	57 e4       	ldi	r21, 0x47	; 71
    1680:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1684:	18 16       	cp	r1, r24
    1686:	4c f5       	brge	.+82     	; 0x16da <step_1_set_password+0x488>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1688:	6b 85       	ldd	r22, Y+11	; 0x0b
    168a:	7c 85       	ldd	r23, Y+12	; 0x0c
    168c:	8d 85       	ldd	r24, Y+13	; 0x0d
    168e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1690:	20 e0       	ldi	r18, 0x00	; 0
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	40 e2       	ldi	r20, 0x20	; 32
    1696:	51 e4       	ldi	r21, 0x41	; 65
    1698:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    169c:	dc 01       	movw	r26, r24
    169e:	cb 01       	movw	r24, r22
    16a0:	bc 01       	movw	r22, r24
    16a2:	cd 01       	movw	r24, r26
    16a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16a8:	dc 01       	movw	r26, r24
    16aa:	cb 01       	movw	r24, r22
    16ac:	9e 83       	std	Y+6, r25	; 0x06
    16ae:	8d 83       	std	Y+5, r24	; 0x05
    16b0:	0f c0       	rjmp	.+30     	; 0x16d0 <step_1_set_password+0x47e>
    16b2:	88 ec       	ldi	r24, 0xC8	; 200
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	9c 83       	std	Y+4, r25	; 0x04
    16b8:	8b 83       	std	Y+3, r24	; 0x03
    16ba:	8b 81       	ldd	r24, Y+3	; 0x03
    16bc:	9c 81       	ldd	r25, Y+4	; 0x04
    16be:	01 97       	sbiw	r24, 0x01	; 1
    16c0:	f1 f7       	brne	.-4      	; 0x16be <step_1_set_password+0x46c>
    16c2:	9c 83       	std	Y+4, r25	; 0x04
    16c4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16c6:	8d 81       	ldd	r24, Y+5	; 0x05
    16c8:	9e 81       	ldd	r25, Y+6	; 0x06
    16ca:	01 97       	sbiw	r24, 0x01	; 1
    16cc:	9e 83       	std	Y+6, r25	; 0x06
    16ce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16d0:	8d 81       	ldd	r24, Y+5	; 0x05
    16d2:	9e 81       	ldd	r25, Y+6	; 0x06
    16d4:	00 97       	sbiw	r24, 0x00	; 0
    16d6:	69 f7       	brne	.-38     	; 0x16b2 <step_1_set_password+0x460>
    16d8:	14 c0       	rjmp	.+40     	; 0x1702 <step_1_set_password+0x4b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16da:	6f 81       	ldd	r22, Y+7	; 0x07
    16dc:	78 85       	ldd	r23, Y+8	; 0x08
    16de:	89 85       	ldd	r24, Y+9	; 0x09
    16e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    16e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16e6:	dc 01       	movw	r26, r24
    16e8:	cb 01       	movw	r24, r22
    16ea:	9e 83       	std	Y+6, r25	; 0x06
    16ec:	8d 83       	std	Y+5, r24	; 0x05
    16ee:	8d 81       	ldd	r24, Y+5	; 0x05
    16f0:	9e 81       	ldd	r25, Y+6	; 0x06
    16f2:	9a 83       	std	Y+2, r25	; 0x02
    16f4:	89 83       	std	Y+1, r24	; 0x01
    16f6:	89 81       	ldd	r24, Y+1	; 0x01
    16f8:	9a 81       	ldd	r25, Y+2	; 0x02
    16fa:	01 97       	sbiw	r24, 0x01	; 1
    16fc:	f1 f7       	brne	.-4      	; 0x16fa <step_1_set_password+0x4a8>
    16fe:	9a 83       	std	Y+2, r25	; 0x02
    1700:	89 83       	std	Y+1, r24	; 0x01

	/*At this point the password is similar to re_password so i will save it in External eeprom*/

	UART_sendByte(SEND_PASSWORD); /*tell the MC2 that he will send a password*/

	for(int j=0;j<PASS_SIZE;j++)
    1702:	8b a5       	ldd	r24, Y+43	; 0x2b
    1704:	9c a5       	ldd	r25, Y+44	; 0x2c
    1706:	01 96       	adiw	r24, 0x01	; 1
    1708:	9c a7       	std	Y+44, r25	; 0x2c
    170a:	8b a7       	std	Y+43, r24	; 0x2b
    170c:	8b a5       	ldd	r24, Y+43	; 0x2b
    170e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1710:	85 30       	cpi	r24, 0x05	; 5
    1712:	91 05       	cpc	r25, r1
    1714:	0c f4       	brge	.+2      	; 0x1718 <step_1_set_password+0x4c6>
    1716:	7b cf       	rjmp	.-266    	; 0x160e <step_1_set_password+0x3bc>
	{
		UART_sendByte(g_pass[j]); /*sending the password to MC2*/
		_delay_ms(10);
	}

}
    1718:	ea 96       	adiw	r28, 0x3a	; 58
    171a:	0f b6       	in	r0, 0x3f	; 63
    171c:	f8 94       	cli
    171e:	de bf       	out	0x3e, r29	; 62
    1720:	0f be       	out	0x3f, r0	; 63
    1722:	cd bf       	out	0x3d, r28	; 61
    1724:	cf 91       	pop	r28
    1726:	df 91       	pop	r29
    1728:	08 95       	ret

0000172a <take_password_and_cheak_it>:
 *
 * Args   : void
 * return : boolean
 ***********************************************************************/
boolean take_password_and_cheak_it(void)
{
    172a:	df 93       	push	r29
    172c:	cf 93       	push	r28
    172e:	cd b7       	in	r28, 0x3d	; 61
    1730:	de b7       	in	r29, 0x3e	; 62
    1732:	e5 97       	sbiw	r28, 0x35	; 53
    1734:	0f b6       	in	r0, 0x3f	; 63
    1736:	f8 94       	cli
    1738:	de bf       	out	0x3e, r29	; 62
    173a:	0f be       	out	0x3f, r0	; 63
    173c:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    173e:	0e 94 83 25 	call	0x4b06	; 0x4b06 <LCD_clearScreen>
	LCD_writeString("PLZ enter pass:");
    1742:	80 e6       	ldi	r24, 0x60	; 96
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	0e 94 f2 24 	call	0x49e4	; 0x49e4 <LCD_writeString>
	LCD_sendCommand(LCD_CURSOR_ON);
    174a:	8e e0       	ldi	r24, 0x0E	; 14
    174c:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <LCD_sendCommand>
	LCD_moveCursor(1,0);
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	60 e0       	ldi	r22, 0x00	; 0
    1754:	0e 94 1d 25 	call	0x4a3a	; 0x4a3a <LCD_moveCursor>

	uint8 pressed_button;
	uint8 pass[5];
	uint8 pass_num=0;
    1758:	1e a6       	std	Y+46, r1	; 0x2e
	while(1) /*infinity loop till the user press enter button '*' */
	{
		pressed_button=KEYPAD_getPressedKey();
    175a:	0e 94 55 19 	call	0x32aa	; 0x32aa <KEYPAD_getPressedKey>
    175e:	8f a7       	std	Y+47, r24	; 0x2f
    1760:	80 e0       	ldi	r24, 0x00	; 0
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	a6 e9       	ldi	r26, 0x96	; 150
    1766:	b3 e4       	ldi	r27, 0x43	; 67
    1768:	8f a3       	std	Y+39, r24	; 0x27
    176a:	98 a7       	std	Y+40, r25	; 0x28
    176c:	a9 a7       	std	Y+41, r26	; 0x29
    176e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1770:	6f a1       	ldd	r22, Y+39	; 0x27
    1772:	78 a5       	ldd	r23, Y+40	; 0x28
    1774:	89 a5       	ldd	r24, Y+41	; 0x29
    1776:	9a a5       	ldd	r25, Y+42	; 0x2a
    1778:	20 e0       	ldi	r18, 0x00	; 0
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	4a ef       	ldi	r20, 0xFA	; 250
    177e:	54 e4       	ldi	r21, 0x44	; 68
    1780:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1784:	dc 01       	movw	r26, r24
    1786:	cb 01       	movw	r24, r22
    1788:	8b a3       	std	Y+35, r24	; 0x23
    178a:	9c a3       	std	Y+36, r25	; 0x24
    178c:	ad a3       	std	Y+37, r26	; 0x25
    178e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1790:	6b a1       	ldd	r22, Y+35	; 0x23
    1792:	7c a1       	ldd	r23, Y+36	; 0x24
    1794:	8d a1       	ldd	r24, Y+37	; 0x25
    1796:	9e a1       	ldd	r25, Y+38	; 0x26
    1798:	20 e0       	ldi	r18, 0x00	; 0
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	40 e8       	ldi	r20, 0x80	; 128
    179e:	5f e3       	ldi	r21, 0x3F	; 63
    17a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17a4:	88 23       	and	r24, r24
    17a6:	2c f4       	brge	.+10     	; 0x17b2 <take_password_and_cheak_it+0x88>
		__ticks = 1;
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	9a a3       	std	Y+34, r25	; 0x22
    17ae:	89 a3       	std	Y+33, r24	; 0x21
    17b0:	3f c0       	rjmp	.+126    	; 0x1830 <take_password_and_cheak_it+0x106>
	else if (__tmp > 65535)
    17b2:	6b a1       	ldd	r22, Y+35	; 0x23
    17b4:	7c a1       	ldd	r23, Y+36	; 0x24
    17b6:	8d a1       	ldd	r24, Y+37	; 0x25
    17b8:	9e a1       	ldd	r25, Y+38	; 0x26
    17ba:	20 e0       	ldi	r18, 0x00	; 0
    17bc:	3f ef       	ldi	r19, 0xFF	; 255
    17be:	4f e7       	ldi	r20, 0x7F	; 127
    17c0:	57 e4       	ldi	r21, 0x47	; 71
    17c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17c6:	18 16       	cp	r1, r24
    17c8:	4c f5       	brge	.+82     	; 0x181c <take_password_and_cheak_it+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17ca:	6f a1       	ldd	r22, Y+39	; 0x27
    17cc:	78 a5       	ldd	r23, Y+40	; 0x28
    17ce:	89 a5       	ldd	r24, Y+41	; 0x29
    17d0:	9a a5       	ldd	r25, Y+42	; 0x2a
    17d2:	20 e0       	ldi	r18, 0x00	; 0
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	40 e2       	ldi	r20, 0x20	; 32
    17d8:	51 e4       	ldi	r21, 0x41	; 65
    17da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17de:	dc 01       	movw	r26, r24
    17e0:	cb 01       	movw	r24, r22
    17e2:	bc 01       	movw	r22, r24
    17e4:	cd 01       	movw	r24, r26
    17e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ea:	dc 01       	movw	r26, r24
    17ec:	cb 01       	movw	r24, r22
    17ee:	9a a3       	std	Y+34, r25	; 0x22
    17f0:	89 a3       	std	Y+33, r24	; 0x21
    17f2:	0f c0       	rjmp	.+30     	; 0x1812 <take_password_and_cheak_it+0xe8>
    17f4:	88 ec       	ldi	r24, 0xC8	; 200
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	98 a3       	std	Y+32, r25	; 0x20
    17fa:	8f 8f       	std	Y+31, r24	; 0x1f
    17fc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    17fe:	98 a1       	ldd	r25, Y+32	; 0x20
    1800:	01 97       	sbiw	r24, 0x01	; 1
    1802:	f1 f7       	brne	.-4      	; 0x1800 <take_password_and_cheak_it+0xd6>
    1804:	98 a3       	std	Y+32, r25	; 0x20
    1806:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1808:	89 a1       	ldd	r24, Y+33	; 0x21
    180a:	9a a1       	ldd	r25, Y+34	; 0x22
    180c:	01 97       	sbiw	r24, 0x01	; 1
    180e:	9a a3       	std	Y+34, r25	; 0x22
    1810:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1812:	89 a1       	ldd	r24, Y+33	; 0x21
    1814:	9a a1       	ldd	r25, Y+34	; 0x22
    1816:	00 97       	sbiw	r24, 0x00	; 0
    1818:	69 f7       	brne	.-38     	; 0x17f4 <take_password_and_cheak_it+0xca>
    181a:	14 c0       	rjmp	.+40     	; 0x1844 <take_password_and_cheak_it+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    181c:	6b a1       	ldd	r22, Y+35	; 0x23
    181e:	7c a1       	ldd	r23, Y+36	; 0x24
    1820:	8d a1       	ldd	r24, Y+37	; 0x25
    1822:	9e a1       	ldd	r25, Y+38	; 0x26
    1824:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1828:	dc 01       	movw	r26, r24
    182a:	cb 01       	movw	r24, r22
    182c:	9a a3       	std	Y+34, r25	; 0x22
    182e:	89 a3       	std	Y+33, r24	; 0x21
    1830:	89 a1       	ldd	r24, Y+33	; 0x21
    1832:	9a a1       	ldd	r25, Y+34	; 0x22
    1834:	9e 8f       	std	Y+30, r25	; 0x1e
    1836:	8d 8f       	std	Y+29, r24	; 0x1d
    1838:	8d 8d       	ldd	r24, Y+29	; 0x1d
    183a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    183c:	01 97       	sbiw	r24, 0x01	; 1
    183e:	f1 f7       	brne	.-4      	; 0x183c <take_password_and_cheak_it+0x112>
    1840:	9e 8f       	std	Y+30, r25	; 0x1e
    1842:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(300); /* Press time */
		if(pressed_button=='/')
    1844:	8f a5       	ldd	r24, Y+47	; 0x2f
    1846:	8f 32       	cpi	r24, 0x2F	; 47
    1848:	e9 f4       	brne	.+58     	; 0x1884 <take_password_and_cheak_it+0x15a>
		{
			if(pass_num!=0)
    184a:	8e a5       	ldd	r24, Y+46	; 0x2e
    184c:	88 23       	and	r24, r24
    184e:	09 f4       	brne	.+2      	; 0x1852 <take_password_and_cheak_it+0x128>
    1850:	84 cf       	rjmp	.-248    	; 0x175a <take_password_and_cheak_it+0x30>
			{
				pass_num--;
    1852:	8e a5       	ldd	r24, Y+46	; 0x2e
    1854:	81 50       	subi	r24, 0x01	; 1
    1856:	8e a7       	std	Y+46, r24	; 0x2e
				pass[pass_num]=100;
    1858:	8e a5       	ldd	r24, Y+46	; 0x2e
    185a:	28 2f       	mov	r18, r24
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	ce 01       	movw	r24, r28
    1860:	c0 96       	adiw	r24, 0x30	; 48
    1862:	fc 01       	movw	r30, r24
    1864:	e2 0f       	add	r30, r18
    1866:	f3 1f       	adc	r31, r19
    1868:	84 e6       	ldi	r24, 0x64	; 100
    186a:	80 83       	st	Z, r24
				LCD_moveCursor(1,pass_num);
    186c:	81 e0       	ldi	r24, 0x01	; 1
    186e:	6e a5       	ldd	r22, Y+46	; 0x2e
    1870:	0e 94 1d 25 	call	0x4a3a	; 0x4a3a <LCD_moveCursor>
				LCD_writeChar(' ');
    1874:	80 e2       	ldi	r24, 0x20	; 32
    1876:	0e 94 77 20 	call	0x40ee	; 0x40ee <LCD_writeChar>
				LCD_moveCursor(1,pass_num);
    187a:	81 e0       	ldi	r24, 0x01	; 1
    187c:	6e a5       	ldd	r22, Y+46	; 0x2e
    187e:	0e 94 1d 25 	call	0x4a3a	; 0x4a3a <LCD_moveCursor>
    1882:	6b cf       	rjmp	.-298    	; 0x175a <take_password_and_cheak_it+0x30>
			}
		}else if(pressed_button=='*')
    1884:	8f a5       	ldd	r24, Y+47	; 0x2f
    1886:	8a 32       	cpi	r24, 0x2A	; 42
    1888:	29 f1       	breq	.+74     	; 0x18d4 <take_password_and_cheak_it+0x1aa>
		{
			break;
		}else if(pressed_button == ' ' || pressed_button == '='
    188a:	8f a5       	ldd	r24, Y+47	; 0x2f
    188c:	80 32       	cpi	r24, 0x20	; 32
    188e:	09 f4       	brne	.+2      	; 0x1892 <take_password_and_cheak_it+0x168>
    1890:	64 cf       	rjmp	.-312    	; 0x175a <take_password_and_cheak_it+0x30>
    1892:	8f a5       	ldd	r24, Y+47	; 0x2f
    1894:	8d 33       	cpi	r24, 0x3D	; 61
    1896:	09 f4       	brne	.+2      	; 0x189a <take_password_and_cheak_it+0x170>
    1898:	60 cf       	rjmp	.-320    	; 0x175a <take_password_and_cheak_it+0x30>
    189a:	8f a5       	ldd	r24, Y+47	; 0x2f
    189c:	8b 32       	cpi	r24, 0x2B	; 43
    189e:	09 f4       	brne	.+2      	; 0x18a2 <take_password_and_cheak_it+0x178>
    18a0:	5c cf       	rjmp	.-328    	; 0x175a <take_password_and_cheak_it+0x30>
    18a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    18a4:	8d 32       	cpi	r24, 0x2D	; 45
    18a6:	09 f4       	brne	.+2      	; 0x18aa <take_password_and_cheak_it+0x180>
    18a8:	58 cf       	rjmp	.-336    	; 0x175a <take_password_and_cheak_it+0x30>
    18aa:	8e a5       	ldd	r24, Y+46	; 0x2e
    18ac:	85 30       	cpi	r24, 0x05	; 5
    18ae:	08 f0       	brcs	.+2      	; 0x18b2 <take_password_and_cheak_it+0x188>
    18b0:	54 cf       	rjmp	.-344    	; 0x175a <take_password_and_cheak_it+0x30>
		{
			/*Do nothing*/
		}
		else
		{
			pass[pass_num]=pressed_button;
    18b2:	8e a5       	ldd	r24, Y+46	; 0x2e
    18b4:	28 2f       	mov	r18, r24
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	ce 01       	movw	r24, r28
    18ba:	c0 96       	adiw	r24, 0x30	; 48
    18bc:	fc 01       	movw	r30, r24
    18be:	e2 0f       	add	r30, r18
    18c0:	f3 1f       	adc	r31, r19
    18c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    18c4:	80 83       	st	Z, r24
			//			LCD_integerToString(pass[pass_num]);
			LCD_writeChar('*');
    18c6:	8a e2       	ldi	r24, 0x2A	; 42
    18c8:	0e 94 77 20 	call	0x40ee	; 0x40ee <LCD_writeChar>
			pass_num++;
    18cc:	8e a5       	ldd	r24, Y+46	; 0x2e
    18ce:	8f 5f       	subi	r24, 0xFF	; 255
    18d0:	8e a7       	std	Y+46, r24	; 0x2e
    18d2:	43 cf       	rjmp	.-378    	; 0x175a <take_password_and_cheak_it+0x30>
		}
	}

	if(pass_num != 5)
    18d4:	8e a5       	ldd	r24, Y+46	; 0x2e
    18d6:	85 30       	cpi	r24, 0x05	; 5
    18d8:	11 f0       	breq	.+4      	; 0x18de <take_password_and_cheak_it+0x1b4>
		return FALSE;
    18da:	1d aa       	std	Y+53, r1	; 0x35
    18dc:	04 c1       	rjmp	.+520    	; 0x1ae6 <take_password_and_cheak_it+0x3bc>


	UART_sendByte(CHEAK_PASSWORD); /*tell MC2 that he will send a password if it's wright sent 1 else send 0*/
    18de:	8d ef       	ldi	r24, 0xFD	; 253
    18e0:	0e 94 2b 07 	call	0xe56	; 0xe56 <UART_sendByte>
    18e4:	80 e0       	ldi	r24, 0x00	; 0
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	a0 e2       	ldi	r26, 0x20	; 32
    18ea:	b1 e4       	ldi	r27, 0x41	; 65
    18ec:	89 8f       	std	Y+25, r24	; 0x19
    18ee:	9a 8f       	std	Y+26, r25	; 0x1a
    18f0:	ab 8f       	std	Y+27, r26	; 0x1b
    18f2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18f4:	69 8d       	ldd	r22, Y+25	; 0x19
    18f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18fc:	20 e0       	ldi	r18, 0x00	; 0
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	4a ef       	ldi	r20, 0xFA	; 250
    1902:	54 e4       	ldi	r21, 0x44	; 68
    1904:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1908:	dc 01       	movw	r26, r24
    190a:	cb 01       	movw	r24, r22
    190c:	8d 8b       	std	Y+21, r24	; 0x15
    190e:	9e 8b       	std	Y+22, r25	; 0x16
    1910:	af 8b       	std	Y+23, r26	; 0x17
    1912:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1914:	6d 89       	ldd	r22, Y+21	; 0x15
    1916:	7e 89       	ldd	r23, Y+22	; 0x16
    1918:	8f 89       	ldd	r24, Y+23	; 0x17
    191a:	98 8d       	ldd	r25, Y+24	; 0x18
    191c:	20 e0       	ldi	r18, 0x00	; 0
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	40 e8       	ldi	r20, 0x80	; 128
    1922:	5f e3       	ldi	r21, 0x3F	; 63
    1924:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1928:	88 23       	and	r24, r24
    192a:	2c f4       	brge	.+10     	; 0x1936 <take_password_and_cheak_it+0x20c>
		__ticks = 1;
    192c:	81 e0       	ldi	r24, 0x01	; 1
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	9c 8b       	std	Y+20, r25	; 0x14
    1932:	8b 8b       	std	Y+19, r24	; 0x13
    1934:	3f c0       	rjmp	.+126    	; 0x19b4 <take_password_and_cheak_it+0x28a>
	else if (__tmp > 65535)
    1936:	6d 89       	ldd	r22, Y+21	; 0x15
    1938:	7e 89       	ldd	r23, Y+22	; 0x16
    193a:	8f 89       	ldd	r24, Y+23	; 0x17
    193c:	98 8d       	ldd	r25, Y+24	; 0x18
    193e:	20 e0       	ldi	r18, 0x00	; 0
    1940:	3f ef       	ldi	r19, 0xFF	; 255
    1942:	4f e7       	ldi	r20, 0x7F	; 127
    1944:	57 e4       	ldi	r21, 0x47	; 71
    1946:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    194a:	18 16       	cp	r1, r24
    194c:	4c f5       	brge	.+82     	; 0x19a0 <take_password_and_cheak_it+0x276>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    194e:	69 8d       	ldd	r22, Y+25	; 0x19
    1950:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1952:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1954:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1956:	20 e0       	ldi	r18, 0x00	; 0
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	40 e2       	ldi	r20, 0x20	; 32
    195c:	51 e4       	ldi	r21, 0x41	; 65
    195e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1962:	dc 01       	movw	r26, r24
    1964:	cb 01       	movw	r24, r22
    1966:	bc 01       	movw	r22, r24
    1968:	cd 01       	movw	r24, r26
    196a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    196e:	dc 01       	movw	r26, r24
    1970:	cb 01       	movw	r24, r22
    1972:	9c 8b       	std	Y+20, r25	; 0x14
    1974:	8b 8b       	std	Y+19, r24	; 0x13
    1976:	0f c0       	rjmp	.+30     	; 0x1996 <take_password_and_cheak_it+0x26c>
    1978:	88 ec       	ldi	r24, 0xC8	; 200
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	9a 8b       	std	Y+18, r25	; 0x12
    197e:	89 8b       	std	Y+17, r24	; 0x11
    1980:	89 89       	ldd	r24, Y+17	; 0x11
    1982:	9a 89       	ldd	r25, Y+18	; 0x12
    1984:	01 97       	sbiw	r24, 0x01	; 1
    1986:	f1 f7       	brne	.-4      	; 0x1984 <take_password_and_cheak_it+0x25a>
    1988:	9a 8b       	std	Y+18, r25	; 0x12
    198a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    198c:	8b 89       	ldd	r24, Y+19	; 0x13
    198e:	9c 89       	ldd	r25, Y+20	; 0x14
    1990:	01 97       	sbiw	r24, 0x01	; 1
    1992:	9c 8b       	std	Y+20, r25	; 0x14
    1994:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1996:	8b 89       	ldd	r24, Y+19	; 0x13
    1998:	9c 89       	ldd	r25, Y+20	; 0x14
    199a:	00 97       	sbiw	r24, 0x00	; 0
    199c:	69 f7       	brne	.-38     	; 0x1978 <take_password_and_cheak_it+0x24e>
    199e:	14 c0       	rjmp	.+40     	; 0x19c8 <take_password_and_cheak_it+0x29e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19a0:	6d 89       	ldd	r22, Y+21	; 0x15
    19a2:	7e 89       	ldd	r23, Y+22	; 0x16
    19a4:	8f 89       	ldd	r24, Y+23	; 0x17
    19a6:	98 8d       	ldd	r25, Y+24	; 0x18
    19a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ac:	dc 01       	movw	r26, r24
    19ae:	cb 01       	movw	r24, r22
    19b0:	9c 8b       	std	Y+20, r25	; 0x14
    19b2:	8b 8b       	std	Y+19, r24	; 0x13
    19b4:	8b 89       	ldd	r24, Y+19	; 0x13
    19b6:	9c 89       	ldd	r25, Y+20	; 0x14
    19b8:	98 8b       	std	Y+16, r25	; 0x10
    19ba:	8f 87       	std	Y+15, r24	; 0x0f
    19bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    19be:	98 89       	ldd	r25, Y+16	; 0x10
    19c0:	01 97       	sbiw	r24, 0x01	; 1
    19c2:	f1 f7       	brne	.-4      	; 0x19c0 <take_password_and_cheak_it+0x296>
    19c4:	98 8b       	std	Y+16, r25	; 0x10
    19c6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);

	for(int j=0;j<PASS_SIZE;j++)
    19c8:	1c a6       	std	Y+44, r1	; 0x2c
    19ca:	1b a6       	std	Y+43, r1	; 0x2b
    19cc:	81 c0       	rjmp	.+258    	; 0x1ad0 <take_password_and_cheak_it+0x3a6>
	{
		UART_sendByte( pass[j] ); /*sending the password to MC2*/
    19ce:	2b a5       	ldd	r18, Y+43	; 0x2b
    19d0:	3c a5       	ldd	r19, Y+44	; 0x2c
    19d2:	ce 01       	movw	r24, r28
    19d4:	c0 96       	adiw	r24, 0x30	; 48
    19d6:	fc 01       	movw	r30, r24
    19d8:	e2 0f       	add	r30, r18
    19da:	f3 1f       	adc	r31, r19
    19dc:	80 81       	ld	r24, Z
    19de:	0e 94 2b 07 	call	0xe56	; 0xe56 <UART_sendByte>
    19e2:	80 e0       	ldi	r24, 0x00	; 0
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	a0 e2       	ldi	r26, 0x20	; 32
    19e8:	b1 e4       	ldi	r27, 0x41	; 65
    19ea:	8b 87       	std	Y+11, r24	; 0x0b
    19ec:	9c 87       	std	Y+12, r25	; 0x0c
    19ee:	ad 87       	std	Y+13, r26	; 0x0d
    19f0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    19f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    19f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    19f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    19fa:	20 e0       	ldi	r18, 0x00	; 0
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	4a ef       	ldi	r20, 0xFA	; 250
    1a00:	54 e4       	ldi	r21, 0x44	; 68
    1a02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a06:	dc 01       	movw	r26, r24
    1a08:	cb 01       	movw	r24, r22
    1a0a:	8f 83       	std	Y+7, r24	; 0x07
    1a0c:	98 87       	std	Y+8, r25	; 0x08
    1a0e:	a9 87       	std	Y+9, r26	; 0x09
    1a10:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a12:	6f 81       	ldd	r22, Y+7	; 0x07
    1a14:	78 85       	ldd	r23, Y+8	; 0x08
    1a16:	89 85       	ldd	r24, Y+9	; 0x09
    1a18:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a1a:	20 e0       	ldi	r18, 0x00	; 0
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	40 e8       	ldi	r20, 0x80	; 128
    1a20:	5f e3       	ldi	r21, 0x3F	; 63
    1a22:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a26:	88 23       	and	r24, r24
    1a28:	2c f4       	brge	.+10     	; 0x1a34 <take_password_and_cheak_it+0x30a>
		__ticks = 1;
    1a2a:	81 e0       	ldi	r24, 0x01	; 1
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	9e 83       	std	Y+6, r25	; 0x06
    1a30:	8d 83       	std	Y+5, r24	; 0x05
    1a32:	3f c0       	rjmp	.+126    	; 0x1ab2 <take_password_and_cheak_it+0x388>
	else if (__tmp > 65535)
    1a34:	6f 81       	ldd	r22, Y+7	; 0x07
    1a36:	78 85       	ldd	r23, Y+8	; 0x08
    1a38:	89 85       	ldd	r24, Y+9	; 0x09
    1a3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a3c:	20 e0       	ldi	r18, 0x00	; 0
    1a3e:	3f ef       	ldi	r19, 0xFF	; 255
    1a40:	4f e7       	ldi	r20, 0x7F	; 127
    1a42:	57 e4       	ldi	r21, 0x47	; 71
    1a44:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a48:	18 16       	cp	r1, r24
    1a4a:	4c f5       	brge	.+82     	; 0x1a9e <take_password_and_cheak_it+0x374>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a4c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a4e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a50:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a52:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a54:	20 e0       	ldi	r18, 0x00	; 0
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	40 e2       	ldi	r20, 0x20	; 32
    1a5a:	51 e4       	ldi	r21, 0x41	; 65
    1a5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a60:	dc 01       	movw	r26, r24
    1a62:	cb 01       	movw	r24, r22
    1a64:	bc 01       	movw	r22, r24
    1a66:	cd 01       	movw	r24, r26
    1a68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a6c:	dc 01       	movw	r26, r24
    1a6e:	cb 01       	movw	r24, r22
    1a70:	9e 83       	std	Y+6, r25	; 0x06
    1a72:	8d 83       	std	Y+5, r24	; 0x05
    1a74:	0f c0       	rjmp	.+30     	; 0x1a94 <take_password_and_cheak_it+0x36a>
    1a76:	88 ec       	ldi	r24, 0xC8	; 200
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	9c 83       	std	Y+4, r25	; 0x04
    1a7c:	8b 83       	std	Y+3, r24	; 0x03
    1a7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a80:	9c 81       	ldd	r25, Y+4	; 0x04
    1a82:	01 97       	sbiw	r24, 0x01	; 1
    1a84:	f1 f7       	brne	.-4      	; 0x1a82 <take_password_and_cheak_it+0x358>
    1a86:	9c 83       	std	Y+4, r25	; 0x04
    1a88:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a8e:	01 97       	sbiw	r24, 0x01	; 1
    1a90:	9e 83       	std	Y+6, r25	; 0x06
    1a92:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a94:	8d 81       	ldd	r24, Y+5	; 0x05
    1a96:	9e 81       	ldd	r25, Y+6	; 0x06
    1a98:	00 97       	sbiw	r24, 0x00	; 0
    1a9a:	69 f7       	brne	.-38     	; 0x1a76 <take_password_and_cheak_it+0x34c>
    1a9c:	14 c0       	rjmp	.+40     	; 0x1ac6 <take_password_and_cheak_it+0x39c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a9e:	6f 81       	ldd	r22, Y+7	; 0x07
    1aa0:	78 85       	ldd	r23, Y+8	; 0x08
    1aa2:	89 85       	ldd	r24, Y+9	; 0x09
    1aa4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aaa:	dc 01       	movw	r26, r24
    1aac:	cb 01       	movw	r24, r22
    1aae:	9e 83       	std	Y+6, r25	; 0x06
    1ab0:	8d 83       	std	Y+5, r24	; 0x05
    1ab2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ab6:	9a 83       	std	Y+2, r25	; 0x02
    1ab8:	89 83       	std	Y+1, r24	; 0x01
    1aba:	89 81       	ldd	r24, Y+1	; 0x01
    1abc:	9a 81       	ldd	r25, Y+2	; 0x02
    1abe:	01 97       	sbiw	r24, 0x01	; 1
    1ac0:	f1 f7       	brne	.-4      	; 0x1abe <take_password_and_cheak_it+0x394>
    1ac2:	9a 83       	std	Y+2, r25	; 0x02
    1ac4:	89 83       	std	Y+1, r24	; 0x01


	UART_sendByte(CHEAK_PASSWORD); /*tell MC2 that he will send a password if it's wright sent 1 else send 0*/
	_delay_ms(10);

	for(int j=0;j<PASS_SIZE;j++)
    1ac6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ac8:	9c a5       	ldd	r25, Y+44	; 0x2c
    1aca:	01 96       	adiw	r24, 0x01	; 1
    1acc:	9c a7       	std	Y+44, r25	; 0x2c
    1ace:	8b a7       	std	Y+43, r24	; 0x2b
    1ad0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ad2:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ad4:	85 30       	cpi	r24, 0x05	; 5
    1ad6:	91 05       	cpc	r25, r1
    1ad8:	0c f4       	brge	.+2      	; 0x1adc <take_password_and_cheak_it+0x3b2>
    1ada:	79 cf       	rjmp	.-270    	; 0x19ce <take_password_and_cheak_it+0x2a4>
		UART_sendByte( pass[j] ); /*sending the password to MC2*/
		_delay_ms(10);
	}

	boolean is_right_pass;
	is_right_pass = UART_recieveByte(); /*MC2 will sent true or false*/
    1adc:	0e 94 42 07 	call	0xe84	; 0xe84 <UART_recieveByte>
    1ae0:	8d a7       	std	Y+45, r24	; 0x2d

	return is_right_pass;
    1ae2:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ae4:	8d ab       	std	Y+53, r24	; 0x35
    1ae6:	8d a9       	ldd	r24, Y+53	; 0x35
}
    1ae8:	e5 96       	adiw	r28, 0x35	; 53
    1aea:	0f b6       	in	r0, 0x3f	; 63
    1aec:	f8 94       	cli
    1aee:	de bf       	out	0x3e, r29	; 62
    1af0:	0f be       	out	0x3f, r0	; 63
    1af2:	cd bf       	out	0x3d, r28	; 61
    1af4:	cf 91       	pop	r28
    1af6:	df 91       	pop	r29
    1af8:	08 95       	ret

00001afa <step_4_change_password>:
 *
 * Args   : void
 * return : boolean
 ***********************************************************************/
void step_4_change_password(void)
{
    1afa:	df 93       	push	r29
    1afc:	cf 93       	push	r28
    1afe:	cd b7       	in	r28, 0x3d	; 61
    1b00:	de b7       	in	r29, 0x3e	; 62
    1b02:	ea 97       	sbiw	r28, 0x3a	; 58
    1b04:	0f b6       	in	r0, 0x3f	; 63
    1b06:	f8 94       	cli
    1b08:	de bf       	out	0x3e, r29	; 62
    1b0a:	0f be       	out	0x3f, r0	; 63
    1b0c:	cd bf       	out	0x3d, r28	; 61
	boolean is_pass_right;
	uint8 error_num=1;
    1b0e:	81 e0       	ldi	r24, 0x01	; 1
    1b10:	89 af       	std	Y+57, r24	; 0x39
	is_pass_right=take_password_and_cheak_it();
    1b12:	0e 94 95 0b 	call	0x172a	; 0x172a <take_password_and_cheak_it>
    1b16:	8a af       	std	Y+58, r24	; 0x3a

	if(is_pass_right)
    1b18:	8a ad       	ldd	r24, Y+58	; 0x3a
    1b1a:	88 23       	and	r24, r24
    1b1c:	09 f4       	brne	.+2      	; 0x1b20 <step_4_change_password+0x26>
    1b1e:	7b c0       	rjmp	.+246    	; 0x1c16 <step_4_change_password+0x11c>
	{
		LCD_clearScreen();
    1b20:	0e 94 83 25 	call	0x4b06	; 0x4b06 <LCD_clearScreen>
		LCD_writeString("Correct pass");
    1b24:	8c e8       	ldi	r24, 0x8C	; 140
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	0e 94 f2 24 	call	0x49e4	; 0x49e4 <LCD_writeString>
    1b2c:	80 e0       	ldi	r24, 0x00	; 0
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	aa e7       	ldi	r26, 0x7A	; 122
    1b32:	b4 e4       	ldi	r27, 0x44	; 68
    1b34:	8d ab       	std	Y+53, r24	; 0x35
    1b36:	9e ab       	std	Y+54, r25	; 0x36
    1b38:	af ab       	std	Y+55, r26	; 0x37
    1b3a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b3c:	6d a9       	ldd	r22, Y+53	; 0x35
    1b3e:	7e a9       	ldd	r23, Y+54	; 0x36
    1b40:	8f a9       	ldd	r24, Y+55	; 0x37
    1b42:	98 ad       	ldd	r25, Y+56	; 0x38
    1b44:	20 e0       	ldi	r18, 0x00	; 0
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	4a ef       	ldi	r20, 0xFA	; 250
    1b4a:	54 e4       	ldi	r21, 0x44	; 68
    1b4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b50:	dc 01       	movw	r26, r24
    1b52:	cb 01       	movw	r24, r22
    1b54:	89 ab       	std	Y+49, r24	; 0x31
    1b56:	9a ab       	std	Y+50, r25	; 0x32
    1b58:	ab ab       	std	Y+51, r26	; 0x33
    1b5a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b5c:	69 a9       	ldd	r22, Y+49	; 0x31
    1b5e:	7a a9       	ldd	r23, Y+50	; 0x32
    1b60:	8b a9       	ldd	r24, Y+51	; 0x33
    1b62:	9c a9       	ldd	r25, Y+52	; 0x34
    1b64:	20 e0       	ldi	r18, 0x00	; 0
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	40 e8       	ldi	r20, 0x80	; 128
    1b6a:	5f e3       	ldi	r21, 0x3F	; 63
    1b6c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b70:	88 23       	and	r24, r24
    1b72:	2c f4       	brge	.+10     	; 0x1b7e <step_4_change_password+0x84>
		__ticks = 1;
    1b74:	81 e0       	ldi	r24, 0x01	; 1
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	98 ab       	std	Y+48, r25	; 0x30
    1b7a:	8f a7       	std	Y+47, r24	; 0x2f
    1b7c:	3f c0       	rjmp	.+126    	; 0x1bfc <step_4_change_password+0x102>
	else if (__tmp > 65535)
    1b7e:	69 a9       	ldd	r22, Y+49	; 0x31
    1b80:	7a a9       	ldd	r23, Y+50	; 0x32
    1b82:	8b a9       	ldd	r24, Y+51	; 0x33
    1b84:	9c a9       	ldd	r25, Y+52	; 0x34
    1b86:	20 e0       	ldi	r18, 0x00	; 0
    1b88:	3f ef       	ldi	r19, 0xFF	; 255
    1b8a:	4f e7       	ldi	r20, 0x7F	; 127
    1b8c:	57 e4       	ldi	r21, 0x47	; 71
    1b8e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b92:	18 16       	cp	r1, r24
    1b94:	4c f5       	brge	.+82     	; 0x1be8 <step_4_change_password+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b96:	6d a9       	ldd	r22, Y+53	; 0x35
    1b98:	7e a9       	ldd	r23, Y+54	; 0x36
    1b9a:	8f a9       	ldd	r24, Y+55	; 0x37
    1b9c:	98 ad       	ldd	r25, Y+56	; 0x38
    1b9e:	20 e0       	ldi	r18, 0x00	; 0
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	40 e2       	ldi	r20, 0x20	; 32
    1ba4:	51 e4       	ldi	r21, 0x41	; 65
    1ba6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1baa:	dc 01       	movw	r26, r24
    1bac:	cb 01       	movw	r24, r22
    1bae:	bc 01       	movw	r22, r24
    1bb0:	cd 01       	movw	r24, r26
    1bb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bb6:	dc 01       	movw	r26, r24
    1bb8:	cb 01       	movw	r24, r22
    1bba:	98 ab       	std	Y+48, r25	; 0x30
    1bbc:	8f a7       	std	Y+47, r24	; 0x2f
    1bbe:	0f c0       	rjmp	.+30     	; 0x1bde <step_4_change_password+0xe4>
    1bc0:	88 ec       	ldi	r24, 0xC8	; 200
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	9e a7       	std	Y+46, r25	; 0x2e
    1bc6:	8d a7       	std	Y+45, r24	; 0x2d
    1bc8:	8d a5       	ldd	r24, Y+45	; 0x2d
    1bca:	9e a5       	ldd	r25, Y+46	; 0x2e
    1bcc:	01 97       	sbiw	r24, 0x01	; 1
    1bce:	f1 f7       	brne	.-4      	; 0x1bcc <step_4_change_password+0xd2>
    1bd0:	9e a7       	std	Y+46, r25	; 0x2e
    1bd2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bd4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bd6:	98 a9       	ldd	r25, Y+48	; 0x30
    1bd8:	01 97       	sbiw	r24, 0x01	; 1
    1bda:	98 ab       	std	Y+48, r25	; 0x30
    1bdc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bde:	8f a5       	ldd	r24, Y+47	; 0x2f
    1be0:	98 a9       	ldd	r25, Y+48	; 0x30
    1be2:	00 97       	sbiw	r24, 0x00	; 0
    1be4:	69 f7       	brne	.-38     	; 0x1bc0 <step_4_change_password+0xc6>
    1be6:	14 c0       	rjmp	.+40     	; 0x1c10 <step_4_change_password+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1be8:	69 a9       	ldd	r22, Y+49	; 0x31
    1bea:	7a a9       	ldd	r23, Y+50	; 0x32
    1bec:	8b a9       	ldd	r24, Y+51	; 0x33
    1bee:	9c a9       	ldd	r25, Y+52	; 0x34
    1bf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf4:	dc 01       	movw	r26, r24
    1bf6:	cb 01       	movw	r24, r22
    1bf8:	98 ab       	std	Y+48, r25	; 0x30
    1bfa:	8f a7       	std	Y+47, r24	; 0x2f
    1bfc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bfe:	98 a9       	ldd	r25, Y+48	; 0x30
    1c00:	9c a7       	std	Y+44, r25	; 0x2c
    1c02:	8b a7       	std	Y+43, r24	; 0x2b
    1c04:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c06:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c08:	01 97       	sbiw	r24, 0x01	; 1
    1c0a:	f1 f7       	brne	.-4      	; 0x1c08 <step_4_change_password+0x10e>
    1c0c:	9c a7       	std	Y+44, r25	; 0x2c
    1c0e:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1000);
		step_1_set_password();
    1c10:	0e 94 29 09 	call	0x1252	; 0x1252 <step_1_set_password>
    1c14:	79 c1       	rjmp	.+754    	; 0x1f08 <step_4_change_password+0x40e>
	}
	else
	{
		LCD_clearScreen();
    1c16:	0e 94 83 25 	call	0x4b06	; 0x4b06 <LCD_clearScreen>
		LCD_writeString("Not correct pass");
    1c1a:	89 e9       	ldi	r24, 0x99	; 153
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	0e 94 f2 24 	call	0x49e4	; 0x49e4 <LCD_writeString>
    1c22:	80 e0       	ldi	r24, 0x00	; 0
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	aa ef       	ldi	r26, 0xFA	; 250
    1c28:	b4 e4       	ldi	r27, 0x44	; 68
    1c2a:	8f a3       	std	Y+39, r24	; 0x27
    1c2c:	98 a7       	std	Y+40, r25	; 0x28
    1c2e:	a9 a7       	std	Y+41, r26	; 0x29
    1c30:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c32:	6f a1       	ldd	r22, Y+39	; 0x27
    1c34:	78 a5       	ldd	r23, Y+40	; 0x28
    1c36:	89 a5       	ldd	r24, Y+41	; 0x29
    1c38:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c3a:	20 e0       	ldi	r18, 0x00	; 0
    1c3c:	30 e0       	ldi	r19, 0x00	; 0
    1c3e:	4a ef       	ldi	r20, 0xFA	; 250
    1c40:	54 e4       	ldi	r21, 0x44	; 68
    1c42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c46:	dc 01       	movw	r26, r24
    1c48:	cb 01       	movw	r24, r22
    1c4a:	8b a3       	std	Y+35, r24	; 0x23
    1c4c:	9c a3       	std	Y+36, r25	; 0x24
    1c4e:	ad a3       	std	Y+37, r26	; 0x25
    1c50:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c52:	6b a1       	ldd	r22, Y+35	; 0x23
    1c54:	7c a1       	ldd	r23, Y+36	; 0x24
    1c56:	8d a1       	ldd	r24, Y+37	; 0x25
    1c58:	9e a1       	ldd	r25, Y+38	; 0x26
    1c5a:	20 e0       	ldi	r18, 0x00	; 0
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	40 e8       	ldi	r20, 0x80	; 128
    1c60:	5f e3       	ldi	r21, 0x3F	; 63
    1c62:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c66:	88 23       	and	r24, r24
    1c68:	2c f4       	brge	.+10     	; 0x1c74 <step_4_change_password+0x17a>
		__ticks = 1;
    1c6a:	81 e0       	ldi	r24, 0x01	; 1
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	9a a3       	std	Y+34, r25	; 0x22
    1c70:	89 a3       	std	Y+33, r24	; 0x21
    1c72:	3f c0       	rjmp	.+126    	; 0x1cf2 <step_4_change_password+0x1f8>
	else if (__tmp > 65535)
    1c74:	6b a1       	ldd	r22, Y+35	; 0x23
    1c76:	7c a1       	ldd	r23, Y+36	; 0x24
    1c78:	8d a1       	ldd	r24, Y+37	; 0x25
    1c7a:	9e a1       	ldd	r25, Y+38	; 0x26
    1c7c:	20 e0       	ldi	r18, 0x00	; 0
    1c7e:	3f ef       	ldi	r19, 0xFF	; 255
    1c80:	4f e7       	ldi	r20, 0x7F	; 127
    1c82:	57 e4       	ldi	r21, 0x47	; 71
    1c84:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c88:	18 16       	cp	r1, r24
    1c8a:	4c f5       	brge	.+82     	; 0x1cde <step_4_change_password+0x1e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c8c:	6f a1       	ldd	r22, Y+39	; 0x27
    1c8e:	78 a5       	ldd	r23, Y+40	; 0x28
    1c90:	89 a5       	ldd	r24, Y+41	; 0x29
    1c92:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c94:	20 e0       	ldi	r18, 0x00	; 0
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	40 e2       	ldi	r20, 0x20	; 32
    1c9a:	51 e4       	ldi	r21, 0x41	; 65
    1c9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca0:	dc 01       	movw	r26, r24
    1ca2:	cb 01       	movw	r24, r22
    1ca4:	bc 01       	movw	r22, r24
    1ca6:	cd 01       	movw	r24, r26
    1ca8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cac:	dc 01       	movw	r26, r24
    1cae:	cb 01       	movw	r24, r22
    1cb0:	9a a3       	std	Y+34, r25	; 0x22
    1cb2:	89 a3       	std	Y+33, r24	; 0x21
    1cb4:	0f c0       	rjmp	.+30     	; 0x1cd4 <step_4_change_password+0x1da>
    1cb6:	88 ec       	ldi	r24, 0xC8	; 200
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	98 a3       	std	Y+32, r25	; 0x20
    1cbc:	8f 8f       	std	Y+31, r24	; 0x1f
    1cbe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1cc0:	98 a1       	ldd	r25, Y+32	; 0x20
    1cc2:	01 97       	sbiw	r24, 0x01	; 1
    1cc4:	f1 f7       	brne	.-4      	; 0x1cc2 <step_4_change_password+0x1c8>
    1cc6:	98 a3       	std	Y+32, r25	; 0x20
    1cc8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cca:	89 a1       	ldd	r24, Y+33	; 0x21
    1ccc:	9a a1       	ldd	r25, Y+34	; 0x22
    1cce:	01 97       	sbiw	r24, 0x01	; 1
    1cd0:	9a a3       	std	Y+34, r25	; 0x22
    1cd2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cd4:	89 a1       	ldd	r24, Y+33	; 0x21
    1cd6:	9a a1       	ldd	r25, Y+34	; 0x22
    1cd8:	00 97       	sbiw	r24, 0x00	; 0
    1cda:	69 f7       	brne	.-38     	; 0x1cb6 <step_4_change_password+0x1bc>
    1cdc:	96 c0       	rjmp	.+300    	; 0x1e0a <step_4_change_password+0x310>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cde:	6b a1       	ldd	r22, Y+35	; 0x23
    1ce0:	7c a1       	ldd	r23, Y+36	; 0x24
    1ce2:	8d a1       	ldd	r24, Y+37	; 0x25
    1ce4:	9e a1       	ldd	r25, Y+38	; 0x26
    1ce6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cea:	dc 01       	movw	r26, r24
    1cec:	cb 01       	movw	r24, r22
    1cee:	9a a3       	std	Y+34, r25	; 0x22
    1cf0:	89 a3       	std	Y+33, r24	; 0x21
    1cf2:	89 a1       	ldd	r24, Y+33	; 0x21
    1cf4:	9a a1       	ldd	r25, Y+34	; 0x22
    1cf6:	9e 8f       	std	Y+30, r25	; 0x1e
    1cf8:	8d 8f       	std	Y+29, r24	; 0x1d
    1cfa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cfc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1cfe:	01 97       	sbiw	r24, 0x01	; 1
    1d00:	f1 f7       	brne	.-4      	; 0x1cfe <step_4_change_password+0x204>
    1d02:	9e 8f       	std	Y+30, r25	; 0x1e
    1d04:	8d 8f       	std	Y+29, r24	; 0x1d
    1d06:	81 c0       	rjmp	.+258    	; 0x1e0a <step_4_change_password+0x310>
		_delay_ms(2000);
		while( !take_password_and_cheak_it() ) /*will loop till it's true or break statment*/
		{
			error_num++;
    1d08:	89 ad       	ldd	r24, Y+57	; 0x39
    1d0a:	8f 5f       	subi	r24, 0xFF	; 255
    1d0c:	89 af       	std	Y+57, r24	; 0x39
			if(error_num>=ERROR_NUM)
    1d0e:	89 ad       	ldd	r24, Y+57	; 0x39
    1d10:	83 30       	cpi	r24, 0x03	; 3
    1d12:	18 f0       	brcs	.+6      	; 0x1d1a <step_4_change_password+0x220>
			{
				error_pass();
    1d14:	0e 94 04 14 	call	0x2808	; 0x2808 <error_pass>
    1d18:	f9 c0       	rjmp	.+498    	; 0x1f0c <step_4_change_password+0x412>
				return;
			}
			LCD_clearScreen();
    1d1a:	0e 94 83 25 	call	0x4b06	; 0x4b06 <LCD_clearScreen>
			LCD_writeString("Not correct pass");
    1d1e:	89 e9       	ldi	r24, 0x99	; 153
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	0e 94 f2 24 	call	0x49e4	; 0x49e4 <LCD_writeString>
    1d26:	80 e0       	ldi	r24, 0x00	; 0
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	aa ef       	ldi	r26, 0xFA	; 250
    1d2c:	b4 e4       	ldi	r27, 0x44	; 68
    1d2e:	89 8f       	std	Y+25, r24	; 0x19
    1d30:	9a 8f       	std	Y+26, r25	; 0x1a
    1d32:	ab 8f       	std	Y+27, r26	; 0x1b
    1d34:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d36:	69 8d       	ldd	r22, Y+25	; 0x19
    1d38:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d3a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d3c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d3e:	20 e0       	ldi	r18, 0x00	; 0
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	4a ef       	ldi	r20, 0xFA	; 250
    1d44:	54 e4       	ldi	r21, 0x44	; 68
    1d46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d4a:	dc 01       	movw	r26, r24
    1d4c:	cb 01       	movw	r24, r22
    1d4e:	8d 8b       	std	Y+21, r24	; 0x15
    1d50:	9e 8b       	std	Y+22, r25	; 0x16
    1d52:	af 8b       	std	Y+23, r26	; 0x17
    1d54:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d56:	6d 89       	ldd	r22, Y+21	; 0x15
    1d58:	7e 89       	ldd	r23, Y+22	; 0x16
    1d5a:	8f 89       	ldd	r24, Y+23	; 0x17
    1d5c:	98 8d       	ldd	r25, Y+24	; 0x18
    1d5e:	20 e0       	ldi	r18, 0x00	; 0
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	40 e8       	ldi	r20, 0x80	; 128
    1d64:	5f e3       	ldi	r21, 0x3F	; 63
    1d66:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d6a:	88 23       	and	r24, r24
    1d6c:	2c f4       	brge	.+10     	; 0x1d78 <step_4_change_password+0x27e>
		__ticks = 1;
    1d6e:	81 e0       	ldi	r24, 0x01	; 1
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	9c 8b       	std	Y+20, r25	; 0x14
    1d74:	8b 8b       	std	Y+19, r24	; 0x13
    1d76:	3f c0       	rjmp	.+126    	; 0x1df6 <step_4_change_password+0x2fc>
	else if (__tmp > 65535)
    1d78:	6d 89       	ldd	r22, Y+21	; 0x15
    1d7a:	7e 89       	ldd	r23, Y+22	; 0x16
    1d7c:	8f 89       	ldd	r24, Y+23	; 0x17
    1d7e:	98 8d       	ldd	r25, Y+24	; 0x18
    1d80:	20 e0       	ldi	r18, 0x00	; 0
    1d82:	3f ef       	ldi	r19, 0xFF	; 255
    1d84:	4f e7       	ldi	r20, 0x7F	; 127
    1d86:	57 e4       	ldi	r21, 0x47	; 71
    1d88:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d8c:	18 16       	cp	r1, r24
    1d8e:	4c f5       	brge	.+82     	; 0x1de2 <step_4_change_password+0x2e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d90:	69 8d       	ldd	r22, Y+25	; 0x19
    1d92:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d94:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d96:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d98:	20 e0       	ldi	r18, 0x00	; 0
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	40 e2       	ldi	r20, 0x20	; 32
    1d9e:	51 e4       	ldi	r21, 0x41	; 65
    1da0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1da4:	dc 01       	movw	r26, r24
    1da6:	cb 01       	movw	r24, r22
    1da8:	bc 01       	movw	r22, r24
    1daa:	cd 01       	movw	r24, r26
    1dac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1db0:	dc 01       	movw	r26, r24
    1db2:	cb 01       	movw	r24, r22
    1db4:	9c 8b       	std	Y+20, r25	; 0x14
    1db6:	8b 8b       	std	Y+19, r24	; 0x13
    1db8:	0f c0       	rjmp	.+30     	; 0x1dd8 <step_4_change_password+0x2de>
    1dba:	88 ec       	ldi	r24, 0xC8	; 200
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	9a 8b       	std	Y+18, r25	; 0x12
    1dc0:	89 8b       	std	Y+17, r24	; 0x11
    1dc2:	89 89       	ldd	r24, Y+17	; 0x11
    1dc4:	9a 89       	ldd	r25, Y+18	; 0x12
    1dc6:	01 97       	sbiw	r24, 0x01	; 1
    1dc8:	f1 f7       	brne	.-4      	; 0x1dc6 <step_4_change_password+0x2cc>
    1dca:	9a 8b       	std	Y+18, r25	; 0x12
    1dcc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dce:	8b 89       	ldd	r24, Y+19	; 0x13
    1dd0:	9c 89       	ldd	r25, Y+20	; 0x14
    1dd2:	01 97       	sbiw	r24, 0x01	; 1
    1dd4:	9c 8b       	std	Y+20, r25	; 0x14
    1dd6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dd8:	8b 89       	ldd	r24, Y+19	; 0x13
    1dda:	9c 89       	ldd	r25, Y+20	; 0x14
    1ddc:	00 97       	sbiw	r24, 0x00	; 0
    1dde:	69 f7       	brne	.-38     	; 0x1dba <step_4_change_password+0x2c0>
    1de0:	14 c0       	rjmp	.+40     	; 0x1e0a <step_4_change_password+0x310>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1de2:	6d 89       	ldd	r22, Y+21	; 0x15
    1de4:	7e 89       	ldd	r23, Y+22	; 0x16
    1de6:	8f 89       	ldd	r24, Y+23	; 0x17
    1de8:	98 8d       	ldd	r25, Y+24	; 0x18
    1dea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dee:	dc 01       	movw	r26, r24
    1df0:	cb 01       	movw	r24, r22
    1df2:	9c 8b       	std	Y+20, r25	; 0x14
    1df4:	8b 8b       	std	Y+19, r24	; 0x13
    1df6:	8b 89       	ldd	r24, Y+19	; 0x13
    1df8:	9c 89       	ldd	r25, Y+20	; 0x14
    1dfa:	98 8b       	std	Y+16, r25	; 0x10
    1dfc:	8f 87       	std	Y+15, r24	; 0x0f
    1dfe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e00:	98 89       	ldd	r25, Y+16	; 0x10
    1e02:	01 97       	sbiw	r24, 0x01	; 1
    1e04:	f1 f7       	brne	.-4      	; 0x1e02 <step_4_change_password+0x308>
    1e06:	98 8b       	std	Y+16, r25	; 0x10
    1e08:	8f 87       	std	Y+15, r24	; 0x0f
	else
	{
		LCD_clearScreen();
		LCD_writeString("Not correct pass");
		_delay_ms(2000);
		while( !take_password_and_cheak_it() ) /*will loop till it's true or break statment*/
    1e0a:	0e 94 95 0b 	call	0x172a	; 0x172a <take_password_and_cheak_it>
    1e0e:	88 23       	and	r24, r24
    1e10:	09 f4       	brne	.+2      	; 0x1e14 <step_4_change_password+0x31a>
    1e12:	7a cf       	rjmp	.-268    	; 0x1d08 <step_4_change_password+0x20e>
			LCD_clearScreen();
			LCD_writeString("Not correct pass");
			_delay_ms(2000);
		}

		LCD_clearScreen();
    1e14:	0e 94 83 25 	call	0x4b06	; 0x4b06 <LCD_clearScreen>
		LCD_writeString("Correct pass");
    1e18:	8c e8       	ldi	r24, 0x8C	; 140
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	0e 94 f2 24 	call	0x49e4	; 0x49e4 <LCD_writeString>
    1e20:	80 e0       	ldi	r24, 0x00	; 0
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	aa e7       	ldi	r26, 0x7A	; 122
    1e26:	b4 e4       	ldi	r27, 0x44	; 68
    1e28:	8b 87       	std	Y+11, r24	; 0x0b
    1e2a:	9c 87       	std	Y+12, r25	; 0x0c
    1e2c:	ad 87       	std	Y+13, r26	; 0x0d
    1e2e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e30:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e32:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e34:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e36:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e38:	20 e0       	ldi	r18, 0x00	; 0
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	4a ef       	ldi	r20, 0xFA	; 250
    1e3e:	54 e4       	ldi	r21, 0x44	; 68
    1e40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e44:	dc 01       	movw	r26, r24
    1e46:	cb 01       	movw	r24, r22
    1e48:	8f 83       	std	Y+7, r24	; 0x07
    1e4a:	98 87       	std	Y+8, r25	; 0x08
    1e4c:	a9 87       	std	Y+9, r26	; 0x09
    1e4e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e50:	6f 81       	ldd	r22, Y+7	; 0x07
    1e52:	78 85       	ldd	r23, Y+8	; 0x08
    1e54:	89 85       	ldd	r24, Y+9	; 0x09
    1e56:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e58:	20 e0       	ldi	r18, 0x00	; 0
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	40 e8       	ldi	r20, 0x80	; 128
    1e5e:	5f e3       	ldi	r21, 0x3F	; 63
    1e60:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e64:	88 23       	and	r24, r24
    1e66:	2c f4       	brge	.+10     	; 0x1e72 <step_4_change_password+0x378>
		__ticks = 1;
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	9e 83       	std	Y+6, r25	; 0x06
    1e6e:	8d 83       	std	Y+5, r24	; 0x05
    1e70:	3f c0       	rjmp	.+126    	; 0x1ef0 <step_4_change_password+0x3f6>
	else if (__tmp > 65535)
    1e72:	6f 81       	ldd	r22, Y+7	; 0x07
    1e74:	78 85       	ldd	r23, Y+8	; 0x08
    1e76:	89 85       	ldd	r24, Y+9	; 0x09
    1e78:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e7a:	20 e0       	ldi	r18, 0x00	; 0
    1e7c:	3f ef       	ldi	r19, 0xFF	; 255
    1e7e:	4f e7       	ldi	r20, 0x7F	; 127
    1e80:	57 e4       	ldi	r21, 0x47	; 71
    1e82:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e86:	18 16       	cp	r1, r24
    1e88:	4c f5       	brge	.+82     	; 0x1edc <step_4_change_password+0x3e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e90:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e92:	20 e0       	ldi	r18, 0x00	; 0
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	40 e2       	ldi	r20, 0x20	; 32
    1e98:	51 e4       	ldi	r21, 0x41	; 65
    1e9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e9e:	dc 01       	movw	r26, r24
    1ea0:	cb 01       	movw	r24, r22
    1ea2:	bc 01       	movw	r22, r24
    1ea4:	cd 01       	movw	r24, r26
    1ea6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eaa:	dc 01       	movw	r26, r24
    1eac:	cb 01       	movw	r24, r22
    1eae:	9e 83       	std	Y+6, r25	; 0x06
    1eb0:	8d 83       	std	Y+5, r24	; 0x05
    1eb2:	0f c0       	rjmp	.+30     	; 0x1ed2 <step_4_change_password+0x3d8>
    1eb4:	88 ec       	ldi	r24, 0xC8	; 200
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	9c 83       	std	Y+4, r25	; 0x04
    1eba:	8b 83       	std	Y+3, r24	; 0x03
    1ebc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ebe:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec0:	01 97       	sbiw	r24, 0x01	; 1
    1ec2:	f1 f7       	brne	.-4      	; 0x1ec0 <step_4_change_password+0x3c6>
    1ec4:	9c 83       	std	Y+4, r25	; 0x04
    1ec6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ec8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eca:	9e 81       	ldd	r25, Y+6	; 0x06
    1ecc:	01 97       	sbiw	r24, 0x01	; 1
    1ece:	9e 83       	std	Y+6, r25	; 0x06
    1ed0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ed2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ed4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ed6:	00 97       	sbiw	r24, 0x00	; 0
    1ed8:	69 f7       	brne	.-38     	; 0x1eb4 <step_4_change_password+0x3ba>
    1eda:	14 c0       	rjmp	.+40     	; 0x1f04 <step_4_change_password+0x40a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1edc:	6f 81       	ldd	r22, Y+7	; 0x07
    1ede:	78 85       	ldd	r23, Y+8	; 0x08
    1ee0:	89 85       	ldd	r24, Y+9	; 0x09
    1ee2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ee4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ee8:	dc 01       	movw	r26, r24
    1eea:	cb 01       	movw	r24, r22
    1eec:	9e 83       	std	Y+6, r25	; 0x06
    1eee:	8d 83       	std	Y+5, r24	; 0x05
    1ef0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ef4:	9a 83       	std	Y+2, r25	; 0x02
    1ef6:	89 83       	std	Y+1, r24	; 0x01
    1ef8:	89 81       	ldd	r24, Y+1	; 0x01
    1efa:	9a 81       	ldd	r25, Y+2	; 0x02
    1efc:	01 97       	sbiw	r24, 0x01	; 1
    1efe:	f1 f7       	brne	.-4      	; 0x1efc <step_4_change_password+0x402>
    1f00:	9a 83       	std	Y+2, r25	; 0x02
    1f02:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);

		step_1_set_password(); /*if the user enter correct password after wrong one*/
    1f04:	0e 94 29 09 	call	0x1252	; 0x1252 <step_1_set_password>

	}
	LCD_clearScreen();
    1f08:	0e 94 83 25 	call	0x4b06	; 0x4b06 <LCD_clearScreen>
}
    1f0c:	ea 96       	adiw	r28, 0x3a	; 58
    1f0e:	0f b6       	in	r0, 0x3f	; 63
    1f10:	f8 94       	cli
    1f12:	de bf       	out	0x3e, r29	; 62
    1f14:	0f be       	out	0x3f, r0	; 63
    1f16:	cd bf       	out	0x3d, r28	; 61
    1f18:	cf 91       	pop	r28
    1f1a:	df 91       	pop	r29
    1f1c:	08 95       	ret

00001f1e <open_door>:
 *
 * Args   : void
 * return : void
 ***********************************************************************/
static void open_door(void)
{
    1f1e:	df 93       	push	r29
    1f20:	cf 93       	push	r28
    1f22:	cd b7       	in	r28, 0x3d	; 61
    1f24:	de b7       	in	r29, 0x3e	; 62
    1f26:	c3 54       	subi	r28, 0x43	; 67
    1f28:	d0 40       	sbci	r29, 0x00	; 0
    1f2a:	0f b6       	in	r0, 0x3f	; 63
    1f2c:	f8 94       	cli
    1f2e:	de bf       	out	0x3e, r29	; 62
    1f30:	0f be       	out	0x3f, r0	; 63
    1f32:	cd bf       	out	0x3d, r28	; 61
	/*motor*/
	Timer1_ConfigType config = {TIMER_INITIAL_VALUE,0,PRESCALER_1024,NORMAL};
    1f34:	ce 01       	movw	r24, r28
    1f36:	c9 96       	adiw	r24, 0x39	; 57
    1f38:	21 96       	adiw	r28, 0x01	; 1
    1f3a:	9f af       	std	Y+63, r25	; 0x3f
    1f3c:	8e af       	std	Y+62, r24	; 0x3e
    1f3e:	21 97       	sbiw	r28, 0x01	; 1
    1f40:	e8 e0       	ldi	r30, 0x08	; 8
    1f42:	f1 e0       	ldi	r31, 0x01	; 1
    1f44:	23 96       	adiw	r28, 0x03	; 3
    1f46:	ff af       	std	Y+63, r31	; 0x3f
    1f48:	ee af       	std	Y+62, r30	; 0x3e
    1f4a:	23 97       	sbiw	r28, 0x03	; 3
    1f4c:	f6 e0       	ldi	r31, 0x06	; 6
    1f4e:	24 96       	adiw	r28, 0x04	; 4
    1f50:	ff af       	std	Y+63, r31	; 0x3f
    1f52:	24 97       	sbiw	r28, 0x04	; 4
    1f54:	23 96       	adiw	r28, 0x03	; 3
    1f56:	ee ad       	ldd	r30, Y+62	; 0x3e
    1f58:	ff ad       	ldd	r31, Y+63	; 0x3f
    1f5a:	23 97       	sbiw	r28, 0x03	; 3
    1f5c:	00 80       	ld	r0, Z
    1f5e:	23 96       	adiw	r28, 0x03	; 3
    1f60:	8e ad       	ldd	r24, Y+62	; 0x3e
    1f62:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f64:	23 97       	sbiw	r28, 0x03	; 3
    1f66:	01 96       	adiw	r24, 0x01	; 1
    1f68:	23 96       	adiw	r28, 0x03	; 3
    1f6a:	9f af       	std	Y+63, r25	; 0x3f
    1f6c:	8e af       	std	Y+62, r24	; 0x3e
    1f6e:	23 97       	sbiw	r28, 0x03	; 3
    1f70:	21 96       	adiw	r28, 0x01	; 1
    1f72:	ee ad       	ldd	r30, Y+62	; 0x3e
    1f74:	ff ad       	ldd	r31, Y+63	; 0x3f
    1f76:	21 97       	sbiw	r28, 0x01	; 1
    1f78:	00 82       	st	Z, r0
    1f7a:	21 96       	adiw	r28, 0x01	; 1
    1f7c:	8e ad       	ldd	r24, Y+62	; 0x3e
    1f7e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f80:	21 97       	sbiw	r28, 0x01	; 1
    1f82:	01 96       	adiw	r24, 0x01	; 1
    1f84:	21 96       	adiw	r28, 0x01	; 1
    1f86:	9f af       	std	Y+63, r25	; 0x3f
    1f88:	8e af       	std	Y+62, r24	; 0x3e
    1f8a:	21 97       	sbiw	r28, 0x01	; 1
    1f8c:	24 96       	adiw	r28, 0x04	; 4
    1f8e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f90:	24 97       	sbiw	r28, 0x04	; 4
    1f92:	91 50       	subi	r25, 0x01	; 1
    1f94:	24 96       	adiw	r28, 0x04	; 4
    1f96:	9f af       	std	Y+63, r25	; 0x3f
    1f98:	24 97       	sbiw	r28, 0x04	; 4
    1f9a:	24 96       	adiw	r28, 0x04	; 4
    1f9c:	ef ad       	ldd	r30, Y+63	; 0x3f
    1f9e:	24 97       	sbiw	r28, 0x04	; 4
    1fa0:	ee 23       	and	r30, r30
    1fa2:	c1 f6       	brne	.-80     	; 0x1f54 <open_door+0x36>
	Timer1_setCallBack(callback_functon);
    1fa4:	87 ec       	ldi	r24, 0xC7	; 199
    1fa6:	97 e0       	ldi	r25, 0x07	; 7
    1fa8:	0e 94 96 06 	call	0xd2c	; 0xd2c <Timer1_setCallBack>
	trim_numb=3; /*to make 15sec*/
    1fac:	83 e0       	ldi	r24, 0x03	; 3
    1fae:	80 93 1e 01 	sts	0x011E, r24
	g_blocked=TRUE;
    1fb2:	81 e0       	ldi	r24, 0x01	; 1
    1fb4:	80 93 25 01 	sts	0x0125, r24
	Timer1_init(&config);
    1fb8:	ce 01       	movw	r24, r28
    1fba:	c9 96       	adiw	r24, 0x39	; 57
    1fbc:	0e 94 26 06 	call	0xc4c	; 0xc4c <Timer1_init>

	/*FIRST 15 SEC*/
	UART_sendByte(C_START_MOTOR); /*tell MC2 to open motor in clockwise*/
    1fc0:	8a ef       	ldi	r24, 0xFA	; 250
    1fc2:	0e 94 2b 07 	call	0xe56	; 0xe56 <UART_sendByte>
    1fc6:	80 e0       	ldi	r24, 0x00	; 0
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	a0 e2       	ldi	r26, 0x20	; 32
    1fcc:	b1 e4       	ldi	r27, 0x41	; 65
    1fce:	8d ab       	std	Y+53, r24	; 0x35
    1fd0:	9e ab       	std	Y+54, r25	; 0x36
    1fd2:	af ab       	std	Y+55, r26	; 0x37
    1fd4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fd6:	6d a9       	ldd	r22, Y+53	; 0x35
    1fd8:	7e a9       	ldd	r23, Y+54	; 0x36
    1fda:	8f a9       	ldd	r24, Y+55	; 0x37
    1fdc:	98 ad       	ldd	r25, Y+56	; 0x38
    1fde:	20 e0       	ldi	r18, 0x00	; 0
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	4a ef       	ldi	r20, 0xFA	; 250
    1fe4:	54 e4       	ldi	r21, 0x44	; 68
    1fe6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fea:	dc 01       	movw	r26, r24
    1fec:	cb 01       	movw	r24, r22
    1fee:	89 ab       	std	Y+49, r24	; 0x31
    1ff0:	9a ab       	std	Y+50, r25	; 0x32
    1ff2:	ab ab       	std	Y+51, r26	; 0x33
    1ff4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ff6:	69 a9       	ldd	r22, Y+49	; 0x31
    1ff8:	7a a9       	ldd	r23, Y+50	; 0x32
    1ffa:	8b a9       	ldd	r24, Y+51	; 0x33
    1ffc:	9c a9       	ldd	r25, Y+52	; 0x34
    1ffe:	20 e0       	ldi	r18, 0x00	; 0
    2000:	30 e0       	ldi	r19, 0x00	; 0
    2002:	40 e8       	ldi	r20, 0x80	; 128
    2004:	5f e3       	ldi	r21, 0x3F	; 63
    2006:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    200a:	88 23       	and	r24, r24
    200c:	2c f4       	brge	.+10     	; 0x2018 <open_door+0xfa>
		__ticks = 1;
    200e:	81 e0       	ldi	r24, 0x01	; 1
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	98 ab       	std	Y+48, r25	; 0x30
    2014:	8f a7       	std	Y+47, r24	; 0x2f
    2016:	3f c0       	rjmp	.+126    	; 0x2096 <open_door+0x178>
	else if (__tmp > 65535)
    2018:	69 a9       	ldd	r22, Y+49	; 0x31
    201a:	7a a9       	ldd	r23, Y+50	; 0x32
    201c:	8b a9       	ldd	r24, Y+51	; 0x33
    201e:	9c a9       	ldd	r25, Y+52	; 0x34
    2020:	20 e0       	ldi	r18, 0x00	; 0
    2022:	3f ef       	ldi	r19, 0xFF	; 255
    2024:	4f e7       	ldi	r20, 0x7F	; 127
    2026:	57 e4       	ldi	r21, 0x47	; 71
    2028:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    202c:	18 16       	cp	r1, r24
    202e:	4c f5       	brge	.+82     	; 0x2082 <open_door+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2030:	6d a9       	ldd	r22, Y+53	; 0x35
    2032:	7e a9       	ldd	r23, Y+54	; 0x36
    2034:	8f a9       	ldd	r24, Y+55	; 0x37
    2036:	98 ad       	ldd	r25, Y+56	; 0x38
    2038:	20 e0       	ldi	r18, 0x00	; 0
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	40 e2       	ldi	r20, 0x20	; 32
    203e:	51 e4       	ldi	r21, 0x41	; 65
    2040:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2044:	dc 01       	movw	r26, r24
    2046:	cb 01       	movw	r24, r22
    2048:	bc 01       	movw	r22, r24
    204a:	cd 01       	movw	r24, r26
    204c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2050:	dc 01       	movw	r26, r24
    2052:	cb 01       	movw	r24, r22
    2054:	98 ab       	std	Y+48, r25	; 0x30
    2056:	8f a7       	std	Y+47, r24	; 0x2f
    2058:	0f c0       	rjmp	.+30     	; 0x2078 <open_door+0x15a>
    205a:	88 ec       	ldi	r24, 0xC8	; 200
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	9e a7       	std	Y+46, r25	; 0x2e
    2060:	8d a7       	std	Y+45, r24	; 0x2d
    2062:	8d a5       	ldd	r24, Y+45	; 0x2d
    2064:	9e a5       	ldd	r25, Y+46	; 0x2e
    2066:	01 97       	sbiw	r24, 0x01	; 1
    2068:	f1 f7       	brne	.-4      	; 0x2066 <open_door+0x148>
    206a:	9e a7       	std	Y+46, r25	; 0x2e
    206c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    206e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2070:	98 a9       	ldd	r25, Y+48	; 0x30
    2072:	01 97       	sbiw	r24, 0x01	; 1
    2074:	98 ab       	std	Y+48, r25	; 0x30
    2076:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2078:	8f a5       	ldd	r24, Y+47	; 0x2f
    207a:	98 a9       	ldd	r25, Y+48	; 0x30
    207c:	00 97       	sbiw	r24, 0x00	; 0
    207e:	69 f7       	brne	.-38     	; 0x205a <open_door+0x13c>
    2080:	14 c0       	rjmp	.+40     	; 0x20aa <open_door+0x18c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2082:	69 a9       	ldd	r22, Y+49	; 0x31
    2084:	7a a9       	ldd	r23, Y+50	; 0x32
    2086:	8b a9       	ldd	r24, Y+51	; 0x33
    2088:	9c a9       	ldd	r25, Y+52	; 0x34
    208a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    208e:	dc 01       	movw	r26, r24
    2090:	cb 01       	movw	r24, r22
    2092:	98 ab       	std	Y+48, r25	; 0x30
    2094:	8f a7       	std	Y+47, r24	; 0x2f
    2096:	8f a5       	ldd	r24, Y+47	; 0x2f
    2098:	98 a9       	ldd	r25, Y+48	; 0x30
    209a:	9c a7       	std	Y+44, r25	; 0x2c
    209c:	8b a7       	std	Y+43, r24	; 0x2b
    209e:	8b a5       	ldd	r24, Y+43	; 0x2b
    20a0:	9c a5       	ldd	r25, Y+44	; 0x2c
    20a2:	01 97       	sbiw	r24, 0x01	; 1
    20a4:	f1 f7       	brne	.-4      	; 0x20a2 <open_door+0x184>
    20a6:	9c a7       	std	Y+44, r25	; 0x2c
    20a8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);
	LCD_clearScreen();
    20aa:	0e 94 83 25 	call	0x4b06	; 0x4b06 <LCD_clearScreen>
	LCD_writeString("Door is Unlocking");
    20ae:	8a ea       	ldi	r24, 0xAA	; 170
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	0e 94 f2 24 	call	0x49e4	; 0x49e4 <LCD_writeString>
	while(g_blocked);
    20b6:	80 91 25 01 	lds	r24, 0x0125
    20ba:	88 23       	and	r24, r24
    20bc:	e1 f7       	brne	.-8      	; 0x20b6 <open_door+0x198>

	g_blocked=TRUE;
    20be:	81 e0       	ldi	r24, 0x01	; 1
    20c0:	80 93 25 01 	sts	0x0125, r24
	trim_numb=1; /*to make 5sec*/
    20c4:	81 e0       	ldi	r24, 0x01	; 1
    20c6:	80 93 1e 01 	sts	0x011E, r24
	/*SECOND 5 SEC*/
	UART_sendByte(STOP_MOTOR);/*tell MC2 to STOP motor */
    20ca:	88 ef       	ldi	r24, 0xF8	; 248
    20cc:	0e 94 2b 07 	call	0xe56	; 0xe56 <UART_sendByte>
    20d0:	80 e0       	ldi	r24, 0x00	; 0
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	a0 e2       	ldi	r26, 0x20	; 32
    20d6:	b1 e4       	ldi	r27, 0x41	; 65
    20d8:	8f a3       	std	Y+39, r24	; 0x27
    20da:	98 a7       	std	Y+40, r25	; 0x28
    20dc:	a9 a7       	std	Y+41, r26	; 0x29
    20de:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20e0:	6f a1       	ldd	r22, Y+39	; 0x27
    20e2:	78 a5       	ldd	r23, Y+40	; 0x28
    20e4:	89 a5       	ldd	r24, Y+41	; 0x29
    20e6:	9a a5       	ldd	r25, Y+42	; 0x2a
    20e8:	20 e0       	ldi	r18, 0x00	; 0
    20ea:	30 e0       	ldi	r19, 0x00	; 0
    20ec:	4a ef       	ldi	r20, 0xFA	; 250
    20ee:	54 e4       	ldi	r21, 0x44	; 68
    20f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f4:	dc 01       	movw	r26, r24
    20f6:	cb 01       	movw	r24, r22
    20f8:	8b a3       	std	Y+35, r24	; 0x23
    20fa:	9c a3       	std	Y+36, r25	; 0x24
    20fc:	ad a3       	std	Y+37, r26	; 0x25
    20fe:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2100:	6b a1       	ldd	r22, Y+35	; 0x23
    2102:	7c a1       	ldd	r23, Y+36	; 0x24
    2104:	8d a1       	ldd	r24, Y+37	; 0x25
    2106:	9e a1       	ldd	r25, Y+38	; 0x26
    2108:	20 e0       	ldi	r18, 0x00	; 0
    210a:	30 e0       	ldi	r19, 0x00	; 0
    210c:	40 e8       	ldi	r20, 0x80	; 128
    210e:	5f e3       	ldi	r21, 0x3F	; 63
    2110:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2114:	88 23       	and	r24, r24
    2116:	2c f4       	brge	.+10     	; 0x2122 <open_door+0x204>
		__ticks = 1;
    2118:	81 e0       	ldi	r24, 0x01	; 1
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	9a a3       	std	Y+34, r25	; 0x22
    211e:	89 a3       	std	Y+33, r24	; 0x21
    2120:	3f c0       	rjmp	.+126    	; 0x21a0 <open_door+0x282>
	else if (__tmp > 65535)
    2122:	6b a1       	ldd	r22, Y+35	; 0x23
    2124:	7c a1       	ldd	r23, Y+36	; 0x24
    2126:	8d a1       	ldd	r24, Y+37	; 0x25
    2128:	9e a1       	ldd	r25, Y+38	; 0x26
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	3f ef       	ldi	r19, 0xFF	; 255
    212e:	4f e7       	ldi	r20, 0x7F	; 127
    2130:	57 e4       	ldi	r21, 0x47	; 71
    2132:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2136:	18 16       	cp	r1, r24
    2138:	4c f5       	brge	.+82     	; 0x218c <open_door+0x26e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    213a:	6f a1       	ldd	r22, Y+39	; 0x27
    213c:	78 a5       	ldd	r23, Y+40	; 0x28
    213e:	89 a5       	ldd	r24, Y+41	; 0x29
    2140:	9a a5       	ldd	r25, Y+42	; 0x2a
    2142:	20 e0       	ldi	r18, 0x00	; 0
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	40 e2       	ldi	r20, 0x20	; 32
    2148:	51 e4       	ldi	r21, 0x41	; 65
    214a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    214e:	dc 01       	movw	r26, r24
    2150:	cb 01       	movw	r24, r22
    2152:	bc 01       	movw	r22, r24
    2154:	cd 01       	movw	r24, r26
    2156:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    215a:	dc 01       	movw	r26, r24
    215c:	cb 01       	movw	r24, r22
    215e:	9a a3       	std	Y+34, r25	; 0x22
    2160:	89 a3       	std	Y+33, r24	; 0x21
    2162:	0f c0       	rjmp	.+30     	; 0x2182 <open_door+0x264>
    2164:	88 ec       	ldi	r24, 0xC8	; 200
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	98 a3       	std	Y+32, r25	; 0x20
    216a:	8f 8f       	std	Y+31, r24	; 0x1f
    216c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    216e:	98 a1       	ldd	r25, Y+32	; 0x20
    2170:	01 97       	sbiw	r24, 0x01	; 1
    2172:	f1 f7       	brne	.-4      	; 0x2170 <open_door+0x252>
    2174:	98 a3       	std	Y+32, r25	; 0x20
    2176:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2178:	89 a1       	ldd	r24, Y+33	; 0x21
    217a:	9a a1       	ldd	r25, Y+34	; 0x22
    217c:	01 97       	sbiw	r24, 0x01	; 1
    217e:	9a a3       	std	Y+34, r25	; 0x22
    2180:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2182:	89 a1       	ldd	r24, Y+33	; 0x21
    2184:	9a a1       	ldd	r25, Y+34	; 0x22
    2186:	00 97       	sbiw	r24, 0x00	; 0
    2188:	69 f7       	brne	.-38     	; 0x2164 <open_door+0x246>
    218a:	14 c0       	rjmp	.+40     	; 0x21b4 <open_door+0x296>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    218c:	6b a1       	ldd	r22, Y+35	; 0x23
    218e:	7c a1       	ldd	r23, Y+36	; 0x24
    2190:	8d a1       	ldd	r24, Y+37	; 0x25
    2192:	9e a1       	ldd	r25, Y+38	; 0x26
    2194:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2198:	dc 01       	movw	r26, r24
    219a:	cb 01       	movw	r24, r22
    219c:	9a a3       	std	Y+34, r25	; 0x22
    219e:	89 a3       	std	Y+33, r24	; 0x21
    21a0:	89 a1       	ldd	r24, Y+33	; 0x21
    21a2:	9a a1       	ldd	r25, Y+34	; 0x22
    21a4:	9e 8f       	std	Y+30, r25	; 0x1e
    21a6:	8d 8f       	std	Y+29, r24	; 0x1d
    21a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21aa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21ac:	01 97       	sbiw	r24, 0x01	; 1
    21ae:	f1 f7       	brne	.-4      	; 0x21ac <open_door+0x28e>
    21b0:	9e 8f       	std	Y+30, r25	; 0x1e
    21b2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);
	Timer1_init(&config); /*init timer again*/
    21b4:	ce 01       	movw	r24, r28
    21b6:	c9 96       	adiw	r24, 0x39	; 57
    21b8:	0e 94 26 06 	call	0xc4c	; 0xc4c <Timer1_init>
	LCD_clearScreen();
    21bc:	0e 94 83 25 	call	0x4b06	; 0x4b06 <LCD_clearScreen>
	LCD_writeString("Door is holding");
    21c0:	8c eb       	ldi	r24, 0xBC	; 188
    21c2:	90 e0       	ldi	r25, 0x00	; 0
    21c4:	0e 94 f2 24 	call	0x49e4	; 0x49e4 <LCD_writeString>
	while(g_blocked);
    21c8:	80 91 25 01 	lds	r24, 0x0125
    21cc:	88 23       	and	r24, r24
    21ce:	e1 f7       	brne	.-8      	; 0x21c8 <open_door+0x2aa>

	g_blocked=TRUE;
    21d0:	81 e0       	ldi	r24, 0x01	; 1
    21d2:	80 93 25 01 	sts	0x0125, r24
	trim_numb=3; /*to make 15sec*/
    21d6:	83 e0       	ldi	r24, 0x03	; 3
    21d8:	80 93 1e 01 	sts	0x011E, r24
	/*SECOND 15 SEC*/
	UART_sendByte(A_START_MOTOR);/*tell MC2 to open motor in anti_clockwise*/
    21dc:	89 ef       	ldi	r24, 0xF9	; 249
    21de:	0e 94 2b 07 	call	0xe56	; 0xe56 <UART_sendByte>
    21e2:	80 e0       	ldi	r24, 0x00	; 0
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	a0 e2       	ldi	r26, 0x20	; 32
    21e8:	b1 e4       	ldi	r27, 0x41	; 65
    21ea:	89 8f       	std	Y+25, r24	; 0x19
    21ec:	9a 8f       	std	Y+26, r25	; 0x1a
    21ee:	ab 8f       	std	Y+27, r26	; 0x1b
    21f0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21f2:	69 8d       	ldd	r22, Y+25	; 0x19
    21f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21fa:	20 e0       	ldi	r18, 0x00	; 0
    21fc:	30 e0       	ldi	r19, 0x00	; 0
    21fe:	4a ef       	ldi	r20, 0xFA	; 250
    2200:	54 e4       	ldi	r21, 0x44	; 68
    2202:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2206:	dc 01       	movw	r26, r24
    2208:	cb 01       	movw	r24, r22
    220a:	8d 8b       	std	Y+21, r24	; 0x15
    220c:	9e 8b       	std	Y+22, r25	; 0x16
    220e:	af 8b       	std	Y+23, r26	; 0x17
    2210:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2212:	6d 89       	ldd	r22, Y+21	; 0x15
    2214:	7e 89       	ldd	r23, Y+22	; 0x16
    2216:	8f 89       	ldd	r24, Y+23	; 0x17
    2218:	98 8d       	ldd	r25, Y+24	; 0x18
    221a:	20 e0       	ldi	r18, 0x00	; 0
    221c:	30 e0       	ldi	r19, 0x00	; 0
    221e:	40 e8       	ldi	r20, 0x80	; 128
    2220:	5f e3       	ldi	r21, 0x3F	; 63
    2222:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2226:	88 23       	and	r24, r24
    2228:	2c f4       	brge	.+10     	; 0x2234 <open_door+0x316>
		__ticks = 1;
    222a:	81 e0       	ldi	r24, 0x01	; 1
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	9c 8b       	std	Y+20, r25	; 0x14
    2230:	8b 8b       	std	Y+19, r24	; 0x13
    2232:	3f c0       	rjmp	.+126    	; 0x22b2 <open_door+0x394>
	else if (__tmp > 65535)
    2234:	6d 89       	ldd	r22, Y+21	; 0x15
    2236:	7e 89       	ldd	r23, Y+22	; 0x16
    2238:	8f 89       	ldd	r24, Y+23	; 0x17
    223a:	98 8d       	ldd	r25, Y+24	; 0x18
    223c:	20 e0       	ldi	r18, 0x00	; 0
    223e:	3f ef       	ldi	r19, 0xFF	; 255
    2240:	4f e7       	ldi	r20, 0x7F	; 127
    2242:	57 e4       	ldi	r21, 0x47	; 71
    2244:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2248:	18 16       	cp	r1, r24
    224a:	4c f5       	brge	.+82     	; 0x229e <open_door+0x380>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    224c:	69 8d       	ldd	r22, Y+25	; 0x19
    224e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2250:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2252:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2254:	20 e0       	ldi	r18, 0x00	; 0
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	40 e2       	ldi	r20, 0x20	; 32
    225a:	51 e4       	ldi	r21, 0x41	; 65
    225c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2260:	dc 01       	movw	r26, r24
    2262:	cb 01       	movw	r24, r22
    2264:	bc 01       	movw	r22, r24
    2266:	cd 01       	movw	r24, r26
    2268:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    226c:	dc 01       	movw	r26, r24
    226e:	cb 01       	movw	r24, r22
    2270:	9c 8b       	std	Y+20, r25	; 0x14
    2272:	8b 8b       	std	Y+19, r24	; 0x13
    2274:	0f c0       	rjmp	.+30     	; 0x2294 <open_door+0x376>
    2276:	88 ec       	ldi	r24, 0xC8	; 200
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	9a 8b       	std	Y+18, r25	; 0x12
    227c:	89 8b       	std	Y+17, r24	; 0x11
    227e:	89 89       	ldd	r24, Y+17	; 0x11
    2280:	9a 89       	ldd	r25, Y+18	; 0x12
    2282:	01 97       	sbiw	r24, 0x01	; 1
    2284:	f1 f7       	brne	.-4      	; 0x2282 <open_door+0x364>
    2286:	9a 8b       	std	Y+18, r25	; 0x12
    2288:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    228a:	8b 89       	ldd	r24, Y+19	; 0x13
    228c:	9c 89       	ldd	r25, Y+20	; 0x14
    228e:	01 97       	sbiw	r24, 0x01	; 1
    2290:	9c 8b       	std	Y+20, r25	; 0x14
    2292:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2294:	8b 89       	ldd	r24, Y+19	; 0x13
    2296:	9c 89       	ldd	r25, Y+20	; 0x14
    2298:	00 97       	sbiw	r24, 0x00	; 0
    229a:	69 f7       	brne	.-38     	; 0x2276 <open_door+0x358>
    229c:	14 c0       	rjmp	.+40     	; 0x22c6 <open_door+0x3a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    229e:	6d 89       	ldd	r22, Y+21	; 0x15
    22a0:	7e 89       	ldd	r23, Y+22	; 0x16
    22a2:	8f 89       	ldd	r24, Y+23	; 0x17
    22a4:	98 8d       	ldd	r25, Y+24	; 0x18
    22a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22aa:	dc 01       	movw	r26, r24
    22ac:	cb 01       	movw	r24, r22
    22ae:	9c 8b       	std	Y+20, r25	; 0x14
    22b0:	8b 8b       	std	Y+19, r24	; 0x13
    22b2:	8b 89       	ldd	r24, Y+19	; 0x13
    22b4:	9c 89       	ldd	r25, Y+20	; 0x14
    22b6:	98 8b       	std	Y+16, r25	; 0x10
    22b8:	8f 87       	std	Y+15, r24	; 0x0f
    22ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    22bc:	98 89       	ldd	r25, Y+16	; 0x10
    22be:	01 97       	sbiw	r24, 0x01	; 1
    22c0:	f1 f7       	brne	.-4      	; 0x22be <open_door+0x3a0>
    22c2:	98 8b       	std	Y+16, r25	; 0x10
    22c4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	Timer1_init(&config); /*init timer again*/
    22c6:	ce 01       	movw	r24, r28
    22c8:	c9 96       	adiw	r24, 0x39	; 57
    22ca:	0e 94 26 06 	call	0xc4c	; 0xc4c <Timer1_init>
	LCD_clearScreen();
    22ce:	0e 94 83 25 	call	0x4b06	; 0x4b06 <LCD_clearScreen>
	LCD_writeString("Door is locking");
    22d2:	8c ec       	ldi	r24, 0xCC	; 204
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	0e 94 f2 24 	call	0x49e4	; 0x49e4 <LCD_writeString>
	while(g_blocked);
    22da:	80 91 25 01 	lds	r24, 0x0125
    22de:	88 23       	and	r24, r24
    22e0:	e1 f7       	brne	.-8      	; 0x22da <open_door+0x3bc>

	LCD_clearScreen();
    22e2:	0e 94 83 25 	call	0x4b06	; 0x4b06 <LCD_clearScreen>
	UART_sendByte(STOP_MOTOR);/*tell MC2 to stop the motor*/
    22e6:	88 ef       	ldi	r24, 0xF8	; 248
    22e8:	0e 94 2b 07 	call	0xe56	; 0xe56 <UART_sendByte>
    22ec:	80 e0       	ldi	r24, 0x00	; 0
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	a0 e2       	ldi	r26, 0x20	; 32
    22f2:	b1 e4       	ldi	r27, 0x41	; 65
    22f4:	8b 87       	std	Y+11, r24	; 0x0b
    22f6:	9c 87       	std	Y+12, r25	; 0x0c
    22f8:	ad 87       	std	Y+13, r26	; 0x0d
    22fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    22fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2300:	8d 85       	ldd	r24, Y+13	; 0x0d
    2302:	9e 85       	ldd	r25, Y+14	; 0x0e
    2304:	20 e0       	ldi	r18, 0x00	; 0
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	4a ef       	ldi	r20, 0xFA	; 250
    230a:	54 e4       	ldi	r21, 0x44	; 68
    230c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2310:	dc 01       	movw	r26, r24
    2312:	cb 01       	movw	r24, r22
    2314:	8f 83       	std	Y+7, r24	; 0x07
    2316:	98 87       	std	Y+8, r25	; 0x08
    2318:	a9 87       	std	Y+9, r26	; 0x09
    231a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    231c:	6f 81       	ldd	r22, Y+7	; 0x07
    231e:	78 85       	ldd	r23, Y+8	; 0x08
    2320:	89 85       	ldd	r24, Y+9	; 0x09
    2322:	9a 85       	ldd	r25, Y+10	; 0x0a
    2324:	20 e0       	ldi	r18, 0x00	; 0
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	40 e8       	ldi	r20, 0x80	; 128
    232a:	5f e3       	ldi	r21, 0x3F	; 63
    232c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2330:	88 23       	and	r24, r24
    2332:	2c f4       	brge	.+10     	; 0x233e <open_door+0x420>
		__ticks = 1;
    2334:	81 e0       	ldi	r24, 0x01	; 1
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	9e 83       	std	Y+6, r25	; 0x06
    233a:	8d 83       	std	Y+5, r24	; 0x05
    233c:	3f c0       	rjmp	.+126    	; 0x23bc <open_door+0x49e>
	else if (__tmp > 65535)
    233e:	6f 81       	ldd	r22, Y+7	; 0x07
    2340:	78 85       	ldd	r23, Y+8	; 0x08
    2342:	89 85       	ldd	r24, Y+9	; 0x09
    2344:	9a 85       	ldd	r25, Y+10	; 0x0a
    2346:	20 e0       	ldi	r18, 0x00	; 0
    2348:	3f ef       	ldi	r19, 0xFF	; 255
    234a:	4f e7       	ldi	r20, 0x7F	; 127
    234c:	57 e4       	ldi	r21, 0x47	; 71
    234e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2352:	18 16       	cp	r1, r24
    2354:	4c f5       	brge	.+82     	; 0x23a8 <open_door+0x48a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2356:	6b 85       	ldd	r22, Y+11	; 0x0b
    2358:	7c 85       	ldd	r23, Y+12	; 0x0c
    235a:	8d 85       	ldd	r24, Y+13	; 0x0d
    235c:	9e 85       	ldd	r25, Y+14	; 0x0e
    235e:	20 e0       	ldi	r18, 0x00	; 0
    2360:	30 e0       	ldi	r19, 0x00	; 0
    2362:	40 e2       	ldi	r20, 0x20	; 32
    2364:	51 e4       	ldi	r21, 0x41	; 65
    2366:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    236a:	dc 01       	movw	r26, r24
    236c:	cb 01       	movw	r24, r22
    236e:	bc 01       	movw	r22, r24
    2370:	cd 01       	movw	r24, r26
    2372:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2376:	dc 01       	movw	r26, r24
    2378:	cb 01       	movw	r24, r22
    237a:	9e 83       	std	Y+6, r25	; 0x06
    237c:	8d 83       	std	Y+5, r24	; 0x05
    237e:	0f c0       	rjmp	.+30     	; 0x239e <open_door+0x480>
    2380:	88 ec       	ldi	r24, 0xC8	; 200
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	9c 83       	std	Y+4, r25	; 0x04
    2386:	8b 83       	std	Y+3, r24	; 0x03
    2388:	8b 81       	ldd	r24, Y+3	; 0x03
    238a:	9c 81       	ldd	r25, Y+4	; 0x04
    238c:	01 97       	sbiw	r24, 0x01	; 1
    238e:	f1 f7       	brne	.-4      	; 0x238c <open_door+0x46e>
    2390:	9c 83       	std	Y+4, r25	; 0x04
    2392:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2394:	8d 81       	ldd	r24, Y+5	; 0x05
    2396:	9e 81       	ldd	r25, Y+6	; 0x06
    2398:	01 97       	sbiw	r24, 0x01	; 1
    239a:	9e 83       	std	Y+6, r25	; 0x06
    239c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    239e:	8d 81       	ldd	r24, Y+5	; 0x05
    23a0:	9e 81       	ldd	r25, Y+6	; 0x06
    23a2:	00 97       	sbiw	r24, 0x00	; 0
    23a4:	69 f7       	brne	.-38     	; 0x2380 <open_door+0x462>
    23a6:	14 c0       	rjmp	.+40     	; 0x23d0 <open_door+0x4b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23a8:	6f 81       	ldd	r22, Y+7	; 0x07
    23aa:	78 85       	ldd	r23, Y+8	; 0x08
    23ac:	89 85       	ldd	r24, Y+9	; 0x09
    23ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    23b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23b4:	dc 01       	movw	r26, r24
    23b6:	cb 01       	movw	r24, r22
    23b8:	9e 83       	std	Y+6, r25	; 0x06
    23ba:	8d 83       	std	Y+5, r24	; 0x05
    23bc:	8d 81       	ldd	r24, Y+5	; 0x05
    23be:	9e 81       	ldd	r25, Y+6	; 0x06
    23c0:	9a 83       	std	Y+2, r25	; 0x02
    23c2:	89 83       	std	Y+1, r24	; 0x01
    23c4:	89 81       	ldd	r24, Y+1	; 0x01
    23c6:	9a 81       	ldd	r25, Y+2	; 0x02
    23c8:	01 97       	sbiw	r24, 0x01	; 1
    23ca:	f1 f7       	brne	.-4      	; 0x23c8 <open_door+0x4aa>
    23cc:	9a 83       	std	Y+2, r25	; 0x02
    23ce:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    23d0:	cd 5b       	subi	r28, 0xBD	; 189
    23d2:	df 4f       	sbci	r29, 0xFF	; 255
    23d4:	0f b6       	in	r0, 0x3f	; 63
    23d6:	f8 94       	cli
    23d8:	de bf       	out	0x3e, r29	; 62
    23da:	0f be       	out	0x3f, r0	; 63
    23dc:	cd bf       	out	0x3d, r28	; 61
    23de:	cf 91       	pop	r28
    23e0:	df 91       	pop	r29
    23e2:	08 95       	ret

000023e4 <step_3_open_the_door>:
 *
 * Args   : void
 * return : void
 *******************************************************************************/
void step_3_open_the_door(void)
{
    23e4:	df 93       	push	r29
    23e6:	cf 93       	push	r28
    23e8:	cd b7       	in	r28, 0x3d	; 61
    23ea:	de b7       	in	r29, 0x3e	; 62
    23ec:	ea 97       	sbiw	r28, 0x3a	; 58
    23ee:	0f b6       	in	r0, 0x3f	; 63
    23f0:	f8 94       	cli
    23f2:	de bf       	out	0x3e, r29	; 62
    23f4:	0f be       	out	0x3f, r0	; 63
    23f6:	cd bf       	out	0x3d, r28	; 61

	boolean is_pass_right;
	uint8 error_num=1;
    23f8:	81 e0       	ldi	r24, 0x01	; 1
    23fa:	89 af       	std	Y+57, r24	; 0x39
	is_pass_right= take_password_and_cheak_it();
    23fc:	0e 94 95 0b 	call	0x172a	; 0x172a <take_password_and_cheak_it>
    2400:	8a af       	std	Y+58, r24	; 0x3a

	if(is_pass_right)
    2402:	8a ad       	ldd	r24, Y+58	; 0x3a
    2404:	88 23       	and	r24, r24
    2406:	09 f4       	brne	.+2      	; 0x240a <step_3_open_the_door+0x26>
    2408:	7b c0       	rjmp	.+246    	; 0x2500 <step_3_open_the_door+0x11c>
	{
		LCD_clearScreen();
    240a:	0e 94 83 25 	call	0x4b06	; 0x4b06 <LCD_clearScreen>
		LCD_writeString("Correct pass");
    240e:	8c e8       	ldi	r24, 0x8C	; 140
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	0e 94 f2 24 	call	0x49e4	; 0x49e4 <LCD_writeString>
    2416:	80 e0       	ldi	r24, 0x00	; 0
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	aa e7       	ldi	r26, 0x7A	; 122
    241c:	b4 e4       	ldi	r27, 0x44	; 68
    241e:	8d ab       	std	Y+53, r24	; 0x35
    2420:	9e ab       	std	Y+54, r25	; 0x36
    2422:	af ab       	std	Y+55, r26	; 0x37
    2424:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2426:	6d a9       	ldd	r22, Y+53	; 0x35
    2428:	7e a9       	ldd	r23, Y+54	; 0x36
    242a:	8f a9       	ldd	r24, Y+55	; 0x37
    242c:	98 ad       	ldd	r25, Y+56	; 0x38
    242e:	20 e0       	ldi	r18, 0x00	; 0
    2430:	30 e0       	ldi	r19, 0x00	; 0
    2432:	4a ef       	ldi	r20, 0xFA	; 250
    2434:	54 e4       	ldi	r21, 0x44	; 68
    2436:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    243a:	dc 01       	movw	r26, r24
    243c:	cb 01       	movw	r24, r22
    243e:	89 ab       	std	Y+49, r24	; 0x31
    2440:	9a ab       	std	Y+50, r25	; 0x32
    2442:	ab ab       	std	Y+51, r26	; 0x33
    2444:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2446:	69 a9       	ldd	r22, Y+49	; 0x31
    2448:	7a a9       	ldd	r23, Y+50	; 0x32
    244a:	8b a9       	ldd	r24, Y+51	; 0x33
    244c:	9c a9       	ldd	r25, Y+52	; 0x34
    244e:	20 e0       	ldi	r18, 0x00	; 0
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	40 e8       	ldi	r20, 0x80	; 128
    2454:	5f e3       	ldi	r21, 0x3F	; 63
    2456:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    245a:	88 23       	and	r24, r24
    245c:	2c f4       	brge	.+10     	; 0x2468 <step_3_open_the_door+0x84>
		__ticks = 1;
    245e:	81 e0       	ldi	r24, 0x01	; 1
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	98 ab       	std	Y+48, r25	; 0x30
    2464:	8f a7       	std	Y+47, r24	; 0x2f
    2466:	3f c0       	rjmp	.+126    	; 0x24e6 <step_3_open_the_door+0x102>
	else if (__tmp > 65535)
    2468:	69 a9       	ldd	r22, Y+49	; 0x31
    246a:	7a a9       	ldd	r23, Y+50	; 0x32
    246c:	8b a9       	ldd	r24, Y+51	; 0x33
    246e:	9c a9       	ldd	r25, Y+52	; 0x34
    2470:	20 e0       	ldi	r18, 0x00	; 0
    2472:	3f ef       	ldi	r19, 0xFF	; 255
    2474:	4f e7       	ldi	r20, 0x7F	; 127
    2476:	57 e4       	ldi	r21, 0x47	; 71
    2478:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    247c:	18 16       	cp	r1, r24
    247e:	4c f5       	brge	.+82     	; 0x24d2 <step_3_open_the_door+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2480:	6d a9       	ldd	r22, Y+53	; 0x35
    2482:	7e a9       	ldd	r23, Y+54	; 0x36
    2484:	8f a9       	ldd	r24, Y+55	; 0x37
    2486:	98 ad       	ldd	r25, Y+56	; 0x38
    2488:	20 e0       	ldi	r18, 0x00	; 0
    248a:	30 e0       	ldi	r19, 0x00	; 0
    248c:	40 e2       	ldi	r20, 0x20	; 32
    248e:	51 e4       	ldi	r21, 0x41	; 65
    2490:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2494:	dc 01       	movw	r26, r24
    2496:	cb 01       	movw	r24, r22
    2498:	bc 01       	movw	r22, r24
    249a:	cd 01       	movw	r24, r26
    249c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24a0:	dc 01       	movw	r26, r24
    24a2:	cb 01       	movw	r24, r22
    24a4:	98 ab       	std	Y+48, r25	; 0x30
    24a6:	8f a7       	std	Y+47, r24	; 0x2f
    24a8:	0f c0       	rjmp	.+30     	; 0x24c8 <step_3_open_the_door+0xe4>
    24aa:	88 ec       	ldi	r24, 0xC8	; 200
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	9e a7       	std	Y+46, r25	; 0x2e
    24b0:	8d a7       	std	Y+45, r24	; 0x2d
    24b2:	8d a5       	ldd	r24, Y+45	; 0x2d
    24b4:	9e a5       	ldd	r25, Y+46	; 0x2e
    24b6:	01 97       	sbiw	r24, 0x01	; 1
    24b8:	f1 f7       	brne	.-4      	; 0x24b6 <step_3_open_the_door+0xd2>
    24ba:	9e a7       	std	Y+46, r25	; 0x2e
    24bc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24be:	8f a5       	ldd	r24, Y+47	; 0x2f
    24c0:	98 a9       	ldd	r25, Y+48	; 0x30
    24c2:	01 97       	sbiw	r24, 0x01	; 1
    24c4:	98 ab       	std	Y+48, r25	; 0x30
    24c6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    24ca:	98 a9       	ldd	r25, Y+48	; 0x30
    24cc:	00 97       	sbiw	r24, 0x00	; 0
    24ce:	69 f7       	brne	.-38     	; 0x24aa <step_3_open_the_door+0xc6>
    24d0:	14 c0       	rjmp	.+40     	; 0x24fa <step_3_open_the_door+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24d2:	69 a9       	ldd	r22, Y+49	; 0x31
    24d4:	7a a9       	ldd	r23, Y+50	; 0x32
    24d6:	8b a9       	ldd	r24, Y+51	; 0x33
    24d8:	9c a9       	ldd	r25, Y+52	; 0x34
    24da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24de:	dc 01       	movw	r26, r24
    24e0:	cb 01       	movw	r24, r22
    24e2:	98 ab       	std	Y+48, r25	; 0x30
    24e4:	8f a7       	std	Y+47, r24	; 0x2f
    24e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    24e8:	98 a9       	ldd	r25, Y+48	; 0x30
    24ea:	9c a7       	std	Y+44, r25	; 0x2c
    24ec:	8b a7       	std	Y+43, r24	; 0x2b
    24ee:	8b a5       	ldd	r24, Y+43	; 0x2b
    24f0:	9c a5       	ldd	r25, Y+44	; 0x2c
    24f2:	01 97       	sbiw	r24, 0x01	; 1
    24f4:	f1 f7       	brne	.-4      	; 0x24f2 <step_3_open_the_door+0x10e>
    24f6:	9c a7       	std	Y+44, r25	; 0x2c
    24f8:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1000);
		open_door();
    24fa:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <open_door>
    24fe:	79 c1       	rjmp	.+754    	; 0x27f2 <step_3_open_the_door+0x40e>
	}else
	{
		LCD_clearScreen();
    2500:	0e 94 83 25 	call	0x4b06	; 0x4b06 <LCD_clearScreen>
		LCD_writeString("Not correct pass");
    2504:	89 e9       	ldi	r24, 0x99	; 153
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	0e 94 f2 24 	call	0x49e4	; 0x49e4 <LCD_writeString>
    250c:	80 e0       	ldi	r24, 0x00	; 0
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	aa ef       	ldi	r26, 0xFA	; 250
    2512:	b4 e4       	ldi	r27, 0x44	; 68
    2514:	8f a3       	std	Y+39, r24	; 0x27
    2516:	98 a7       	std	Y+40, r25	; 0x28
    2518:	a9 a7       	std	Y+41, r26	; 0x29
    251a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    251c:	6f a1       	ldd	r22, Y+39	; 0x27
    251e:	78 a5       	ldd	r23, Y+40	; 0x28
    2520:	89 a5       	ldd	r24, Y+41	; 0x29
    2522:	9a a5       	ldd	r25, Y+42	; 0x2a
    2524:	20 e0       	ldi	r18, 0x00	; 0
    2526:	30 e0       	ldi	r19, 0x00	; 0
    2528:	4a ef       	ldi	r20, 0xFA	; 250
    252a:	54 e4       	ldi	r21, 0x44	; 68
    252c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2530:	dc 01       	movw	r26, r24
    2532:	cb 01       	movw	r24, r22
    2534:	8b a3       	std	Y+35, r24	; 0x23
    2536:	9c a3       	std	Y+36, r25	; 0x24
    2538:	ad a3       	std	Y+37, r26	; 0x25
    253a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    253c:	6b a1       	ldd	r22, Y+35	; 0x23
    253e:	7c a1       	ldd	r23, Y+36	; 0x24
    2540:	8d a1       	ldd	r24, Y+37	; 0x25
    2542:	9e a1       	ldd	r25, Y+38	; 0x26
    2544:	20 e0       	ldi	r18, 0x00	; 0
    2546:	30 e0       	ldi	r19, 0x00	; 0
    2548:	40 e8       	ldi	r20, 0x80	; 128
    254a:	5f e3       	ldi	r21, 0x3F	; 63
    254c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2550:	88 23       	and	r24, r24
    2552:	2c f4       	brge	.+10     	; 0x255e <step_3_open_the_door+0x17a>
		__ticks = 1;
    2554:	81 e0       	ldi	r24, 0x01	; 1
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	9a a3       	std	Y+34, r25	; 0x22
    255a:	89 a3       	std	Y+33, r24	; 0x21
    255c:	3f c0       	rjmp	.+126    	; 0x25dc <step_3_open_the_door+0x1f8>
	else if (__tmp > 65535)
    255e:	6b a1       	ldd	r22, Y+35	; 0x23
    2560:	7c a1       	ldd	r23, Y+36	; 0x24
    2562:	8d a1       	ldd	r24, Y+37	; 0x25
    2564:	9e a1       	ldd	r25, Y+38	; 0x26
    2566:	20 e0       	ldi	r18, 0x00	; 0
    2568:	3f ef       	ldi	r19, 0xFF	; 255
    256a:	4f e7       	ldi	r20, 0x7F	; 127
    256c:	57 e4       	ldi	r21, 0x47	; 71
    256e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2572:	18 16       	cp	r1, r24
    2574:	4c f5       	brge	.+82     	; 0x25c8 <step_3_open_the_door+0x1e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2576:	6f a1       	ldd	r22, Y+39	; 0x27
    2578:	78 a5       	ldd	r23, Y+40	; 0x28
    257a:	89 a5       	ldd	r24, Y+41	; 0x29
    257c:	9a a5       	ldd	r25, Y+42	; 0x2a
    257e:	20 e0       	ldi	r18, 0x00	; 0
    2580:	30 e0       	ldi	r19, 0x00	; 0
    2582:	40 e2       	ldi	r20, 0x20	; 32
    2584:	51 e4       	ldi	r21, 0x41	; 65
    2586:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    258a:	dc 01       	movw	r26, r24
    258c:	cb 01       	movw	r24, r22
    258e:	bc 01       	movw	r22, r24
    2590:	cd 01       	movw	r24, r26
    2592:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2596:	dc 01       	movw	r26, r24
    2598:	cb 01       	movw	r24, r22
    259a:	9a a3       	std	Y+34, r25	; 0x22
    259c:	89 a3       	std	Y+33, r24	; 0x21
    259e:	0f c0       	rjmp	.+30     	; 0x25be <step_3_open_the_door+0x1da>
    25a0:	88 ec       	ldi	r24, 0xC8	; 200
    25a2:	90 e0       	ldi	r25, 0x00	; 0
    25a4:	98 a3       	std	Y+32, r25	; 0x20
    25a6:	8f 8f       	std	Y+31, r24	; 0x1f
    25a8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25aa:	98 a1       	ldd	r25, Y+32	; 0x20
    25ac:	01 97       	sbiw	r24, 0x01	; 1
    25ae:	f1 f7       	brne	.-4      	; 0x25ac <step_3_open_the_door+0x1c8>
    25b0:	98 a3       	std	Y+32, r25	; 0x20
    25b2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25b4:	89 a1       	ldd	r24, Y+33	; 0x21
    25b6:	9a a1       	ldd	r25, Y+34	; 0x22
    25b8:	01 97       	sbiw	r24, 0x01	; 1
    25ba:	9a a3       	std	Y+34, r25	; 0x22
    25bc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25be:	89 a1       	ldd	r24, Y+33	; 0x21
    25c0:	9a a1       	ldd	r25, Y+34	; 0x22
    25c2:	00 97       	sbiw	r24, 0x00	; 0
    25c4:	69 f7       	brne	.-38     	; 0x25a0 <step_3_open_the_door+0x1bc>
    25c6:	96 c0       	rjmp	.+300    	; 0x26f4 <step_3_open_the_door+0x310>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25c8:	6b a1       	ldd	r22, Y+35	; 0x23
    25ca:	7c a1       	ldd	r23, Y+36	; 0x24
    25cc:	8d a1       	ldd	r24, Y+37	; 0x25
    25ce:	9e a1       	ldd	r25, Y+38	; 0x26
    25d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d4:	dc 01       	movw	r26, r24
    25d6:	cb 01       	movw	r24, r22
    25d8:	9a a3       	std	Y+34, r25	; 0x22
    25da:	89 a3       	std	Y+33, r24	; 0x21
    25dc:	89 a1       	ldd	r24, Y+33	; 0x21
    25de:	9a a1       	ldd	r25, Y+34	; 0x22
    25e0:	9e 8f       	std	Y+30, r25	; 0x1e
    25e2:	8d 8f       	std	Y+29, r24	; 0x1d
    25e4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25e6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25e8:	01 97       	sbiw	r24, 0x01	; 1
    25ea:	f1 f7       	brne	.-4      	; 0x25e8 <step_3_open_the_door+0x204>
    25ec:	9e 8f       	std	Y+30, r25	; 0x1e
    25ee:	8d 8f       	std	Y+29, r24	; 0x1d
    25f0:	81 c0       	rjmp	.+258    	; 0x26f4 <step_3_open_the_door+0x310>
		_delay_ms(2000);
		while( !take_password_and_cheak_it() ) /*will loop till it's true or break statment*/
		{

			error_num++;
    25f2:	89 ad       	ldd	r24, Y+57	; 0x39
    25f4:	8f 5f       	subi	r24, 0xFF	; 255
    25f6:	89 af       	std	Y+57, r24	; 0x39


			if(error_num>=ERROR_NUM)
    25f8:	89 ad       	ldd	r24, Y+57	; 0x39
    25fa:	83 30       	cpi	r24, 0x03	; 3
    25fc:	18 f0       	brcs	.+6      	; 0x2604 <step_3_open_the_door+0x220>
			{
				error_pass();
    25fe:	0e 94 04 14 	call	0x2808	; 0x2808 <error_pass>
    2602:	f9 c0       	rjmp	.+498    	; 0x27f6 <step_3_open_the_door+0x412>
				return;
			}
			LCD_clearScreen();
    2604:	0e 94 83 25 	call	0x4b06	; 0x4b06 <LCD_clearScreen>
			LCD_writeString("Not correct pass");
    2608:	89 e9       	ldi	r24, 0x99	; 153
    260a:	90 e0       	ldi	r25, 0x00	; 0
    260c:	0e 94 f2 24 	call	0x49e4	; 0x49e4 <LCD_writeString>
    2610:	80 e0       	ldi	r24, 0x00	; 0
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	aa ef       	ldi	r26, 0xFA	; 250
    2616:	b4 e4       	ldi	r27, 0x44	; 68
    2618:	89 8f       	std	Y+25, r24	; 0x19
    261a:	9a 8f       	std	Y+26, r25	; 0x1a
    261c:	ab 8f       	std	Y+27, r26	; 0x1b
    261e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2620:	69 8d       	ldd	r22, Y+25	; 0x19
    2622:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2624:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2626:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2628:	20 e0       	ldi	r18, 0x00	; 0
    262a:	30 e0       	ldi	r19, 0x00	; 0
    262c:	4a ef       	ldi	r20, 0xFA	; 250
    262e:	54 e4       	ldi	r21, 0x44	; 68
    2630:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2634:	dc 01       	movw	r26, r24
    2636:	cb 01       	movw	r24, r22
    2638:	8d 8b       	std	Y+21, r24	; 0x15
    263a:	9e 8b       	std	Y+22, r25	; 0x16
    263c:	af 8b       	std	Y+23, r26	; 0x17
    263e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2640:	6d 89       	ldd	r22, Y+21	; 0x15
    2642:	7e 89       	ldd	r23, Y+22	; 0x16
    2644:	8f 89       	ldd	r24, Y+23	; 0x17
    2646:	98 8d       	ldd	r25, Y+24	; 0x18
    2648:	20 e0       	ldi	r18, 0x00	; 0
    264a:	30 e0       	ldi	r19, 0x00	; 0
    264c:	40 e8       	ldi	r20, 0x80	; 128
    264e:	5f e3       	ldi	r21, 0x3F	; 63
    2650:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2654:	88 23       	and	r24, r24
    2656:	2c f4       	brge	.+10     	; 0x2662 <step_3_open_the_door+0x27e>
		__ticks = 1;
    2658:	81 e0       	ldi	r24, 0x01	; 1
    265a:	90 e0       	ldi	r25, 0x00	; 0
    265c:	9c 8b       	std	Y+20, r25	; 0x14
    265e:	8b 8b       	std	Y+19, r24	; 0x13
    2660:	3f c0       	rjmp	.+126    	; 0x26e0 <step_3_open_the_door+0x2fc>
	else if (__tmp > 65535)
    2662:	6d 89       	ldd	r22, Y+21	; 0x15
    2664:	7e 89       	ldd	r23, Y+22	; 0x16
    2666:	8f 89       	ldd	r24, Y+23	; 0x17
    2668:	98 8d       	ldd	r25, Y+24	; 0x18
    266a:	20 e0       	ldi	r18, 0x00	; 0
    266c:	3f ef       	ldi	r19, 0xFF	; 255
    266e:	4f e7       	ldi	r20, 0x7F	; 127
    2670:	57 e4       	ldi	r21, 0x47	; 71
    2672:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2676:	18 16       	cp	r1, r24
    2678:	4c f5       	brge	.+82     	; 0x26cc <step_3_open_the_door+0x2e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    267a:	69 8d       	ldd	r22, Y+25	; 0x19
    267c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    267e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2680:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2682:	20 e0       	ldi	r18, 0x00	; 0
    2684:	30 e0       	ldi	r19, 0x00	; 0
    2686:	40 e2       	ldi	r20, 0x20	; 32
    2688:	51 e4       	ldi	r21, 0x41	; 65
    268a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    268e:	dc 01       	movw	r26, r24
    2690:	cb 01       	movw	r24, r22
    2692:	bc 01       	movw	r22, r24
    2694:	cd 01       	movw	r24, r26
    2696:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    269a:	dc 01       	movw	r26, r24
    269c:	cb 01       	movw	r24, r22
    269e:	9c 8b       	std	Y+20, r25	; 0x14
    26a0:	8b 8b       	std	Y+19, r24	; 0x13
    26a2:	0f c0       	rjmp	.+30     	; 0x26c2 <step_3_open_the_door+0x2de>
    26a4:	88 ec       	ldi	r24, 0xC8	; 200
    26a6:	90 e0       	ldi	r25, 0x00	; 0
    26a8:	9a 8b       	std	Y+18, r25	; 0x12
    26aa:	89 8b       	std	Y+17, r24	; 0x11
    26ac:	89 89       	ldd	r24, Y+17	; 0x11
    26ae:	9a 89       	ldd	r25, Y+18	; 0x12
    26b0:	01 97       	sbiw	r24, 0x01	; 1
    26b2:	f1 f7       	brne	.-4      	; 0x26b0 <step_3_open_the_door+0x2cc>
    26b4:	9a 8b       	std	Y+18, r25	; 0x12
    26b6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26b8:	8b 89       	ldd	r24, Y+19	; 0x13
    26ba:	9c 89       	ldd	r25, Y+20	; 0x14
    26bc:	01 97       	sbiw	r24, 0x01	; 1
    26be:	9c 8b       	std	Y+20, r25	; 0x14
    26c0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26c2:	8b 89       	ldd	r24, Y+19	; 0x13
    26c4:	9c 89       	ldd	r25, Y+20	; 0x14
    26c6:	00 97       	sbiw	r24, 0x00	; 0
    26c8:	69 f7       	brne	.-38     	; 0x26a4 <step_3_open_the_door+0x2c0>
    26ca:	14 c0       	rjmp	.+40     	; 0x26f4 <step_3_open_the_door+0x310>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26cc:	6d 89       	ldd	r22, Y+21	; 0x15
    26ce:	7e 89       	ldd	r23, Y+22	; 0x16
    26d0:	8f 89       	ldd	r24, Y+23	; 0x17
    26d2:	98 8d       	ldd	r25, Y+24	; 0x18
    26d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26d8:	dc 01       	movw	r26, r24
    26da:	cb 01       	movw	r24, r22
    26dc:	9c 8b       	std	Y+20, r25	; 0x14
    26de:	8b 8b       	std	Y+19, r24	; 0x13
    26e0:	8b 89       	ldd	r24, Y+19	; 0x13
    26e2:	9c 89       	ldd	r25, Y+20	; 0x14
    26e4:	98 8b       	std	Y+16, r25	; 0x10
    26e6:	8f 87       	std	Y+15, r24	; 0x0f
    26e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    26ea:	98 89       	ldd	r25, Y+16	; 0x10
    26ec:	01 97       	sbiw	r24, 0x01	; 1
    26ee:	f1 f7       	brne	.-4      	; 0x26ec <step_3_open_the_door+0x308>
    26f0:	98 8b       	std	Y+16, r25	; 0x10
    26f2:	8f 87       	std	Y+15, r24	; 0x0f
	}else
	{
		LCD_clearScreen();
		LCD_writeString("Not correct pass");
		_delay_ms(2000);
		while( !take_password_and_cheak_it() ) /*will loop till it's true or break statment*/
    26f4:	0e 94 95 0b 	call	0x172a	; 0x172a <take_password_and_cheak_it>
    26f8:	88 23       	and	r24, r24
    26fa:	09 f4       	brne	.+2      	; 0x26fe <step_3_open_the_door+0x31a>
    26fc:	7a cf       	rjmp	.-268    	; 0x25f2 <step_3_open_the_door+0x20e>
			}
			LCD_clearScreen();
			LCD_writeString("Not correct pass");
			_delay_ms(2000);
		}
		LCD_clearScreen();
    26fe:	0e 94 83 25 	call	0x4b06	; 0x4b06 <LCD_clearScreen>
		LCD_writeString("Correct pass");
    2702:	8c e8       	ldi	r24, 0x8C	; 140
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	0e 94 f2 24 	call	0x49e4	; 0x49e4 <LCD_writeString>
    270a:	80 e0       	ldi	r24, 0x00	; 0
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	aa e7       	ldi	r26, 0x7A	; 122
    2710:	b4 e4       	ldi	r27, 0x44	; 68
    2712:	8b 87       	std	Y+11, r24	; 0x0b
    2714:	9c 87       	std	Y+12, r25	; 0x0c
    2716:	ad 87       	std	Y+13, r26	; 0x0d
    2718:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    271a:	6b 85       	ldd	r22, Y+11	; 0x0b
    271c:	7c 85       	ldd	r23, Y+12	; 0x0c
    271e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2720:	9e 85       	ldd	r25, Y+14	; 0x0e
    2722:	20 e0       	ldi	r18, 0x00	; 0
    2724:	30 e0       	ldi	r19, 0x00	; 0
    2726:	4a ef       	ldi	r20, 0xFA	; 250
    2728:	54 e4       	ldi	r21, 0x44	; 68
    272a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    272e:	dc 01       	movw	r26, r24
    2730:	cb 01       	movw	r24, r22
    2732:	8f 83       	std	Y+7, r24	; 0x07
    2734:	98 87       	std	Y+8, r25	; 0x08
    2736:	a9 87       	std	Y+9, r26	; 0x09
    2738:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    273a:	6f 81       	ldd	r22, Y+7	; 0x07
    273c:	78 85       	ldd	r23, Y+8	; 0x08
    273e:	89 85       	ldd	r24, Y+9	; 0x09
    2740:	9a 85       	ldd	r25, Y+10	; 0x0a
    2742:	20 e0       	ldi	r18, 0x00	; 0
    2744:	30 e0       	ldi	r19, 0x00	; 0
    2746:	40 e8       	ldi	r20, 0x80	; 128
    2748:	5f e3       	ldi	r21, 0x3F	; 63
    274a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    274e:	88 23       	and	r24, r24
    2750:	2c f4       	brge	.+10     	; 0x275c <step_3_open_the_door+0x378>
		__ticks = 1;
    2752:	81 e0       	ldi	r24, 0x01	; 1
    2754:	90 e0       	ldi	r25, 0x00	; 0
    2756:	9e 83       	std	Y+6, r25	; 0x06
    2758:	8d 83       	std	Y+5, r24	; 0x05
    275a:	3f c0       	rjmp	.+126    	; 0x27da <step_3_open_the_door+0x3f6>
	else if (__tmp > 65535)
    275c:	6f 81       	ldd	r22, Y+7	; 0x07
    275e:	78 85       	ldd	r23, Y+8	; 0x08
    2760:	89 85       	ldd	r24, Y+9	; 0x09
    2762:	9a 85       	ldd	r25, Y+10	; 0x0a
    2764:	20 e0       	ldi	r18, 0x00	; 0
    2766:	3f ef       	ldi	r19, 0xFF	; 255
    2768:	4f e7       	ldi	r20, 0x7F	; 127
    276a:	57 e4       	ldi	r21, 0x47	; 71
    276c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2770:	18 16       	cp	r1, r24
    2772:	4c f5       	brge	.+82     	; 0x27c6 <step_3_open_the_door+0x3e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2774:	6b 85       	ldd	r22, Y+11	; 0x0b
    2776:	7c 85       	ldd	r23, Y+12	; 0x0c
    2778:	8d 85       	ldd	r24, Y+13	; 0x0d
    277a:	9e 85       	ldd	r25, Y+14	; 0x0e
    277c:	20 e0       	ldi	r18, 0x00	; 0
    277e:	30 e0       	ldi	r19, 0x00	; 0
    2780:	40 e2       	ldi	r20, 0x20	; 32
    2782:	51 e4       	ldi	r21, 0x41	; 65
    2784:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2788:	dc 01       	movw	r26, r24
    278a:	cb 01       	movw	r24, r22
    278c:	bc 01       	movw	r22, r24
    278e:	cd 01       	movw	r24, r26
    2790:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2794:	dc 01       	movw	r26, r24
    2796:	cb 01       	movw	r24, r22
    2798:	9e 83       	std	Y+6, r25	; 0x06
    279a:	8d 83       	std	Y+5, r24	; 0x05
    279c:	0f c0       	rjmp	.+30     	; 0x27bc <step_3_open_the_door+0x3d8>
    279e:	88 ec       	ldi	r24, 0xC8	; 200
    27a0:	90 e0       	ldi	r25, 0x00	; 0
    27a2:	9c 83       	std	Y+4, r25	; 0x04
    27a4:	8b 83       	std	Y+3, r24	; 0x03
    27a6:	8b 81       	ldd	r24, Y+3	; 0x03
    27a8:	9c 81       	ldd	r25, Y+4	; 0x04
    27aa:	01 97       	sbiw	r24, 0x01	; 1
    27ac:	f1 f7       	brne	.-4      	; 0x27aa <step_3_open_the_door+0x3c6>
    27ae:	9c 83       	std	Y+4, r25	; 0x04
    27b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27b2:	8d 81       	ldd	r24, Y+5	; 0x05
    27b4:	9e 81       	ldd	r25, Y+6	; 0x06
    27b6:	01 97       	sbiw	r24, 0x01	; 1
    27b8:	9e 83       	std	Y+6, r25	; 0x06
    27ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27bc:	8d 81       	ldd	r24, Y+5	; 0x05
    27be:	9e 81       	ldd	r25, Y+6	; 0x06
    27c0:	00 97       	sbiw	r24, 0x00	; 0
    27c2:	69 f7       	brne	.-38     	; 0x279e <step_3_open_the_door+0x3ba>
    27c4:	14 c0       	rjmp	.+40     	; 0x27ee <step_3_open_the_door+0x40a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27c6:	6f 81       	ldd	r22, Y+7	; 0x07
    27c8:	78 85       	ldd	r23, Y+8	; 0x08
    27ca:	89 85       	ldd	r24, Y+9	; 0x09
    27cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d2:	dc 01       	movw	r26, r24
    27d4:	cb 01       	movw	r24, r22
    27d6:	9e 83       	std	Y+6, r25	; 0x06
    27d8:	8d 83       	std	Y+5, r24	; 0x05
    27da:	8d 81       	ldd	r24, Y+5	; 0x05
    27dc:	9e 81       	ldd	r25, Y+6	; 0x06
    27de:	9a 83       	std	Y+2, r25	; 0x02
    27e0:	89 83       	std	Y+1, r24	; 0x01
    27e2:	89 81       	ldd	r24, Y+1	; 0x01
    27e4:	9a 81       	ldd	r25, Y+2	; 0x02
    27e6:	01 97       	sbiw	r24, 0x01	; 1
    27e8:	f1 f7       	brne	.-4      	; 0x27e6 <step_3_open_the_door+0x402>
    27ea:	9a 83       	std	Y+2, r25	; 0x02
    27ec:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		open_door(); /*if the user enter correct password after wrong one*/
    27ee:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <open_door>
	}

	LCD_clearScreen();
    27f2:	0e 94 83 25 	call	0x4b06	; 0x4b06 <LCD_clearScreen>
}
    27f6:	ea 96       	adiw	r28, 0x3a	; 58
    27f8:	0f b6       	in	r0, 0x3f	; 63
    27fa:	f8 94       	cli
    27fc:	de bf       	out	0x3e, r29	; 62
    27fe:	0f be       	out	0x3f, r0	; 63
    2800:	cd bf       	out	0x3d, r28	; 61
    2802:	cf 91       	pop	r28
    2804:	df 91       	pop	r29
    2806:	08 95       	ret

00002808 <error_pass>:
 * Args   : void
 * return : void
 *******************************************************************************/

void error_pass(void)
{
    2808:	df 93       	push	r29
    280a:	cf 93       	push	r28
    280c:	cd b7       	in	r28, 0x3d	; 61
    280e:	de b7       	in	r29, 0x3e	; 62
    2810:	a7 97       	sbiw	r28, 0x27	; 39
    2812:	0f b6       	in	r0, 0x3f	; 63
    2814:	f8 94       	cli
    2816:	de bf       	out	0x3e, r29	; 62
    2818:	0f be       	out	0x3f, r0	; 63
    281a:	cd bf       	out	0x3d, r28	; 61
	Timer1_ConfigType config = {TIMER_INITIAL_VALUE,0,PRESCALER_1024,NORMAL};
    281c:	ce 01       	movw	r24, r28
    281e:	4d 96       	adiw	r24, 0x1d	; 29
    2820:	9c a3       	std	Y+36, r25	; 0x24
    2822:	8b a3       	std	Y+35, r24	; 0x23
    2824:	ee e0       	ldi	r30, 0x0E	; 14
    2826:	f1 e0       	ldi	r31, 0x01	; 1
    2828:	fe a3       	std	Y+38, r31	; 0x26
    282a:	ed a3       	std	Y+37, r30	; 0x25
    282c:	f6 e0       	ldi	r31, 0x06	; 6
    282e:	ff a3       	std	Y+39, r31	; 0x27
    2830:	ed a1       	ldd	r30, Y+37	; 0x25
    2832:	fe a1       	ldd	r31, Y+38	; 0x26
    2834:	00 80       	ld	r0, Z
    2836:	8d a1       	ldd	r24, Y+37	; 0x25
    2838:	9e a1       	ldd	r25, Y+38	; 0x26
    283a:	01 96       	adiw	r24, 0x01	; 1
    283c:	9e a3       	std	Y+38, r25	; 0x26
    283e:	8d a3       	std	Y+37, r24	; 0x25
    2840:	eb a1       	ldd	r30, Y+35	; 0x23
    2842:	fc a1       	ldd	r31, Y+36	; 0x24
    2844:	00 82       	st	Z, r0
    2846:	8b a1       	ldd	r24, Y+35	; 0x23
    2848:	9c a1       	ldd	r25, Y+36	; 0x24
    284a:	01 96       	adiw	r24, 0x01	; 1
    284c:	9c a3       	std	Y+36, r25	; 0x24
    284e:	8b a3       	std	Y+35, r24	; 0x23
    2850:	9f a1       	ldd	r25, Y+39	; 0x27
    2852:	91 50       	subi	r25, 0x01	; 1
    2854:	9f a3       	std	Y+39, r25	; 0x27
    2856:	ef a1       	ldd	r30, Y+39	; 0x27
    2858:	ee 23       	and	r30, r30
    285a:	51 f7       	brne	.-44     	; 0x2830 <error_pass+0x28>
	Timer1_init(&config);
    285c:	ce 01       	movw	r24, r28
    285e:	4d 96       	adiw	r24, 0x1d	; 29
    2860:	0e 94 26 06 	call	0xc4c	; 0xc4c <Timer1_init>
	Timer1_setCallBack(callback_functon);
    2864:	87 ec       	ldi	r24, 0xC7	; 199
    2866:	97 e0       	ldi	r25, 0x07	; 7
    2868:	0e 94 96 06 	call	0xd2c	; 0xd2c <Timer1_setCallBack>
	trim_numb=12; /*to make 60 sec*/
    286c:	8c e0       	ldi	r24, 0x0C	; 12
    286e:	80 93 1e 01 	sts	0x011E, r24
	g_blocked=TRUE;
    2872:	81 e0       	ldi	r24, 0x01	; 1
    2874:	80 93 25 01 	sts	0x0125, r24
	UART_sendByte(BUZZER_ON); /*tells MC2 to open buzzer*/
    2878:	8c ef       	ldi	r24, 0xFC	; 252
    287a:	0e 94 2b 07 	call	0xe56	; 0xe56 <UART_sendByte>
    287e:	80 e0       	ldi	r24, 0x00	; 0
    2880:	90 e0       	ldi	r25, 0x00	; 0
    2882:	a0 e2       	ldi	r26, 0x20	; 32
    2884:	b1 e4       	ldi	r27, 0x41	; 65
    2886:	89 8f       	std	Y+25, r24	; 0x19
    2888:	9a 8f       	std	Y+26, r25	; 0x1a
    288a:	ab 8f       	std	Y+27, r26	; 0x1b
    288c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    288e:	69 8d       	ldd	r22, Y+25	; 0x19
    2890:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2892:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2894:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2896:	20 e0       	ldi	r18, 0x00	; 0
    2898:	30 e0       	ldi	r19, 0x00	; 0
    289a:	4a ef       	ldi	r20, 0xFA	; 250
    289c:	54 e4       	ldi	r21, 0x44	; 68
    289e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28a2:	dc 01       	movw	r26, r24
    28a4:	cb 01       	movw	r24, r22
    28a6:	8d 8b       	std	Y+21, r24	; 0x15
    28a8:	9e 8b       	std	Y+22, r25	; 0x16
    28aa:	af 8b       	std	Y+23, r26	; 0x17
    28ac:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    28ae:	6d 89       	ldd	r22, Y+21	; 0x15
    28b0:	7e 89       	ldd	r23, Y+22	; 0x16
    28b2:	8f 89       	ldd	r24, Y+23	; 0x17
    28b4:	98 8d       	ldd	r25, Y+24	; 0x18
    28b6:	20 e0       	ldi	r18, 0x00	; 0
    28b8:	30 e0       	ldi	r19, 0x00	; 0
    28ba:	40 e8       	ldi	r20, 0x80	; 128
    28bc:	5f e3       	ldi	r21, 0x3F	; 63
    28be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28c2:	88 23       	and	r24, r24
    28c4:	2c f4       	brge	.+10     	; 0x28d0 <error_pass+0xc8>
		__ticks = 1;
    28c6:	81 e0       	ldi	r24, 0x01	; 1
    28c8:	90 e0       	ldi	r25, 0x00	; 0
    28ca:	9c 8b       	std	Y+20, r25	; 0x14
    28cc:	8b 8b       	std	Y+19, r24	; 0x13
    28ce:	3f c0       	rjmp	.+126    	; 0x294e <error_pass+0x146>
	else if (__tmp > 65535)
    28d0:	6d 89       	ldd	r22, Y+21	; 0x15
    28d2:	7e 89       	ldd	r23, Y+22	; 0x16
    28d4:	8f 89       	ldd	r24, Y+23	; 0x17
    28d6:	98 8d       	ldd	r25, Y+24	; 0x18
    28d8:	20 e0       	ldi	r18, 0x00	; 0
    28da:	3f ef       	ldi	r19, 0xFF	; 255
    28dc:	4f e7       	ldi	r20, 0x7F	; 127
    28de:	57 e4       	ldi	r21, 0x47	; 71
    28e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28e4:	18 16       	cp	r1, r24
    28e6:	4c f5       	brge	.+82     	; 0x293a <error_pass+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28e8:	69 8d       	ldd	r22, Y+25	; 0x19
    28ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28f0:	20 e0       	ldi	r18, 0x00	; 0
    28f2:	30 e0       	ldi	r19, 0x00	; 0
    28f4:	40 e2       	ldi	r20, 0x20	; 32
    28f6:	51 e4       	ldi	r21, 0x41	; 65
    28f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28fc:	dc 01       	movw	r26, r24
    28fe:	cb 01       	movw	r24, r22
    2900:	bc 01       	movw	r22, r24
    2902:	cd 01       	movw	r24, r26
    2904:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2908:	dc 01       	movw	r26, r24
    290a:	cb 01       	movw	r24, r22
    290c:	9c 8b       	std	Y+20, r25	; 0x14
    290e:	8b 8b       	std	Y+19, r24	; 0x13
    2910:	0f c0       	rjmp	.+30     	; 0x2930 <error_pass+0x128>
    2912:	88 ec       	ldi	r24, 0xC8	; 200
    2914:	90 e0       	ldi	r25, 0x00	; 0
    2916:	9a 8b       	std	Y+18, r25	; 0x12
    2918:	89 8b       	std	Y+17, r24	; 0x11
    291a:	89 89       	ldd	r24, Y+17	; 0x11
    291c:	9a 89       	ldd	r25, Y+18	; 0x12
    291e:	01 97       	sbiw	r24, 0x01	; 1
    2920:	f1 f7       	brne	.-4      	; 0x291e <error_pass+0x116>
    2922:	9a 8b       	std	Y+18, r25	; 0x12
    2924:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2926:	8b 89       	ldd	r24, Y+19	; 0x13
    2928:	9c 89       	ldd	r25, Y+20	; 0x14
    292a:	01 97       	sbiw	r24, 0x01	; 1
    292c:	9c 8b       	std	Y+20, r25	; 0x14
    292e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2930:	8b 89       	ldd	r24, Y+19	; 0x13
    2932:	9c 89       	ldd	r25, Y+20	; 0x14
    2934:	00 97       	sbiw	r24, 0x00	; 0
    2936:	69 f7       	brne	.-38     	; 0x2912 <error_pass+0x10a>
    2938:	14 c0       	rjmp	.+40     	; 0x2962 <error_pass+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    293a:	6d 89       	ldd	r22, Y+21	; 0x15
    293c:	7e 89       	ldd	r23, Y+22	; 0x16
    293e:	8f 89       	ldd	r24, Y+23	; 0x17
    2940:	98 8d       	ldd	r25, Y+24	; 0x18
    2942:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2946:	dc 01       	movw	r26, r24
    2948:	cb 01       	movw	r24, r22
    294a:	9c 8b       	std	Y+20, r25	; 0x14
    294c:	8b 8b       	std	Y+19, r24	; 0x13
    294e:	8b 89       	ldd	r24, Y+19	; 0x13
    2950:	9c 89       	ldd	r25, Y+20	; 0x14
    2952:	98 8b       	std	Y+16, r25	; 0x10
    2954:	8f 87       	std	Y+15, r24	; 0x0f
    2956:	8f 85       	ldd	r24, Y+15	; 0x0f
    2958:	98 89       	ldd	r25, Y+16	; 0x10
    295a:	01 97       	sbiw	r24, 0x01	; 1
    295c:	f1 f7       	brne	.-4      	; 0x295a <error_pass+0x152>
    295e:	98 8b       	std	Y+16, r25	; 0x10
    2960:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	LCD_clearScreen();
    2962:	0e 94 83 25 	call	0x4b06	; 0x4b06 <LCD_clearScreen>
	LCD_writeString("ERROR");
    2966:	8c ed       	ldi	r24, 0xDC	; 220
    2968:	90 e0       	ldi	r25, 0x00	; 0
    296a:	0e 94 f2 24 	call	0x49e4	; 0x49e4 <LCD_writeString>
	while(g_blocked); /*will loop till ISR function make g_blocked false*/
    296e:	80 91 25 01 	lds	r24, 0x0125
    2972:	88 23       	and	r24, r24
    2974:	e1 f7       	brne	.-8      	; 0x296e <error_pass+0x166>
	LCD_clearScreen();
    2976:	0e 94 83 25 	call	0x4b06	; 0x4b06 <LCD_clearScreen>
	UART_sendByte(BUZZER_OFF); /*tells MC2 to close the buzzer*/
    297a:	8b ef       	ldi	r24, 0xFB	; 251
    297c:	0e 94 2b 07 	call	0xe56	; 0xe56 <UART_sendByte>
    2980:	80 e0       	ldi	r24, 0x00	; 0
    2982:	90 e0       	ldi	r25, 0x00	; 0
    2984:	a0 e2       	ldi	r26, 0x20	; 32
    2986:	b1 e4       	ldi	r27, 0x41	; 65
    2988:	8b 87       	std	Y+11, r24	; 0x0b
    298a:	9c 87       	std	Y+12, r25	; 0x0c
    298c:	ad 87       	std	Y+13, r26	; 0x0d
    298e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2990:	6b 85       	ldd	r22, Y+11	; 0x0b
    2992:	7c 85       	ldd	r23, Y+12	; 0x0c
    2994:	8d 85       	ldd	r24, Y+13	; 0x0d
    2996:	9e 85       	ldd	r25, Y+14	; 0x0e
    2998:	20 e0       	ldi	r18, 0x00	; 0
    299a:	30 e0       	ldi	r19, 0x00	; 0
    299c:	4a ef       	ldi	r20, 0xFA	; 250
    299e:	54 e4       	ldi	r21, 0x44	; 68
    29a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29a4:	dc 01       	movw	r26, r24
    29a6:	cb 01       	movw	r24, r22
    29a8:	8f 83       	std	Y+7, r24	; 0x07
    29aa:	98 87       	std	Y+8, r25	; 0x08
    29ac:	a9 87       	std	Y+9, r26	; 0x09
    29ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29b0:	6f 81       	ldd	r22, Y+7	; 0x07
    29b2:	78 85       	ldd	r23, Y+8	; 0x08
    29b4:	89 85       	ldd	r24, Y+9	; 0x09
    29b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    29b8:	20 e0       	ldi	r18, 0x00	; 0
    29ba:	30 e0       	ldi	r19, 0x00	; 0
    29bc:	40 e8       	ldi	r20, 0x80	; 128
    29be:	5f e3       	ldi	r21, 0x3F	; 63
    29c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29c4:	88 23       	and	r24, r24
    29c6:	2c f4       	brge	.+10     	; 0x29d2 <error_pass+0x1ca>
		__ticks = 1;
    29c8:	81 e0       	ldi	r24, 0x01	; 1
    29ca:	90 e0       	ldi	r25, 0x00	; 0
    29cc:	9e 83       	std	Y+6, r25	; 0x06
    29ce:	8d 83       	std	Y+5, r24	; 0x05
    29d0:	3f c0       	rjmp	.+126    	; 0x2a50 <error_pass+0x248>
	else if (__tmp > 65535)
    29d2:	6f 81       	ldd	r22, Y+7	; 0x07
    29d4:	78 85       	ldd	r23, Y+8	; 0x08
    29d6:	89 85       	ldd	r24, Y+9	; 0x09
    29d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    29da:	20 e0       	ldi	r18, 0x00	; 0
    29dc:	3f ef       	ldi	r19, 0xFF	; 255
    29de:	4f e7       	ldi	r20, 0x7F	; 127
    29e0:	57 e4       	ldi	r21, 0x47	; 71
    29e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29e6:	18 16       	cp	r1, r24
    29e8:	4c f5       	brge	.+82     	; 0x2a3c <error_pass+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    29ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    29ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    29f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    29f2:	20 e0       	ldi	r18, 0x00	; 0
    29f4:	30 e0       	ldi	r19, 0x00	; 0
    29f6:	40 e2       	ldi	r20, 0x20	; 32
    29f8:	51 e4       	ldi	r21, 0x41	; 65
    29fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29fe:	dc 01       	movw	r26, r24
    2a00:	cb 01       	movw	r24, r22
    2a02:	bc 01       	movw	r22, r24
    2a04:	cd 01       	movw	r24, r26
    2a06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a0a:	dc 01       	movw	r26, r24
    2a0c:	cb 01       	movw	r24, r22
    2a0e:	9e 83       	std	Y+6, r25	; 0x06
    2a10:	8d 83       	std	Y+5, r24	; 0x05
    2a12:	0f c0       	rjmp	.+30     	; 0x2a32 <error_pass+0x22a>
    2a14:	88 ec       	ldi	r24, 0xC8	; 200
    2a16:	90 e0       	ldi	r25, 0x00	; 0
    2a18:	9c 83       	std	Y+4, r25	; 0x04
    2a1a:	8b 83       	std	Y+3, r24	; 0x03
    2a1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a1e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a20:	01 97       	sbiw	r24, 0x01	; 1
    2a22:	f1 f7       	brne	.-4      	; 0x2a20 <error_pass+0x218>
    2a24:	9c 83       	std	Y+4, r25	; 0x04
    2a26:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a28:	8d 81       	ldd	r24, Y+5	; 0x05
    2a2a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a2c:	01 97       	sbiw	r24, 0x01	; 1
    2a2e:	9e 83       	std	Y+6, r25	; 0x06
    2a30:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a32:	8d 81       	ldd	r24, Y+5	; 0x05
    2a34:	9e 81       	ldd	r25, Y+6	; 0x06
    2a36:	00 97       	sbiw	r24, 0x00	; 0
    2a38:	69 f7       	brne	.-38     	; 0x2a14 <error_pass+0x20c>
    2a3a:	14 c0       	rjmp	.+40     	; 0x2a64 <error_pass+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a3c:	6f 81       	ldd	r22, Y+7	; 0x07
    2a3e:	78 85       	ldd	r23, Y+8	; 0x08
    2a40:	89 85       	ldd	r24, Y+9	; 0x09
    2a42:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a48:	dc 01       	movw	r26, r24
    2a4a:	cb 01       	movw	r24, r22
    2a4c:	9e 83       	std	Y+6, r25	; 0x06
    2a4e:	8d 83       	std	Y+5, r24	; 0x05
    2a50:	8d 81       	ldd	r24, Y+5	; 0x05
    2a52:	9e 81       	ldd	r25, Y+6	; 0x06
    2a54:	9a 83       	std	Y+2, r25	; 0x02
    2a56:	89 83       	std	Y+1, r24	; 0x01
    2a58:	89 81       	ldd	r24, Y+1	; 0x01
    2a5a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a5c:	01 97       	sbiw	r24, 0x01	; 1
    2a5e:	f1 f7       	brne	.-4      	; 0x2a5c <error_pass+0x254>
    2a60:	9a 83       	std	Y+2, r25	; 0x02
    2a62:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    2a64:	a7 96       	adiw	r28, 0x27	; 39
    2a66:	0f b6       	in	r0, 0x3f	; 63
    2a68:	f8 94       	cli
    2a6a:	de bf       	out	0x3e, r29	; 62
    2a6c:	0f be       	out	0x3f, r0	; 63
    2a6e:	cd bf       	out	0x3d, r28	; 61
    2a70:	cf 91       	pop	r28
    2a72:	df 91       	pop	r29
    2a74:	08 95       	ret

00002a76 <DcMotor_Init>:
#include "common_macros.h"



void DcMotor_Init(void)
{
    2a76:	df 93       	push	r29
    2a78:	cf 93       	push	r28
    2a7a:	cd b7       	in	r28, 0x3d	; 61
    2a7c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(H_BRIDGE_PORT_ID,H_BRIDGR_PIN0, OUTPUT);
    2a7e:	81 e0       	ldi	r24, 0x01	; 1
    2a80:	60 e0       	ldi	r22, 0x00	; 0
    2a82:	41 e0       	ldi	r20, 0x01	; 1
    2a84:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(H_BRIDGE_PORT_ID,H_BRIDGR_PIN1,OUTPUT);  /*set two pins of H bridge */
    2a88:	81 e0       	ldi	r24, 0x01	; 1
    2a8a:	61 e0       	ldi	r22, 0x01	; 1
    2a8c:	41 e0       	ldi	r20, 0x01	; 1
    2a8e:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <GPIO_setupPinDirection>

	GPIO_writePin(H_BRIDGE_PORT_ID , H_BRIDGR_PIN0 , LOGIC_LOW);
    2a92:	81 e0       	ldi	r24, 0x01	; 1
    2a94:	60 e0       	ldi	r22, 0x00	; 0
    2a96:	40 e0       	ldi	r20, 0x00	; 0
    2a98:	0e 94 01 17 	call	0x2e02	; 0x2e02 <GPIO_writePin>
	GPIO_writePin(H_BRIDGE_PORT_ID , H_BRIDGR_PIN1 , LOGIC_LOW);
    2a9c:	81 e0       	ldi	r24, 0x01	; 1
    2a9e:	61 e0       	ldi	r22, 0x01	; 1
    2aa0:	40 e0       	ldi	r20, 0x00	; 0
    2aa2:	0e 94 01 17 	call	0x2e02	; 0x2e02 <GPIO_writePin>

}
    2aa6:	cf 91       	pop	r28
    2aa8:	df 91       	pop	r29
    2aaa:	08 95       	ret

00002aac <DcMotor_Rotate>:

void DcMotor_Rotate(DcMotor_State state)
{
    2aac:	df 93       	push	r29
    2aae:	cf 93       	push	r28
    2ab0:	0f 92       	push	r0
    2ab2:	cd b7       	in	r28, 0x3d	; 61
    2ab4:	de b7       	in	r29, 0x3e	; 62
    2ab6:	89 83       	std	Y+1, r24	; 0x01
    GPIO_writePin(H_BRIDGE_PORT_ID , H_BRIDGR_PIN0 , GET_BIT(state,0));
    2ab8:	89 81       	ldd	r24, Y+1	; 0x01
    2aba:	98 2f       	mov	r25, r24
    2abc:	91 70       	andi	r25, 0x01	; 1
    2abe:	81 e0       	ldi	r24, 0x01	; 1
    2ac0:	60 e0       	ldi	r22, 0x00	; 0
    2ac2:	49 2f       	mov	r20, r25
    2ac4:	0e 94 01 17 	call	0x2e02	; 0x2e02 <GPIO_writePin>
    GPIO_writePin(H_BRIDGE_PORT_ID , H_BRIDGR_PIN1 , GET_BIT(state,1));
    2ac8:	89 81       	ldd	r24, Y+1	; 0x01
    2aca:	88 2f       	mov	r24, r24
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	82 70       	andi	r24, 0x02	; 2
    2ad0:	90 70       	andi	r25, 0x00	; 0
    2ad2:	95 95       	asr	r25
    2ad4:	87 95       	ror	r24
    2ad6:	98 2f       	mov	r25, r24
    2ad8:	81 e0       	ldi	r24, 0x01	; 1
    2ada:	61 e0       	ldi	r22, 0x01	; 1
    2adc:	49 2f       	mov	r20, r25
    2ade:	0e 94 01 17 	call	0x2e02	; 0x2e02 <GPIO_writePin>
}
    2ae2:	0f 90       	pop	r0
    2ae4:	cf 91       	pop	r28
    2ae6:	df 91       	pop	r29
    2ae8:	08 95       	ret

00002aea <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    2aea:	df 93       	push	r29
    2aec:	cf 93       	push	r28
    2aee:	00 d0       	rcall	.+0      	; 0x2af0 <EEPROM_writeByte+0x6>
    2af0:	00 d0       	rcall	.+0      	; 0x2af2 <EEPROM_writeByte+0x8>
    2af2:	cd b7       	in	r28, 0x3d	; 61
    2af4:	de b7       	in	r29, 0x3e	; 62
    2af6:	9a 83       	std	Y+2, r25	; 0x02
    2af8:	89 83       	std	Y+1, r24	; 0x01
    2afa:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    2afc:	0e 94 90 26 	call	0x4d20	; 0x4d20 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    2b00:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <TWI_getStatus>
    2b04:	88 30       	cpi	r24, 0x08	; 8
    2b06:	11 f0       	breq	.+4      	; 0x2b0c <EEPROM_writeByte+0x22>
        return ERROR;
    2b08:	1c 82       	std	Y+4, r1	; 0x04
    2b0a:	28 c0       	rjmp	.+80     	; 0x2b5c <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    2b0c:	89 81       	ldd	r24, Y+1	; 0x01
    2b0e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b10:	80 70       	andi	r24, 0x00	; 0
    2b12:	97 70       	andi	r25, 0x07	; 7
    2b14:	88 0f       	add	r24, r24
    2b16:	89 2f       	mov	r24, r25
    2b18:	88 1f       	adc	r24, r24
    2b1a:	99 0b       	sbc	r25, r25
    2b1c:	91 95       	neg	r25
    2b1e:	80 6a       	ori	r24, 0xA0	; 160
    2b20:	0e 94 ab 26 	call	0x4d56	; 0x4d56 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    2b24:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <TWI_getStatus>
    2b28:	88 31       	cpi	r24, 0x18	; 24
    2b2a:	11 f0       	breq	.+4      	; 0x2b30 <EEPROM_writeByte+0x46>
        return ERROR; 
    2b2c:	1c 82       	std	Y+4, r1	; 0x04
    2b2e:	16 c0       	rjmp	.+44     	; 0x2b5c <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    2b30:	89 81       	ldd	r24, Y+1	; 0x01
    2b32:	0e 94 ab 26 	call	0x4d56	; 0x4d56 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    2b36:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <TWI_getStatus>
    2b3a:	88 32       	cpi	r24, 0x28	; 40
    2b3c:	11 f0       	breq	.+4      	; 0x2b42 <EEPROM_writeByte+0x58>
        return ERROR;
    2b3e:	1c 82       	std	Y+4, r1	; 0x04
    2b40:	0d c0       	rjmp	.+26     	; 0x2b5c <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    2b42:	8b 81       	ldd	r24, Y+3	; 0x03
    2b44:	0e 94 ab 26 	call	0x4d56	; 0x4d56 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    2b48:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <TWI_getStatus>
    2b4c:	88 32       	cpi	r24, 0x28	; 40
    2b4e:	11 f0       	breq	.+4      	; 0x2b54 <EEPROM_writeByte+0x6a>
        return ERROR;
    2b50:	1c 82       	std	Y+4, r1	; 0x04
    2b52:	04 c0       	rjmp	.+8      	; 0x2b5c <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    2b54:	0e 94 a0 26 	call	0x4d40	; 0x4d40 <TWI_stop>
	
    return SUCCESS;
    2b58:	81 e0       	ldi	r24, 0x01	; 1
    2b5a:	8c 83       	std	Y+4, r24	; 0x04
    2b5c:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2b5e:	0f 90       	pop	r0
    2b60:	0f 90       	pop	r0
    2b62:	0f 90       	pop	r0
    2b64:	0f 90       	pop	r0
    2b66:	cf 91       	pop	r28
    2b68:	df 91       	pop	r29
    2b6a:	08 95       	ret

00002b6c <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    2b6c:	df 93       	push	r29
    2b6e:	cf 93       	push	r28
    2b70:	00 d0       	rcall	.+0      	; 0x2b72 <EEPROM_readByte+0x6>
    2b72:	00 d0       	rcall	.+0      	; 0x2b74 <EEPROM_readByte+0x8>
    2b74:	0f 92       	push	r0
    2b76:	cd b7       	in	r28, 0x3d	; 61
    2b78:	de b7       	in	r29, 0x3e	; 62
    2b7a:	9a 83       	std	Y+2, r25	; 0x02
    2b7c:	89 83       	std	Y+1, r24	; 0x01
    2b7e:	7c 83       	std	Y+4, r23	; 0x04
    2b80:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    2b82:	0e 94 90 26 	call	0x4d20	; 0x4d20 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    2b86:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <TWI_getStatus>
    2b8a:	88 30       	cpi	r24, 0x08	; 8
    2b8c:	11 f0       	breq	.+4      	; 0x2b92 <EEPROM_readByte+0x26>
        return ERROR;
    2b8e:	1d 82       	std	Y+5, r1	; 0x05
    2b90:	44 c0       	rjmp	.+136    	; 0x2c1a <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    2b92:	89 81       	ldd	r24, Y+1	; 0x01
    2b94:	9a 81       	ldd	r25, Y+2	; 0x02
    2b96:	80 70       	andi	r24, 0x00	; 0
    2b98:	97 70       	andi	r25, 0x07	; 7
    2b9a:	88 0f       	add	r24, r24
    2b9c:	89 2f       	mov	r24, r25
    2b9e:	88 1f       	adc	r24, r24
    2ba0:	99 0b       	sbc	r25, r25
    2ba2:	91 95       	neg	r25
    2ba4:	80 6a       	ori	r24, 0xA0	; 160
    2ba6:	0e 94 ab 26 	call	0x4d56	; 0x4d56 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    2baa:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <TWI_getStatus>
    2bae:	88 31       	cpi	r24, 0x18	; 24
    2bb0:	11 f0       	breq	.+4      	; 0x2bb6 <EEPROM_readByte+0x4a>
        return ERROR;
    2bb2:	1d 82       	std	Y+5, r1	; 0x05
    2bb4:	32 c0       	rjmp	.+100    	; 0x2c1a <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    2bb6:	89 81       	ldd	r24, Y+1	; 0x01
    2bb8:	0e 94 ab 26 	call	0x4d56	; 0x4d56 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    2bbc:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <TWI_getStatus>
    2bc0:	88 32       	cpi	r24, 0x28	; 40
    2bc2:	11 f0       	breq	.+4      	; 0x2bc8 <EEPROM_readByte+0x5c>
        return ERROR;
    2bc4:	1d 82       	std	Y+5, r1	; 0x05
    2bc6:	29 c0       	rjmp	.+82     	; 0x2c1a <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    2bc8:	0e 94 90 26 	call	0x4d20	; 0x4d20 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    2bcc:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <TWI_getStatus>
    2bd0:	80 31       	cpi	r24, 0x10	; 16
    2bd2:	11 f0       	breq	.+4      	; 0x2bd8 <EEPROM_readByte+0x6c>
        return ERROR;
    2bd4:	1d 82       	std	Y+5, r1	; 0x05
    2bd6:	21 c0       	rjmp	.+66     	; 0x2c1a <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    2bd8:	89 81       	ldd	r24, Y+1	; 0x01
    2bda:	9a 81       	ldd	r25, Y+2	; 0x02
    2bdc:	80 70       	andi	r24, 0x00	; 0
    2bde:	97 70       	andi	r25, 0x07	; 7
    2be0:	88 0f       	add	r24, r24
    2be2:	89 2f       	mov	r24, r25
    2be4:	88 1f       	adc	r24, r24
    2be6:	99 0b       	sbc	r25, r25
    2be8:	91 95       	neg	r25
    2bea:	81 6a       	ori	r24, 0xA1	; 161
    2bec:	0e 94 ab 26 	call	0x4d56	; 0x4d56 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    2bf0:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <TWI_getStatus>
    2bf4:	80 34       	cpi	r24, 0x40	; 64
    2bf6:	11 f0       	breq	.+4      	; 0x2bfc <EEPROM_readByte+0x90>
        return ERROR;
    2bf8:	1d 82       	std	Y+5, r1	; 0x05
    2bfa:	0f c0       	rjmp	.+30     	; 0x2c1a <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    2bfc:	0e 94 d5 26 	call	0x4daa	; 0x4daa <TWI_readByteWithNACK>
    2c00:	eb 81       	ldd	r30, Y+3	; 0x03
    2c02:	fc 81       	ldd	r31, Y+4	; 0x04
    2c04:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    2c06:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <TWI_getStatus>
    2c0a:	88 35       	cpi	r24, 0x58	; 88
    2c0c:	11 f0       	breq	.+4      	; 0x2c12 <EEPROM_readByte+0xa6>
        return ERROR;
    2c0e:	1d 82       	std	Y+5, r1	; 0x05
    2c10:	04 c0       	rjmp	.+8      	; 0x2c1a <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    2c12:	0e 94 a0 26 	call	0x4d40	; 0x4d40 <TWI_stop>

    return SUCCESS;
    2c16:	81 e0       	ldi	r24, 0x01	; 1
    2c18:	8d 83       	std	Y+5, r24	; 0x05
    2c1a:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2c1c:	0f 90       	pop	r0
    2c1e:	0f 90       	pop	r0
    2c20:	0f 90       	pop	r0
    2c22:	0f 90       	pop	r0
    2c24:	0f 90       	pop	r0
    2c26:	cf 91       	pop	r28
    2c28:	df 91       	pop	r29
    2c2a:	08 95       	ret

00002c2c <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    2c2c:	df 93       	push	r29
    2c2e:	cf 93       	push	r28
    2c30:	00 d0       	rcall	.+0      	; 0x2c32 <GPIO_setupPinDirection+0x6>
    2c32:	00 d0       	rcall	.+0      	; 0x2c34 <GPIO_setupPinDirection+0x8>
    2c34:	0f 92       	push	r0
    2c36:	cd b7       	in	r28, 0x3d	; 61
    2c38:	de b7       	in	r29, 0x3e	; 62
    2c3a:	89 83       	std	Y+1, r24	; 0x01
    2c3c:	6a 83       	std	Y+2, r22	; 0x02
    2c3e:	4b 83       	std	Y+3, r20	; 0x03
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */

	if( port_num >= NUM_OF_PORTS || pin_num >= NUM_OF_PINS_PER_PORT)
    2c40:	89 81       	ldd	r24, Y+1	; 0x01
    2c42:	84 30       	cpi	r24, 0x04	; 4
    2c44:	08 f0       	brcs	.+2      	; 0x2c48 <GPIO_setupPinDirection+0x1c>
    2c46:	d5 c0       	rjmp	.+426    	; 0x2df2 <GPIO_setupPinDirection+0x1c6>
    2c48:	8a 81       	ldd	r24, Y+2	; 0x02
    2c4a:	88 30       	cpi	r24, 0x08	; 8
    2c4c:	08 f0       	brcs	.+2      	; 0x2c50 <GPIO_setupPinDirection+0x24>
    2c4e:	d1 c0       	rjmp	.+418    	; 0x2df2 <GPIO_setupPinDirection+0x1c6>
	{
		/* do nothing */
	}else
	{
		switch(port_num)
    2c50:	89 81       	ldd	r24, Y+1	; 0x01
    2c52:	28 2f       	mov	r18, r24
    2c54:	30 e0       	ldi	r19, 0x00	; 0
    2c56:	3d 83       	std	Y+5, r19	; 0x05
    2c58:	2c 83       	std	Y+4, r18	; 0x04
    2c5a:	8c 81       	ldd	r24, Y+4	; 0x04
    2c5c:	9d 81       	ldd	r25, Y+5	; 0x05
    2c5e:	81 30       	cpi	r24, 0x01	; 1
    2c60:	91 05       	cpc	r25, r1
    2c62:	09 f4       	brne	.+2      	; 0x2c66 <GPIO_setupPinDirection+0x3a>
    2c64:	43 c0       	rjmp	.+134    	; 0x2cec <GPIO_setupPinDirection+0xc0>
    2c66:	2c 81       	ldd	r18, Y+4	; 0x04
    2c68:	3d 81       	ldd	r19, Y+5	; 0x05
    2c6a:	22 30       	cpi	r18, 0x02	; 2
    2c6c:	31 05       	cpc	r19, r1
    2c6e:	2c f4       	brge	.+10     	; 0x2c7a <GPIO_setupPinDirection+0x4e>
    2c70:	8c 81       	ldd	r24, Y+4	; 0x04
    2c72:	9d 81       	ldd	r25, Y+5	; 0x05
    2c74:	00 97       	sbiw	r24, 0x00	; 0
    2c76:	71 f0       	breq	.+28     	; 0x2c94 <GPIO_setupPinDirection+0x68>
    2c78:	bc c0       	rjmp	.+376    	; 0x2df2 <GPIO_setupPinDirection+0x1c6>
    2c7a:	2c 81       	ldd	r18, Y+4	; 0x04
    2c7c:	3d 81       	ldd	r19, Y+5	; 0x05
    2c7e:	22 30       	cpi	r18, 0x02	; 2
    2c80:	31 05       	cpc	r19, r1
    2c82:	09 f4       	brne	.+2      	; 0x2c86 <GPIO_setupPinDirection+0x5a>
    2c84:	5f c0       	rjmp	.+190    	; 0x2d44 <GPIO_setupPinDirection+0x118>
    2c86:	8c 81       	ldd	r24, Y+4	; 0x04
    2c88:	9d 81       	ldd	r25, Y+5	; 0x05
    2c8a:	83 30       	cpi	r24, 0x03	; 3
    2c8c:	91 05       	cpc	r25, r1
    2c8e:	09 f4       	brne	.+2      	; 0x2c92 <GPIO_setupPinDirection+0x66>
    2c90:	85 c0       	rjmp	.+266    	; 0x2d9c <GPIO_setupPinDirection+0x170>
    2c92:	af c0       	rjmp	.+350    	; 0x2df2 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == 1)
    2c94:	8b 81       	ldd	r24, Y+3	; 0x03
    2c96:	81 30       	cpi	r24, 0x01	; 1
    2c98:	a1 f4       	brne	.+40     	; 0x2cc2 <GPIO_setupPinDirection+0x96>
				SET_BIT(DDRA,pin_num);
    2c9a:	aa e3       	ldi	r26, 0x3A	; 58
    2c9c:	b0 e0       	ldi	r27, 0x00	; 0
    2c9e:	ea e3       	ldi	r30, 0x3A	; 58
    2ca0:	f0 e0       	ldi	r31, 0x00	; 0
    2ca2:	80 81       	ld	r24, Z
    2ca4:	48 2f       	mov	r20, r24
    2ca6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ca8:	28 2f       	mov	r18, r24
    2caa:	30 e0       	ldi	r19, 0x00	; 0
    2cac:	81 e0       	ldi	r24, 0x01	; 1
    2cae:	90 e0       	ldi	r25, 0x00	; 0
    2cb0:	02 2e       	mov	r0, r18
    2cb2:	02 c0       	rjmp	.+4      	; 0x2cb8 <GPIO_setupPinDirection+0x8c>
    2cb4:	88 0f       	add	r24, r24
    2cb6:	99 1f       	adc	r25, r25
    2cb8:	0a 94       	dec	r0
    2cba:	e2 f7       	brpl	.-8      	; 0x2cb4 <GPIO_setupPinDirection+0x88>
    2cbc:	84 2b       	or	r24, r20
    2cbe:	8c 93       	st	X, r24
    2cc0:	98 c0       	rjmp	.+304    	; 0x2df2 <GPIO_setupPinDirection+0x1c6>
			else
				CLEAR_BIT(DDRA,pin_num);
    2cc2:	aa e3       	ldi	r26, 0x3A	; 58
    2cc4:	b0 e0       	ldi	r27, 0x00	; 0
    2cc6:	ea e3       	ldi	r30, 0x3A	; 58
    2cc8:	f0 e0       	ldi	r31, 0x00	; 0
    2cca:	80 81       	ld	r24, Z
    2ccc:	48 2f       	mov	r20, r24
    2cce:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd0:	28 2f       	mov	r18, r24
    2cd2:	30 e0       	ldi	r19, 0x00	; 0
    2cd4:	81 e0       	ldi	r24, 0x01	; 1
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	02 2e       	mov	r0, r18
    2cda:	02 c0       	rjmp	.+4      	; 0x2ce0 <GPIO_setupPinDirection+0xb4>
    2cdc:	88 0f       	add	r24, r24
    2cde:	99 1f       	adc	r25, r25
    2ce0:	0a 94       	dec	r0
    2ce2:	e2 f7       	brpl	.-8      	; 0x2cdc <GPIO_setupPinDirection+0xb0>
    2ce4:	80 95       	com	r24
    2ce6:	84 23       	and	r24, r20
    2ce8:	8c 93       	st	X, r24
    2cea:	83 c0       	rjmp	.+262    	; 0x2df2 <GPIO_setupPinDirection+0x1c6>
			break;

		case PORTB_ID:
			if(direction == 1)
    2cec:	8b 81       	ldd	r24, Y+3	; 0x03
    2cee:	81 30       	cpi	r24, 0x01	; 1
    2cf0:	a1 f4       	brne	.+40     	; 0x2d1a <GPIO_setupPinDirection+0xee>
				SET_BIT(DDRB,pin_num);
    2cf2:	a7 e3       	ldi	r26, 0x37	; 55
    2cf4:	b0 e0       	ldi	r27, 0x00	; 0
    2cf6:	e7 e3       	ldi	r30, 0x37	; 55
    2cf8:	f0 e0       	ldi	r31, 0x00	; 0
    2cfa:	80 81       	ld	r24, Z
    2cfc:	48 2f       	mov	r20, r24
    2cfe:	8a 81       	ldd	r24, Y+2	; 0x02
    2d00:	28 2f       	mov	r18, r24
    2d02:	30 e0       	ldi	r19, 0x00	; 0
    2d04:	81 e0       	ldi	r24, 0x01	; 1
    2d06:	90 e0       	ldi	r25, 0x00	; 0
    2d08:	02 2e       	mov	r0, r18
    2d0a:	02 c0       	rjmp	.+4      	; 0x2d10 <GPIO_setupPinDirection+0xe4>
    2d0c:	88 0f       	add	r24, r24
    2d0e:	99 1f       	adc	r25, r25
    2d10:	0a 94       	dec	r0
    2d12:	e2 f7       	brpl	.-8      	; 0x2d0c <GPIO_setupPinDirection+0xe0>
    2d14:	84 2b       	or	r24, r20
    2d16:	8c 93       	st	X, r24
    2d18:	6c c0       	rjmp	.+216    	; 0x2df2 <GPIO_setupPinDirection+0x1c6>
			else
				CLEAR_BIT(DDRB,pin_num);
    2d1a:	a7 e3       	ldi	r26, 0x37	; 55
    2d1c:	b0 e0       	ldi	r27, 0x00	; 0
    2d1e:	e7 e3       	ldi	r30, 0x37	; 55
    2d20:	f0 e0       	ldi	r31, 0x00	; 0
    2d22:	80 81       	ld	r24, Z
    2d24:	48 2f       	mov	r20, r24
    2d26:	8a 81       	ldd	r24, Y+2	; 0x02
    2d28:	28 2f       	mov	r18, r24
    2d2a:	30 e0       	ldi	r19, 0x00	; 0
    2d2c:	81 e0       	ldi	r24, 0x01	; 1
    2d2e:	90 e0       	ldi	r25, 0x00	; 0
    2d30:	02 2e       	mov	r0, r18
    2d32:	02 c0       	rjmp	.+4      	; 0x2d38 <GPIO_setupPinDirection+0x10c>
    2d34:	88 0f       	add	r24, r24
    2d36:	99 1f       	adc	r25, r25
    2d38:	0a 94       	dec	r0
    2d3a:	e2 f7       	brpl	.-8      	; 0x2d34 <GPIO_setupPinDirection+0x108>
    2d3c:	80 95       	com	r24
    2d3e:	84 23       	and	r24, r20
    2d40:	8c 93       	st	X, r24
    2d42:	57 c0       	rjmp	.+174    	; 0x2df2 <GPIO_setupPinDirection+0x1c6>
			break;

		case PORTC_ID:
			if(direction == 1)
    2d44:	8b 81       	ldd	r24, Y+3	; 0x03
    2d46:	81 30       	cpi	r24, 0x01	; 1
    2d48:	a1 f4       	brne	.+40     	; 0x2d72 <GPIO_setupPinDirection+0x146>
				SET_BIT(DDRC,pin_num);
    2d4a:	a4 e3       	ldi	r26, 0x34	; 52
    2d4c:	b0 e0       	ldi	r27, 0x00	; 0
    2d4e:	e4 e3       	ldi	r30, 0x34	; 52
    2d50:	f0 e0       	ldi	r31, 0x00	; 0
    2d52:	80 81       	ld	r24, Z
    2d54:	48 2f       	mov	r20, r24
    2d56:	8a 81       	ldd	r24, Y+2	; 0x02
    2d58:	28 2f       	mov	r18, r24
    2d5a:	30 e0       	ldi	r19, 0x00	; 0
    2d5c:	81 e0       	ldi	r24, 0x01	; 1
    2d5e:	90 e0       	ldi	r25, 0x00	; 0
    2d60:	02 2e       	mov	r0, r18
    2d62:	02 c0       	rjmp	.+4      	; 0x2d68 <GPIO_setupPinDirection+0x13c>
    2d64:	88 0f       	add	r24, r24
    2d66:	99 1f       	adc	r25, r25
    2d68:	0a 94       	dec	r0
    2d6a:	e2 f7       	brpl	.-8      	; 0x2d64 <GPIO_setupPinDirection+0x138>
    2d6c:	84 2b       	or	r24, r20
    2d6e:	8c 93       	st	X, r24
    2d70:	40 c0       	rjmp	.+128    	; 0x2df2 <GPIO_setupPinDirection+0x1c6>
			else
				CLEAR_BIT(DDRC,pin_num);
    2d72:	a4 e3       	ldi	r26, 0x34	; 52
    2d74:	b0 e0       	ldi	r27, 0x00	; 0
    2d76:	e4 e3       	ldi	r30, 0x34	; 52
    2d78:	f0 e0       	ldi	r31, 0x00	; 0
    2d7a:	80 81       	ld	r24, Z
    2d7c:	48 2f       	mov	r20, r24
    2d7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d80:	28 2f       	mov	r18, r24
    2d82:	30 e0       	ldi	r19, 0x00	; 0
    2d84:	81 e0       	ldi	r24, 0x01	; 1
    2d86:	90 e0       	ldi	r25, 0x00	; 0
    2d88:	02 2e       	mov	r0, r18
    2d8a:	02 c0       	rjmp	.+4      	; 0x2d90 <GPIO_setupPinDirection+0x164>
    2d8c:	88 0f       	add	r24, r24
    2d8e:	99 1f       	adc	r25, r25
    2d90:	0a 94       	dec	r0
    2d92:	e2 f7       	brpl	.-8      	; 0x2d8c <GPIO_setupPinDirection+0x160>
    2d94:	80 95       	com	r24
    2d96:	84 23       	and	r24, r20
    2d98:	8c 93       	st	X, r24
    2d9a:	2b c0       	rjmp	.+86     	; 0x2df2 <GPIO_setupPinDirection+0x1c6>
			break;

		case PORTD_ID:
			if(direction == 1)
    2d9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d9e:	81 30       	cpi	r24, 0x01	; 1
    2da0:	a1 f4       	brne	.+40     	; 0x2dca <GPIO_setupPinDirection+0x19e>
				SET_BIT(DDRD,pin_num);
    2da2:	a1 e3       	ldi	r26, 0x31	; 49
    2da4:	b0 e0       	ldi	r27, 0x00	; 0
    2da6:	e1 e3       	ldi	r30, 0x31	; 49
    2da8:	f0 e0       	ldi	r31, 0x00	; 0
    2daa:	80 81       	ld	r24, Z
    2dac:	48 2f       	mov	r20, r24
    2dae:	8a 81       	ldd	r24, Y+2	; 0x02
    2db0:	28 2f       	mov	r18, r24
    2db2:	30 e0       	ldi	r19, 0x00	; 0
    2db4:	81 e0       	ldi	r24, 0x01	; 1
    2db6:	90 e0       	ldi	r25, 0x00	; 0
    2db8:	02 2e       	mov	r0, r18
    2dba:	02 c0       	rjmp	.+4      	; 0x2dc0 <GPIO_setupPinDirection+0x194>
    2dbc:	88 0f       	add	r24, r24
    2dbe:	99 1f       	adc	r25, r25
    2dc0:	0a 94       	dec	r0
    2dc2:	e2 f7       	brpl	.-8      	; 0x2dbc <GPIO_setupPinDirection+0x190>
    2dc4:	84 2b       	or	r24, r20
    2dc6:	8c 93       	st	X, r24
    2dc8:	14 c0       	rjmp	.+40     	; 0x2df2 <GPIO_setupPinDirection+0x1c6>
			else
				CLEAR_BIT(DDRD,pin_num);
    2dca:	a1 e3       	ldi	r26, 0x31	; 49
    2dcc:	b0 e0       	ldi	r27, 0x00	; 0
    2dce:	e1 e3       	ldi	r30, 0x31	; 49
    2dd0:	f0 e0       	ldi	r31, 0x00	; 0
    2dd2:	80 81       	ld	r24, Z
    2dd4:	48 2f       	mov	r20, r24
    2dd6:	8a 81       	ldd	r24, Y+2	; 0x02
    2dd8:	28 2f       	mov	r18, r24
    2dda:	30 e0       	ldi	r19, 0x00	; 0
    2ddc:	81 e0       	ldi	r24, 0x01	; 1
    2dde:	90 e0       	ldi	r25, 0x00	; 0
    2de0:	02 2e       	mov	r0, r18
    2de2:	02 c0       	rjmp	.+4      	; 0x2de8 <GPIO_setupPinDirection+0x1bc>
    2de4:	88 0f       	add	r24, r24
    2de6:	99 1f       	adc	r25, r25
    2de8:	0a 94       	dec	r0
    2dea:	e2 f7       	brpl	.-8      	; 0x2de4 <GPIO_setupPinDirection+0x1b8>
    2dec:	80 95       	com	r24
    2dee:	84 23       	and	r24, r20
    2df0:	8c 93       	st	X, r24
		}
	}
}
    2df2:	0f 90       	pop	r0
    2df4:	0f 90       	pop	r0
    2df6:	0f 90       	pop	r0
    2df8:	0f 90       	pop	r0
    2dfa:	0f 90       	pop	r0
    2dfc:	cf 91       	pop	r28
    2dfe:	df 91       	pop	r29
    2e00:	08 95       	ret

00002e02 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    2e02:	df 93       	push	r29
    2e04:	cf 93       	push	r28
    2e06:	00 d0       	rcall	.+0      	; 0x2e08 <GPIO_writePin+0x6>
    2e08:	00 d0       	rcall	.+0      	; 0x2e0a <GPIO_writePin+0x8>
    2e0a:	0f 92       	push	r0
    2e0c:	cd b7       	in	r28, 0x3d	; 61
    2e0e:	de b7       	in	r29, 0x3e	; 62
    2e10:	89 83       	std	Y+1, r24	; 0x01
    2e12:	6a 83       	std	Y+2, r22	; 0x02
    2e14:	4b 83       	std	Y+3, r20	; 0x03
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */

	if(port_num >= NUM_OF_PORTS || pin_num >= NUM_OF_PINS_PER_PORT)
    2e16:	89 81       	ldd	r24, Y+1	; 0x01
    2e18:	84 30       	cpi	r24, 0x04	; 4
    2e1a:	08 f0       	brcs	.+2      	; 0x2e1e <GPIO_writePin+0x1c>
    2e1c:	d5 c0       	rjmp	.+426    	; 0x2fc8 <GPIO_writePin+0x1c6>
    2e1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e20:	88 30       	cpi	r24, 0x08	; 8
    2e22:	08 f0       	brcs	.+2      	; 0x2e26 <GPIO_writePin+0x24>
    2e24:	d1 c0       	rjmp	.+418    	; 0x2fc8 <GPIO_writePin+0x1c6>
	{
		/*Do nothing*/
	}else
	{
		switch(port_num)
    2e26:	89 81       	ldd	r24, Y+1	; 0x01
    2e28:	28 2f       	mov	r18, r24
    2e2a:	30 e0       	ldi	r19, 0x00	; 0
    2e2c:	3d 83       	std	Y+5, r19	; 0x05
    2e2e:	2c 83       	std	Y+4, r18	; 0x04
    2e30:	8c 81       	ldd	r24, Y+4	; 0x04
    2e32:	9d 81       	ldd	r25, Y+5	; 0x05
    2e34:	81 30       	cpi	r24, 0x01	; 1
    2e36:	91 05       	cpc	r25, r1
    2e38:	09 f4       	brne	.+2      	; 0x2e3c <GPIO_writePin+0x3a>
    2e3a:	43 c0       	rjmp	.+134    	; 0x2ec2 <GPIO_writePin+0xc0>
    2e3c:	2c 81       	ldd	r18, Y+4	; 0x04
    2e3e:	3d 81       	ldd	r19, Y+5	; 0x05
    2e40:	22 30       	cpi	r18, 0x02	; 2
    2e42:	31 05       	cpc	r19, r1
    2e44:	2c f4       	brge	.+10     	; 0x2e50 <GPIO_writePin+0x4e>
    2e46:	8c 81       	ldd	r24, Y+4	; 0x04
    2e48:	9d 81       	ldd	r25, Y+5	; 0x05
    2e4a:	00 97       	sbiw	r24, 0x00	; 0
    2e4c:	71 f0       	breq	.+28     	; 0x2e6a <GPIO_writePin+0x68>
    2e4e:	bc c0       	rjmp	.+376    	; 0x2fc8 <GPIO_writePin+0x1c6>
    2e50:	2c 81       	ldd	r18, Y+4	; 0x04
    2e52:	3d 81       	ldd	r19, Y+5	; 0x05
    2e54:	22 30       	cpi	r18, 0x02	; 2
    2e56:	31 05       	cpc	r19, r1
    2e58:	09 f4       	brne	.+2      	; 0x2e5c <GPIO_writePin+0x5a>
    2e5a:	5f c0       	rjmp	.+190    	; 0x2f1a <GPIO_writePin+0x118>
    2e5c:	8c 81       	ldd	r24, Y+4	; 0x04
    2e5e:	9d 81       	ldd	r25, Y+5	; 0x05
    2e60:	83 30       	cpi	r24, 0x03	; 3
    2e62:	91 05       	cpc	r25, r1
    2e64:	09 f4       	brne	.+2      	; 0x2e68 <GPIO_writePin+0x66>
    2e66:	85 c0       	rjmp	.+266    	; 0x2f72 <GPIO_writePin+0x170>
    2e68:	af c0       	rjmp	.+350    	; 0x2fc8 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == 1)
    2e6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e6c:	81 30       	cpi	r24, 0x01	; 1
    2e6e:	a1 f4       	brne	.+40     	; 0x2e98 <GPIO_writePin+0x96>
				SET_BIT(PORTA,pin_num);
    2e70:	ab e3       	ldi	r26, 0x3B	; 59
    2e72:	b0 e0       	ldi	r27, 0x00	; 0
    2e74:	eb e3       	ldi	r30, 0x3B	; 59
    2e76:	f0 e0       	ldi	r31, 0x00	; 0
    2e78:	80 81       	ld	r24, Z
    2e7a:	48 2f       	mov	r20, r24
    2e7c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e7e:	28 2f       	mov	r18, r24
    2e80:	30 e0       	ldi	r19, 0x00	; 0
    2e82:	81 e0       	ldi	r24, 0x01	; 1
    2e84:	90 e0       	ldi	r25, 0x00	; 0
    2e86:	02 2e       	mov	r0, r18
    2e88:	02 c0       	rjmp	.+4      	; 0x2e8e <GPIO_writePin+0x8c>
    2e8a:	88 0f       	add	r24, r24
    2e8c:	99 1f       	adc	r25, r25
    2e8e:	0a 94       	dec	r0
    2e90:	e2 f7       	brpl	.-8      	; 0x2e8a <GPIO_writePin+0x88>
    2e92:	84 2b       	or	r24, r20
    2e94:	8c 93       	st	X, r24
    2e96:	98 c0       	rjmp	.+304    	; 0x2fc8 <GPIO_writePin+0x1c6>
			else
				CLEAR_BIT(PORTA,pin_num);
    2e98:	ab e3       	ldi	r26, 0x3B	; 59
    2e9a:	b0 e0       	ldi	r27, 0x00	; 0
    2e9c:	eb e3       	ldi	r30, 0x3B	; 59
    2e9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ea0:	80 81       	ld	r24, Z
    2ea2:	48 2f       	mov	r20, r24
    2ea4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ea6:	28 2f       	mov	r18, r24
    2ea8:	30 e0       	ldi	r19, 0x00	; 0
    2eaa:	81 e0       	ldi	r24, 0x01	; 1
    2eac:	90 e0       	ldi	r25, 0x00	; 0
    2eae:	02 2e       	mov	r0, r18
    2eb0:	02 c0       	rjmp	.+4      	; 0x2eb6 <GPIO_writePin+0xb4>
    2eb2:	88 0f       	add	r24, r24
    2eb4:	99 1f       	adc	r25, r25
    2eb6:	0a 94       	dec	r0
    2eb8:	e2 f7       	brpl	.-8      	; 0x2eb2 <GPIO_writePin+0xb0>
    2eba:	80 95       	com	r24
    2ebc:	84 23       	and	r24, r20
    2ebe:	8c 93       	st	X, r24
    2ec0:	83 c0       	rjmp	.+262    	; 0x2fc8 <GPIO_writePin+0x1c6>
			break;

		case PORTB_ID:
			if(value == 1)
    2ec2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ec4:	81 30       	cpi	r24, 0x01	; 1
    2ec6:	a1 f4       	brne	.+40     	; 0x2ef0 <GPIO_writePin+0xee>
				SET_BIT(PORTB,pin_num);
    2ec8:	a8 e3       	ldi	r26, 0x38	; 56
    2eca:	b0 e0       	ldi	r27, 0x00	; 0
    2ecc:	e8 e3       	ldi	r30, 0x38	; 56
    2ece:	f0 e0       	ldi	r31, 0x00	; 0
    2ed0:	80 81       	ld	r24, Z
    2ed2:	48 2f       	mov	r20, r24
    2ed4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ed6:	28 2f       	mov	r18, r24
    2ed8:	30 e0       	ldi	r19, 0x00	; 0
    2eda:	81 e0       	ldi	r24, 0x01	; 1
    2edc:	90 e0       	ldi	r25, 0x00	; 0
    2ede:	02 2e       	mov	r0, r18
    2ee0:	02 c0       	rjmp	.+4      	; 0x2ee6 <GPIO_writePin+0xe4>
    2ee2:	88 0f       	add	r24, r24
    2ee4:	99 1f       	adc	r25, r25
    2ee6:	0a 94       	dec	r0
    2ee8:	e2 f7       	brpl	.-8      	; 0x2ee2 <GPIO_writePin+0xe0>
    2eea:	84 2b       	or	r24, r20
    2eec:	8c 93       	st	X, r24
    2eee:	6c c0       	rjmp	.+216    	; 0x2fc8 <GPIO_writePin+0x1c6>
			else
				CLEAR_BIT(PORTB,pin_num);
    2ef0:	a8 e3       	ldi	r26, 0x38	; 56
    2ef2:	b0 e0       	ldi	r27, 0x00	; 0
    2ef4:	e8 e3       	ldi	r30, 0x38	; 56
    2ef6:	f0 e0       	ldi	r31, 0x00	; 0
    2ef8:	80 81       	ld	r24, Z
    2efa:	48 2f       	mov	r20, r24
    2efc:	8a 81       	ldd	r24, Y+2	; 0x02
    2efe:	28 2f       	mov	r18, r24
    2f00:	30 e0       	ldi	r19, 0x00	; 0
    2f02:	81 e0       	ldi	r24, 0x01	; 1
    2f04:	90 e0       	ldi	r25, 0x00	; 0
    2f06:	02 2e       	mov	r0, r18
    2f08:	02 c0       	rjmp	.+4      	; 0x2f0e <GPIO_writePin+0x10c>
    2f0a:	88 0f       	add	r24, r24
    2f0c:	99 1f       	adc	r25, r25
    2f0e:	0a 94       	dec	r0
    2f10:	e2 f7       	brpl	.-8      	; 0x2f0a <GPIO_writePin+0x108>
    2f12:	80 95       	com	r24
    2f14:	84 23       	and	r24, r20
    2f16:	8c 93       	st	X, r24
    2f18:	57 c0       	rjmp	.+174    	; 0x2fc8 <GPIO_writePin+0x1c6>
			break;

		case PORTC_ID:
			if(value == 1)
    2f1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f1c:	81 30       	cpi	r24, 0x01	; 1
    2f1e:	a1 f4       	brne	.+40     	; 0x2f48 <GPIO_writePin+0x146>
				SET_BIT(PORTC,pin_num);
    2f20:	a5 e3       	ldi	r26, 0x35	; 53
    2f22:	b0 e0       	ldi	r27, 0x00	; 0
    2f24:	e5 e3       	ldi	r30, 0x35	; 53
    2f26:	f0 e0       	ldi	r31, 0x00	; 0
    2f28:	80 81       	ld	r24, Z
    2f2a:	48 2f       	mov	r20, r24
    2f2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f2e:	28 2f       	mov	r18, r24
    2f30:	30 e0       	ldi	r19, 0x00	; 0
    2f32:	81 e0       	ldi	r24, 0x01	; 1
    2f34:	90 e0       	ldi	r25, 0x00	; 0
    2f36:	02 2e       	mov	r0, r18
    2f38:	02 c0       	rjmp	.+4      	; 0x2f3e <GPIO_writePin+0x13c>
    2f3a:	88 0f       	add	r24, r24
    2f3c:	99 1f       	adc	r25, r25
    2f3e:	0a 94       	dec	r0
    2f40:	e2 f7       	brpl	.-8      	; 0x2f3a <GPIO_writePin+0x138>
    2f42:	84 2b       	or	r24, r20
    2f44:	8c 93       	st	X, r24
    2f46:	40 c0       	rjmp	.+128    	; 0x2fc8 <GPIO_writePin+0x1c6>
			else
				CLEAR_BIT(PORTC,pin_num);
    2f48:	a5 e3       	ldi	r26, 0x35	; 53
    2f4a:	b0 e0       	ldi	r27, 0x00	; 0
    2f4c:	e5 e3       	ldi	r30, 0x35	; 53
    2f4e:	f0 e0       	ldi	r31, 0x00	; 0
    2f50:	80 81       	ld	r24, Z
    2f52:	48 2f       	mov	r20, r24
    2f54:	8a 81       	ldd	r24, Y+2	; 0x02
    2f56:	28 2f       	mov	r18, r24
    2f58:	30 e0       	ldi	r19, 0x00	; 0
    2f5a:	81 e0       	ldi	r24, 0x01	; 1
    2f5c:	90 e0       	ldi	r25, 0x00	; 0
    2f5e:	02 2e       	mov	r0, r18
    2f60:	02 c0       	rjmp	.+4      	; 0x2f66 <GPIO_writePin+0x164>
    2f62:	88 0f       	add	r24, r24
    2f64:	99 1f       	adc	r25, r25
    2f66:	0a 94       	dec	r0
    2f68:	e2 f7       	brpl	.-8      	; 0x2f62 <GPIO_writePin+0x160>
    2f6a:	80 95       	com	r24
    2f6c:	84 23       	and	r24, r20
    2f6e:	8c 93       	st	X, r24
    2f70:	2b c0       	rjmp	.+86     	; 0x2fc8 <GPIO_writePin+0x1c6>
			break;

		case PORTD_ID:
			if(value == 1)
    2f72:	8b 81       	ldd	r24, Y+3	; 0x03
    2f74:	81 30       	cpi	r24, 0x01	; 1
    2f76:	a1 f4       	brne	.+40     	; 0x2fa0 <GPIO_writePin+0x19e>
				SET_BIT(PORTD,pin_num);
    2f78:	a2 e3       	ldi	r26, 0x32	; 50
    2f7a:	b0 e0       	ldi	r27, 0x00	; 0
    2f7c:	e2 e3       	ldi	r30, 0x32	; 50
    2f7e:	f0 e0       	ldi	r31, 0x00	; 0
    2f80:	80 81       	ld	r24, Z
    2f82:	48 2f       	mov	r20, r24
    2f84:	8a 81       	ldd	r24, Y+2	; 0x02
    2f86:	28 2f       	mov	r18, r24
    2f88:	30 e0       	ldi	r19, 0x00	; 0
    2f8a:	81 e0       	ldi	r24, 0x01	; 1
    2f8c:	90 e0       	ldi	r25, 0x00	; 0
    2f8e:	02 2e       	mov	r0, r18
    2f90:	02 c0       	rjmp	.+4      	; 0x2f96 <GPIO_writePin+0x194>
    2f92:	88 0f       	add	r24, r24
    2f94:	99 1f       	adc	r25, r25
    2f96:	0a 94       	dec	r0
    2f98:	e2 f7       	brpl	.-8      	; 0x2f92 <GPIO_writePin+0x190>
    2f9a:	84 2b       	or	r24, r20
    2f9c:	8c 93       	st	X, r24
    2f9e:	14 c0       	rjmp	.+40     	; 0x2fc8 <GPIO_writePin+0x1c6>
			else
				CLEAR_BIT(PORTD,pin_num);
    2fa0:	a2 e3       	ldi	r26, 0x32	; 50
    2fa2:	b0 e0       	ldi	r27, 0x00	; 0
    2fa4:	e2 e3       	ldi	r30, 0x32	; 50
    2fa6:	f0 e0       	ldi	r31, 0x00	; 0
    2fa8:	80 81       	ld	r24, Z
    2faa:	48 2f       	mov	r20, r24
    2fac:	8a 81       	ldd	r24, Y+2	; 0x02
    2fae:	28 2f       	mov	r18, r24
    2fb0:	30 e0       	ldi	r19, 0x00	; 0
    2fb2:	81 e0       	ldi	r24, 0x01	; 1
    2fb4:	90 e0       	ldi	r25, 0x00	; 0
    2fb6:	02 2e       	mov	r0, r18
    2fb8:	02 c0       	rjmp	.+4      	; 0x2fbe <GPIO_writePin+0x1bc>
    2fba:	88 0f       	add	r24, r24
    2fbc:	99 1f       	adc	r25, r25
    2fbe:	0a 94       	dec	r0
    2fc0:	e2 f7       	brpl	.-8      	; 0x2fba <GPIO_writePin+0x1b8>
    2fc2:	80 95       	com	r24
    2fc4:	84 23       	and	r24, r20
    2fc6:	8c 93       	st	X, r24
		}


	}
}
    2fc8:	0f 90       	pop	r0
    2fca:	0f 90       	pop	r0
    2fcc:	0f 90       	pop	r0
    2fce:	0f 90       	pop	r0
    2fd0:	0f 90       	pop	r0
    2fd2:	cf 91       	pop	r28
    2fd4:	df 91       	pop	r29
    2fd6:	08 95       	ret

00002fd8 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    2fd8:	df 93       	push	r29
    2fda:	cf 93       	push	r28
    2fdc:	00 d0       	rcall	.+0      	; 0x2fde <GPIO_readPin+0x6>
    2fde:	00 d0       	rcall	.+0      	; 0x2fe0 <GPIO_readPin+0x8>
    2fe0:	0f 92       	push	r0
    2fe2:	cd b7       	in	r28, 0x3d	; 61
    2fe4:	de b7       	in	r29, 0x3e	; 62
    2fe6:	89 83       	std	Y+1, r24	; 0x01
    2fe8:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2fea:	8a 81       	ldd	r24, Y+2	; 0x02
    2fec:	88 30       	cpi	r24, 0x08	; 8
    2fee:	08 f0       	brcs	.+2      	; 0x2ff2 <GPIO_readPin+0x1a>
    2ff0:	85 c0       	rjmp	.+266    	; 0x30fc <GPIO_readPin+0x124>
    2ff2:	89 81       	ldd	r24, Y+1	; 0x01
    2ff4:	84 30       	cpi	r24, 0x04	; 4
    2ff6:	08 f0       	brcs	.+2      	; 0x2ffa <GPIO_readPin+0x22>
    2ff8:	81 c0       	rjmp	.+258    	; 0x30fc <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    2ffa:	89 81       	ldd	r24, Y+1	; 0x01
    2ffc:	28 2f       	mov	r18, r24
    2ffe:	30 e0       	ldi	r19, 0x00	; 0
    3000:	3d 83       	std	Y+5, r19	; 0x05
    3002:	2c 83       	std	Y+4, r18	; 0x04
    3004:	4c 81       	ldd	r20, Y+4	; 0x04
    3006:	5d 81       	ldd	r21, Y+5	; 0x05
    3008:	41 30       	cpi	r20, 0x01	; 1
    300a:	51 05       	cpc	r21, r1
    300c:	79 f1       	breq	.+94     	; 0x306c <GPIO_readPin+0x94>
    300e:	8c 81       	ldd	r24, Y+4	; 0x04
    3010:	9d 81       	ldd	r25, Y+5	; 0x05
    3012:	82 30       	cpi	r24, 0x02	; 2
    3014:	91 05       	cpc	r25, r1
    3016:	34 f4       	brge	.+12     	; 0x3024 <GPIO_readPin+0x4c>
    3018:	2c 81       	ldd	r18, Y+4	; 0x04
    301a:	3d 81       	ldd	r19, Y+5	; 0x05
    301c:	21 15       	cp	r18, r1
    301e:	31 05       	cpc	r19, r1
    3020:	69 f0       	breq	.+26     	; 0x303c <GPIO_readPin+0x64>
    3022:	6c c0       	rjmp	.+216    	; 0x30fc <GPIO_readPin+0x124>
    3024:	4c 81       	ldd	r20, Y+4	; 0x04
    3026:	5d 81       	ldd	r21, Y+5	; 0x05
    3028:	42 30       	cpi	r20, 0x02	; 2
    302a:	51 05       	cpc	r21, r1
    302c:	b9 f1       	breq	.+110    	; 0x309c <GPIO_readPin+0xc4>
    302e:	8c 81       	ldd	r24, Y+4	; 0x04
    3030:	9d 81       	ldd	r25, Y+5	; 0x05
    3032:	83 30       	cpi	r24, 0x03	; 3
    3034:	91 05       	cpc	r25, r1
    3036:	09 f4       	brne	.+2      	; 0x303a <GPIO_readPin+0x62>
    3038:	49 c0       	rjmp	.+146    	; 0x30cc <GPIO_readPin+0xf4>
    303a:	60 c0       	rjmp	.+192    	; 0x30fc <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if( BIT_IS_SET(PINA , pin_num) )
    303c:	e9 e3       	ldi	r30, 0x39	; 57
    303e:	f0 e0       	ldi	r31, 0x00	; 0
    3040:	80 81       	ld	r24, Z
    3042:	28 2f       	mov	r18, r24
    3044:	30 e0       	ldi	r19, 0x00	; 0
    3046:	8a 81       	ldd	r24, Y+2	; 0x02
    3048:	88 2f       	mov	r24, r24
    304a:	90 e0       	ldi	r25, 0x00	; 0
    304c:	a9 01       	movw	r20, r18
    304e:	02 c0       	rjmp	.+4      	; 0x3054 <GPIO_readPin+0x7c>
    3050:	55 95       	asr	r21
    3052:	47 95       	ror	r20
    3054:	8a 95       	dec	r24
    3056:	e2 f7       	brpl	.-8      	; 0x3050 <GPIO_readPin+0x78>
    3058:	ca 01       	movw	r24, r20
    305a:	81 70       	andi	r24, 0x01	; 1
    305c:	90 70       	andi	r25, 0x00	; 0
    305e:	88 23       	and	r24, r24
    3060:	19 f0       	breq	.+6      	; 0x3068 <GPIO_readPin+0x90>
				return 1;
    3062:	51 e0       	ldi	r21, 0x01	; 1
    3064:	5b 83       	std	Y+3, r21	; 0x03
    3066:	4b c0       	rjmp	.+150    	; 0x30fe <GPIO_readPin+0x126>
			else
				return 0;
    3068:	1b 82       	std	Y+3, r1	; 0x03
    306a:	49 c0       	rjmp	.+146    	; 0x30fe <GPIO_readPin+0x126>
			break;

		case PORTB_ID:
			if( BIT_IS_SET(PINB , pin_num) )
    306c:	e6 e3       	ldi	r30, 0x36	; 54
    306e:	f0 e0       	ldi	r31, 0x00	; 0
    3070:	80 81       	ld	r24, Z
    3072:	28 2f       	mov	r18, r24
    3074:	30 e0       	ldi	r19, 0x00	; 0
    3076:	8a 81       	ldd	r24, Y+2	; 0x02
    3078:	88 2f       	mov	r24, r24
    307a:	90 e0       	ldi	r25, 0x00	; 0
    307c:	a9 01       	movw	r20, r18
    307e:	02 c0       	rjmp	.+4      	; 0x3084 <GPIO_readPin+0xac>
    3080:	55 95       	asr	r21
    3082:	47 95       	ror	r20
    3084:	8a 95       	dec	r24
    3086:	e2 f7       	brpl	.-8      	; 0x3080 <GPIO_readPin+0xa8>
    3088:	ca 01       	movw	r24, r20
    308a:	81 70       	andi	r24, 0x01	; 1
    308c:	90 70       	andi	r25, 0x00	; 0
    308e:	88 23       	and	r24, r24
    3090:	19 f0       	breq	.+6      	; 0x3098 <GPIO_readPin+0xc0>
				return 1;
    3092:	51 e0       	ldi	r21, 0x01	; 1
    3094:	5b 83       	std	Y+3, r21	; 0x03
    3096:	33 c0       	rjmp	.+102    	; 0x30fe <GPIO_readPin+0x126>
			else
				return 0;
    3098:	1b 82       	std	Y+3, r1	; 0x03
    309a:	31 c0       	rjmp	.+98     	; 0x30fe <GPIO_readPin+0x126>
			break;

		case PORTC_ID:
			if( BIT_IS_SET(PINC , pin_num) )
    309c:	e3 e3       	ldi	r30, 0x33	; 51
    309e:	f0 e0       	ldi	r31, 0x00	; 0
    30a0:	80 81       	ld	r24, Z
    30a2:	28 2f       	mov	r18, r24
    30a4:	30 e0       	ldi	r19, 0x00	; 0
    30a6:	8a 81       	ldd	r24, Y+2	; 0x02
    30a8:	88 2f       	mov	r24, r24
    30aa:	90 e0       	ldi	r25, 0x00	; 0
    30ac:	a9 01       	movw	r20, r18
    30ae:	02 c0       	rjmp	.+4      	; 0x30b4 <GPIO_readPin+0xdc>
    30b0:	55 95       	asr	r21
    30b2:	47 95       	ror	r20
    30b4:	8a 95       	dec	r24
    30b6:	e2 f7       	brpl	.-8      	; 0x30b0 <GPIO_readPin+0xd8>
    30b8:	ca 01       	movw	r24, r20
    30ba:	81 70       	andi	r24, 0x01	; 1
    30bc:	90 70       	andi	r25, 0x00	; 0
    30be:	88 23       	and	r24, r24
    30c0:	19 f0       	breq	.+6      	; 0x30c8 <GPIO_readPin+0xf0>
				return 1;
    30c2:	51 e0       	ldi	r21, 0x01	; 1
    30c4:	5b 83       	std	Y+3, r21	; 0x03
    30c6:	1b c0       	rjmp	.+54     	; 0x30fe <GPIO_readPin+0x126>
			else
				return 0;
    30c8:	1b 82       	std	Y+3, r1	; 0x03
    30ca:	19 c0       	rjmp	.+50     	; 0x30fe <GPIO_readPin+0x126>
			break;

		case PORTD_ID:
			if( BIT_IS_SET(PIND , pin_num) )
    30cc:	e0 e3       	ldi	r30, 0x30	; 48
    30ce:	f0 e0       	ldi	r31, 0x00	; 0
    30d0:	80 81       	ld	r24, Z
    30d2:	28 2f       	mov	r18, r24
    30d4:	30 e0       	ldi	r19, 0x00	; 0
    30d6:	8a 81       	ldd	r24, Y+2	; 0x02
    30d8:	88 2f       	mov	r24, r24
    30da:	90 e0       	ldi	r25, 0x00	; 0
    30dc:	a9 01       	movw	r20, r18
    30de:	02 c0       	rjmp	.+4      	; 0x30e4 <GPIO_readPin+0x10c>
    30e0:	55 95       	asr	r21
    30e2:	47 95       	ror	r20
    30e4:	8a 95       	dec	r24
    30e6:	e2 f7       	brpl	.-8      	; 0x30e0 <GPIO_readPin+0x108>
    30e8:	ca 01       	movw	r24, r20
    30ea:	81 70       	andi	r24, 0x01	; 1
    30ec:	90 70       	andi	r25, 0x00	; 0
    30ee:	88 23       	and	r24, r24
    30f0:	19 f0       	breq	.+6      	; 0x30f8 <GPIO_readPin+0x120>
				return 1;
    30f2:	51 e0       	ldi	r21, 0x01	; 1
    30f4:	5b 83       	std	Y+3, r21	; 0x03
    30f6:	03 c0       	rjmp	.+6      	; 0x30fe <GPIO_readPin+0x126>
			else
				return 0;
    30f8:	1b 82       	std	Y+3, r1	; 0x03
    30fa:	01 c0       	rjmp	.+2      	; 0x30fe <GPIO_readPin+0x126>
			break;
		}
	}
	return 0;
    30fc:	1b 82       	std	Y+3, r1	; 0x03
    30fe:	8b 81       	ldd	r24, Y+3	; 0x03

}
    3100:	0f 90       	pop	r0
    3102:	0f 90       	pop	r0
    3104:	0f 90       	pop	r0
    3106:	0f 90       	pop	r0
    3108:	0f 90       	pop	r0
    310a:	cf 91       	pop	r28
    310c:	df 91       	pop	r29
    310e:	08 95       	ret

00003110 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    3110:	df 93       	push	r29
    3112:	cf 93       	push	r28
    3114:	00 d0       	rcall	.+0      	; 0x3116 <GPIO_setupPortDirection+0x6>
    3116:	00 d0       	rcall	.+0      	; 0x3118 <GPIO_setupPortDirection+0x8>
    3118:	cd b7       	in	r28, 0x3d	; 61
    311a:	de b7       	in	r29, 0x3e	; 62
    311c:	89 83       	std	Y+1, r24	; 0x01
    311e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    3120:	89 81       	ldd	r24, Y+1	; 0x01
    3122:	84 30       	cpi	r24, 0x04	; 4
    3124:	90 f5       	brcc	.+100    	; 0x318a <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    3126:	89 81       	ldd	r24, Y+1	; 0x01
    3128:	28 2f       	mov	r18, r24
    312a:	30 e0       	ldi	r19, 0x00	; 0
    312c:	3c 83       	std	Y+4, r19	; 0x04
    312e:	2b 83       	std	Y+3, r18	; 0x03
    3130:	8b 81       	ldd	r24, Y+3	; 0x03
    3132:	9c 81       	ldd	r25, Y+4	; 0x04
    3134:	81 30       	cpi	r24, 0x01	; 1
    3136:	91 05       	cpc	r25, r1
    3138:	d1 f0       	breq	.+52     	; 0x316e <GPIO_setupPortDirection+0x5e>
    313a:	2b 81       	ldd	r18, Y+3	; 0x03
    313c:	3c 81       	ldd	r19, Y+4	; 0x04
    313e:	22 30       	cpi	r18, 0x02	; 2
    3140:	31 05       	cpc	r19, r1
    3142:	2c f4       	brge	.+10     	; 0x314e <GPIO_setupPortDirection+0x3e>
    3144:	8b 81       	ldd	r24, Y+3	; 0x03
    3146:	9c 81       	ldd	r25, Y+4	; 0x04
    3148:	00 97       	sbiw	r24, 0x00	; 0
    314a:	61 f0       	breq	.+24     	; 0x3164 <GPIO_setupPortDirection+0x54>
    314c:	1e c0       	rjmp	.+60     	; 0x318a <GPIO_setupPortDirection+0x7a>
    314e:	2b 81       	ldd	r18, Y+3	; 0x03
    3150:	3c 81       	ldd	r19, Y+4	; 0x04
    3152:	22 30       	cpi	r18, 0x02	; 2
    3154:	31 05       	cpc	r19, r1
    3156:	81 f0       	breq	.+32     	; 0x3178 <GPIO_setupPortDirection+0x68>
    3158:	8b 81       	ldd	r24, Y+3	; 0x03
    315a:	9c 81       	ldd	r25, Y+4	; 0x04
    315c:	83 30       	cpi	r24, 0x03	; 3
    315e:	91 05       	cpc	r25, r1
    3160:	81 f0       	breq	.+32     	; 0x3182 <GPIO_setupPortDirection+0x72>
    3162:	13 c0       	rjmp	.+38     	; 0x318a <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    3164:	ea e3       	ldi	r30, 0x3A	; 58
    3166:	f0 e0       	ldi	r31, 0x00	; 0
    3168:	8a 81       	ldd	r24, Y+2	; 0x02
    316a:	80 83       	st	Z, r24
    316c:	0e c0       	rjmp	.+28     	; 0x318a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    316e:	e7 e3       	ldi	r30, 0x37	; 55
    3170:	f0 e0       	ldi	r31, 0x00	; 0
    3172:	8a 81       	ldd	r24, Y+2	; 0x02
    3174:	80 83       	st	Z, r24
    3176:	09 c0       	rjmp	.+18     	; 0x318a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    3178:	e4 e3       	ldi	r30, 0x34	; 52
    317a:	f0 e0       	ldi	r31, 0x00	; 0
    317c:	8a 81       	ldd	r24, Y+2	; 0x02
    317e:	80 83       	st	Z, r24
    3180:	04 c0       	rjmp	.+8      	; 0x318a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    3182:	e1 e3       	ldi	r30, 0x31	; 49
    3184:	f0 e0       	ldi	r31, 0x00	; 0
    3186:	8a 81       	ldd	r24, Y+2	; 0x02
    3188:	80 83       	st	Z, r24
			break;
		}
	}
}
    318a:	0f 90       	pop	r0
    318c:	0f 90       	pop	r0
    318e:	0f 90       	pop	r0
    3190:	0f 90       	pop	r0
    3192:	cf 91       	pop	r28
    3194:	df 91       	pop	r29
    3196:	08 95       	ret

00003198 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    3198:	df 93       	push	r29
    319a:	cf 93       	push	r28
    319c:	00 d0       	rcall	.+0      	; 0x319e <GPIO_writePort+0x6>
    319e:	00 d0       	rcall	.+0      	; 0x31a0 <GPIO_writePort+0x8>
    31a0:	cd b7       	in	r28, 0x3d	; 61
    31a2:	de b7       	in	r29, 0x3e	; 62
    31a4:	89 83       	std	Y+1, r24	; 0x01
    31a6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    31a8:	89 81       	ldd	r24, Y+1	; 0x01
    31aa:	84 30       	cpi	r24, 0x04	; 4
    31ac:	90 f5       	brcc	.+100    	; 0x3212 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    31ae:	89 81       	ldd	r24, Y+1	; 0x01
    31b0:	28 2f       	mov	r18, r24
    31b2:	30 e0       	ldi	r19, 0x00	; 0
    31b4:	3c 83       	std	Y+4, r19	; 0x04
    31b6:	2b 83       	std	Y+3, r18	; 0x03
    31b8:	8b 81       	ldd	r24, Y+3	; 0x03
    31ba:	9c 81       	ldd	r25, Y+4	; 0x04
    31bc:	81 30       	cpi	r24, 0x01	; 1
    31be:	91 05       	cpc	r25, r1
    31c0:	d1 f0       	breq	.+52     	; 0x31f6 <GPIO_writePort+0x5e>
    31c2:	2b 81       	ldd	r18, Y+3	; 0x03
    31c4:	3c 81       	ldd	r19, Y+4	; 0x04
    31c6:	22 30       	cpi	r18, 0x02	; 2
    31c8:	31 05       	cpc	r19, r1
    31ca:	2c f4       	brge	.+10     	; 0x31d6 <GPIO_writePort+0x3e>
    31cc:	8b 81       	ldd	r24, Y+3	; 0x03
    31ce:	9c 81       	ldd	r25, Y+4	; 0x04
    31d0:	00 97       	sbiw	r24, 0x00	; 0
    31d2:	61 f0       	breq	.+24     	; 0x31ec <GPIO_writePort+0x54>
    31d4:	1e c0       	rjmp	.+60     	; 0x3212 <GPIO_writePort+0x7a>
    31d6:	2b 81       	ldd	r18, Y+3	; 0x03
    31d8:	3c 81       	ldd	r19, Y+4	; 0x04
    31da:	22 30       	cpi	r18, 0x02	; 2
    31dc:	31 05       	cpc	r19, r1
    31de:	81 f0       	breq	.+32     	; 0x3200 <GPIO_writePort+0x68>
    31e0:	8b 81       	ldd	r24, Y+3	; 0x03
    31e2:	9c 81       	ldd	r25, Y+4	; 0x04
    31e4:	83 30       	cpi	r24, 0x03	; 3
    31e6:	91 05       	cpc	r25, r1
    31e8:	81 f0       	breq	.+32     	; 0x320a <GPIO_writePort+0x72>
    31ea:	13 c0       	rjmp	.+38     	; 0x3212 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    31ec:	eb e3       	ldi	r30, 0x3B	; 59
    31ee:	f0 e0       	ldi	r31, 0x00	; 0
    31f0:	8a 81       	ldd	r24, Y+2	; 0x02
    31f2:	80 83       	st	Z, r24
    31f4:	0e c0       	rjmp	.+28     	; 0x3212 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    31f6:	e8 e3       	ldi	r30, 0x38	; 56
    31f8:	f0 e0       	ldi	r31, 0x00	; 0
    31fa:	8a 81       	ldd	r24, Y+2	; 0x02
    31fc:	80 83       	st	Z, r24
    31fe:	09 c0       	rjmp	.+18     	; 0x3212 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    3200:	e5 e3       	ldi	r30, 0x35	; 53
    3202:	f0 e0       	ldi	r31, 0x00	; 0
    3204:	8a 81       	ldd	r24, Y+2	; 0x02
    3206:	80 83       	st	Z, r24
    3208:	04 c0       	rjmp	.+8      	; 0x3212 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    320a:	e2 e3       	ldi	r30, 0x32	; 50
    320c:	f0 e0       	ldi	r31, 0x00	; 0
    320e:	8a 81       	ldd	r24, Y+2	; 0x02
    3210:	80 83       	st	Z, r24
			break;
		}
	}
}
    3212:	0f 90       	pop	r0
    3214:	0f 90       	pop	r0
    3216:	0f 90       	pop	r0
    3218:	0f 90       	pop	r0
    321a:	cf 91       	pop	r28
    321c:	df 91       	pop	r29
    321e:	08 95       	ret

00003220 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    3220:	df 93       	push	r29
    3222:	cf 93       	push	r28
    3224:	00 d0       	rcall	.+0      	; 0x3226 <GPIO_readPort+0x6>
    3226:	00 d0       	rcall	.+0      	; 0x3228 <GPIO_readPort+0x8>
    3228:	cd b7       	in	r28, 0x3d	; 61
    322a:	de b7       	in	r29, 0x3e	; 62
    322c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    322e:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    3230:	8a 81       	ldd	r24, Y+2	; 0x02
    3232:	84 30       	cpi	r24, 0x04	; 4
    3234:	90 f5       	brcc	.+100    	; 0x329a <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    3236:	8a 81       	ldd	r24, Y+2	; 0x02
    3238:	28 2f       	mov	r18, r24
    323a:	30 e0       	ldi	r19, 0x00	; 0
    323c:	3c 83       	std	Y+4, r19	; 0x04
    323e:	2b 83       	std	Y+3, r18	; 0x03
    3240:	8b 81       	ldd	r24, Y+3	; 0x03
    3242:	9c 81       	ldd	r25, Y+4	; 0x04
    3244:	81 30       	cpi	r24, 0x01	; 1
    3246:	91 05       	cpc	r25, r1
    3248:	d1 f0       	breq	.+52     	; 0x327e <GPIO_readPort+0x5e>
    324a:	2b 81       	ldd	r18, Y+3	; 0x03
    324c:	3c 81       	ldd	r19, Y+4	; 0x04
    324e:	22 30       	cpi	r18, 0x02	; 2
    3250:	31 05       	cpc	r19, r1
    3252:	2c f4       	brge	.+10     	; 0x325e <GPIO_readPort+0x3e>
    3254:	8b 81       	ldd	r24, Y+3	; 0x03
    3256:	9c 81       	ldd	r25, Y+4	; 0x04
    3258:	00 97       	sbiw	r24, 0x00	; 0
    325a:	61 f0       	breq	.+24     	; 0x3274 <GPIO_readPort+0x54>
    325c:	1e c0       	rjmp	.+60     	; 0x329a <GPIO_readPort+0x7a>
    325e:	2b 81       	ldd	r18, Y+3	; 0x03
    3260:	3c 81       	ldd	r19, Y+4	; 0x04
    3262:	22 30       	cpi	r18, 0x02	; 2
    3264:	31 05       	cpc	r19, r1
    3266:	81 f0       	breq	.+32     	; 0x3288 <GPIO_readPort+0x68>
    3268:	8b 81       	ldd	r24, Y+3	; 0x03
    326a:	9c 81       	ldd	r25, Y+4	; 0x04
    326c:	83 30       	cpi	r24, 0x03	; 3
    326e:	91 05       	cpc	r25, r1
    3270:	81 f0       	breq	.+32     	; 0x3292 <GPIO_readPort+0x72>
    3272:	13 c0       	rjmp	.+38     	; 0x329a <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    3274:	e9 e3       	ldi	r30, 0x39	; 57
    3276:	f0 e0       	ldi	r31, 0x00	; 0
    3278:	80 81       	ld	r24, Z
    327a:	89 83       	std	Y+1, r24	; 0x01
    327c:	0e c0       	rjmp	.+28     	; 0x329a <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    327e:	e6 e3       	ldi	r30, 0x36	; 54
    3280:	f0 e0       	ldi	r31, 0x00	; 0
    3282:	80 81       	ld	r24, Z
    3284:	89 83       	std	Y+1, r24	; 0x01
    3286:	09 c0       	rjmp	.+18     	; 0x329a <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    3288:	e3 e3       	ldi	r30, 0x33	; 51
    328a:	f0 e0       	ldi	r31, 0x00	; 0
    328c:	80 81       	ld	r24, Z
    328e:	89 83       	std	Y+1, r24	; 0x01
    3290:	04 c0       	rjmp	.+8      	; 0x329a <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    3292:	e0 e3       	ldi	r30, 0x30	; 48
    3294:	f0 e0       	ldi	r31, 0x00	; 0
    3296:	80 81       	ld	r24, Z
    3298:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    329a:	89 81       	ldd	r24, Y+1	; 0x01
}
    329c:	0f 90       	pop	r0
    329e:	0f 90       	pop	r0
    32a0:	0f 90       	pop	r0
    32a2:	0f 90       	pop	r0
    32a4:	cf 91       	pop	r28
    32a6:	df 91       	pop	r29
    32a8:	08 95       	ret

000032aa <KEYPAD_getPressedKey>:
#include "avr/delay.h"

uint8 KEYPAD_adjustKeyNumber(uint8 button_num);

uint8 KEYPAD_getPressedKey()
{
    32aa:	df 93       	push	r29
    32ac:	cf 93       	push	r28
    32ae:	cd b7       	in	r28, 0x3d	; 61
    32b0:	de b7       	in	r29, 0x3e	; 62
    32b2:	64 97       	sbiw	r28, 0x14	; 20
    32b4:	0f b6       	in	r0, 0x3f	; 63
    32b6:	f8 94       	cli
    32b8:	de bf       	out	0x3e, r29	; 62
    32ba:	0f be       	out	0x3f, r0	; 63
    32bc:	cd bf       	out	0x3d, r28	; 61
	/* Make the columns pins as input by static configuration */
	for(int i=0;i<KEYPAD_COLUMN_NUMB;i++)
    32be:	1c 8a       	std	Y+20, r1	; 0x14
    32c0:	1b 8a       	std	Y+19, r1	; 0x13
    32c2:	0b c0       	rjmp	.+22     	; 0x32da <KEYPAD_getPressedKey+0x30>
    	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_COL_START_PIN_ID+i, INPUT);
    32c4:	9b 89       	ldd	r25, Y+19	; 0x13
    32c6:	80 e0       	ldi	r24, 0x00	; 0
    32c8:	69 2f       	mov	r22, r25
    32ca:	40 e0       	ldi	r20, 0x00	; 0
    32cc:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <GPIO_setupPinDirection>
uint8 KEYPAD_adjustKeyNumber(uint8 button_num);

uint8 KEYPAD_getPressedKey()
{
	/* Make the columns pins as input by static configuration */
	for(int i=0;i<KEYPAD_COLUMN_NUMB;i++)
    32d0:	8b 89       	ldd	r24, Y+19	; 0x13
    32d2:	9c 89       	ldd	r25, Y+20	; 0x14
    32d4:	01 96       	adiw	r24, 0x01	; 1
    32d6:	9c 8b       	std	Y+20, r25	; 0x14
    32d8:	8b 8b       	std	Y+19, r24	; 0x13
    32da:	8b 89       	ldd	r24, Y+19	; 0x13
    32dc:	9c 89       	ldd	r25, Y+20	; 0x14
    32de:	84 30       	cpi	r24, 0x04	; 4
    32e0:	91 05       	cpc	r25, r1
    32e2:	84 f3       	brlt	.-32     	; 0x32c4 <KEYPAD_getPressedKey+0x1a>
    32e4:	80 e0       	ldi	r24, 0x00	; 0
    32e6:	90 e0       	ldi	r25, 0x00	; 0
    32e8:	a8 e4       	ldi	r26, 0x48	; 72
    32ea:	b2 e4       	ldi	r27, 0x42	; 66
    32ec:	8b 87       	std	Y+11, r24	; 0x0b
    32ee:	9c 87       	std	Y+12, r25	; 0x0c
    32f0:	ad 87       	std	Y+13, r26	; 0x0d
    32f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    32f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    32f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    32fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    32fc:	20 e0       	ldi	r18, 0x00	; 0
    32fe:	30 e0       	ldi	r19, 0x00	; 0
    3300:	4a ef       	ldi	r20, 0xFA	; 250
    3302:	54 e4       	ldi	r21, 0x44	; 68
    3304:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3308:	dc 01       	movw	r26, r24
    330a:	cb 01       	movw	r24, r22
    330c:	8f 83       	std	Y+7, r24	; 0x07
    330e:	98 87       	std	Y+8, r25	; 0x08
    3310:	a9 87       	std	Y+9, r26	; 0x09
    3312:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3314:	6f 81       	ldd	r22, Y+7	; 0x07
    3316:	78 85       	ldd	r23, Y+8	; 0x08
    3318:	89 85       	ldd	r24, Y+9	; 0x09
    331a:	9a 85       	ldd	r25, Y+10	; 0x0a
    331c:	20 e0       	ldi	r18, 0x00	; 0
    331e:	30 e0       	ldi	r19, 0x00	; 0
    3320:	40 e8       	ldi	r20, 0x80	; 128
    3322:	5f e3       	ldi	r21, 0x3F	; 63
    3324:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3328:	88 23       	and	r24, r24
    332a:	2c f4       	brge	.+10     	; 0x3336 <KEYPAD_getPressedKey+0x8c>
		__ticks = 1;
    332c:	81 e0       	ldi	r24, 0x01	; 1
    332e:	90 e0       	ldi	r25, 0x00	; 0
    3330:	9e 83       	std	Y+6, r25	; 0x06
    3332:	8d 83       	std	Y+5, r24	; 0x05
    3334:	3f c0       	rjmp	.+126    	; 0x33b4 <KEYPAD_getPressedKey+0x10a>
	else if (__tmp > 65535)
    3336:	6f 81       	ldd	r22, Y+7	; 0x07
    3338:	78 85       	ldd	r23, Y+8	; 0x08
    333a:	89 85       	ldd	r24, Y+9	; 0x09
    333c:	9a 85       	ldd	r25, Y+10	; 0x0a
    333e:	20 e0       	ldi	r18, 0x00	; 0
    3340:	3f ef       	ldi	r19, 0xFF	; 255
    3342:	4f e7       	ldi	r20, 0x7F	; 127
    3344:	57 e4       	ldi	r21, 0x47	; 71
    3346:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    334a:	18 16       	cp	r1, r24
    334c:	4c f5       	brge	.+82     	; 0x33a0 <KEYPAD_getPressedKey+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    334e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3350:	7c 85       	ldd	r23, Y+12	; 0x0c
    3352:	8d 85       	ldd	r24, Y+13	; 0x0d
    3354:	9e 85       	ldd	r25, Y+14	; 0x0e
    3356:	20 e0       	ldi	r18, 0x00	; 0
    3358:	30 e0       	ldi	r19, 0x00	; 0
    335a:	40 e2       	ldi	r20, 0x20	; 32
    335c:	51 e4       	ldi	r21, 0x41	; 65
    335e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3362:	dc 01       	movw	r26, r24
    3364:	cb 01       	movw	r24, r22
    3366:	bc 01       	movw	r22, r24
    3368:	cd 01       	movw	r24, r26
    336a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    336e:	dc 01       	movw	r26, r24
    3370:	cb 01       	movw	r24, r22
    3372:	9e 83       	std	Y+6, r25	; 0x06
    3374:	8d 83       	std	Y+5, r24	; 0x05
    3376:	0f c0       	rjmp	.+30     	; 0x3396 <KEYPAD_getPressedKey+0xec>
    3378:	88 ec       	ldi	r24, 0xC8	; 200
    337a:	90 e0       	ldi	r25, 0x00	; 0
    337c:	9c 83       	std	Y+4, r25	; 0x04
    337e:	8b 83       	std	Y+3, r24	; 0x03
    3380:	8b 81       	ldd	r24, Y+3	; 0x03
    3382:	9c 81       	ldd	r25, Y+4	; 0x04
    3384:	01 97       	sbiw	r24, 0x01	; 1
    3386:	f1 f7       	brne	.-4      	; 0x3384 <KEYPAD_getPressedKey+0xda>
    3388:	9c 83       	std	Y+4, r25	; 0x04
    338a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    338c:	8d 81       	ldd	r24, Y+5	; 0x05
    338e:	9e 81       	ldd	r25, Y+6	; 0x06
    3390:	01 97       	sbiw	r24, 0x01	; 1
    3392:	9e 83       	std	Y+6, r25	; 0x06
    3394:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3396:	8d 81       	ldd	r24, Y+5	; 0x05
    3398:	9e 81       	ldd	r25, Y+6	; 0x06
    339a:	00 97       	sbiw	r24, 0x00	; 0
    339c:	69 f7       	brne	.-38     	; 0x3378 <KEYPAD_getPressedKey+0xce>
    339e:	14 c0       	rjmp	.+40     	; 0x33c8 <KEYPAD_getPressedKey+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33a0:	6f 81       	ldd	r22, Y+7	; 0x07
    33a2:	78 85       	ldd	r23, Y+8	; 0x08
    33a4:	89 85       	ldd	r24, Y+9	; 0x09
    33a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    33a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33ac:	dc 01       	movw	r26, r24
    33ae:	cb 01       	movw	r24, r22
    33b0:	9e 83       	std	Y+6, r25	; 0x06
    33b2:	8d 83       	std	Y+5, r24	; 0x05
    33b4:	8d 81       	ldd	r24, Y+5	; 0x05
    33b6:	9e 81       	ldd	r25, Y+6	; 0x06
    33b8:	9a 83       	std	Y+2, r25	; 0x02
    33ba:	89 83       	std	Y+1, r24	; 0x01
    33bc:	89 81       	ldd	r24, Y+1	; 0x01
    33be:	9a 81       	ldd	r25, Y+2	; 0x02
    33c0:	01 97       	sbiw	r24, 0x01	; 1
    33c2:	f1 f7       	brne	.-4      	; 0x33c0 <KEYPAD_getPressedKey+0x116>
    33c4:	9a 83       	std	Y+2, r25	; 0x02
    33c6:	89 83       	std	Y+1, r24	; 0x01
    	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_COL_START_PIN_ID+i, INPUT);

	while(1)
	{
       _delay_ms(50);
		for(int row=0;row<KEYPAD_ROWS_NUMB;row++)
    33c8:	1a 8a       	std	Y+18, r1	; 0x12
    33ca:	19 8a       	std	Y+17, r1	; 0x11
    33cc:	46 c0       	rjmp	.+140    	; 0x345a <KEYPAD_getPressedKey+0x1b0>
		{
			/*Make row pin as output and write 0 in it*/
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_START_PIN_ID+row , OUTPUT);
    33ce:	99 89       	ldd	r25, Y+17	; 0x11
    33d0:	81 e0       	ldi	r24, 0x01	; 1
    33d2:	69 2f       	mov	r22, r25
    33d4:	41 e0       	ldi	r20, 0x01	; 1
    33d6:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <GPIO_setupPinDirection>
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_START_PIN_ID+row , BUTTON_IS_PRESSED);
    33da:	99 89       	ldd	r25, Y+17	; 0x11
    33dc:	81 e0       	ldi	r24, 0x01	; 1
    33de:	69 2f       	mov	r22, r25
    33e0:	40 e0       	ldi	r20, 0x00	; 0
    33e2:	0e 94 01 17 	call	0x2e02	; 0x2e02 <GPIO_writePin>

			/*check if the button is pressed on channel or not*/
			for(int col=0;col<KEYPAD_COLUMN_NUMB;col++)
    33e6:	18 8a       	std	Y+16, r1	; 0x10
    33e8:	1f 86       	std	Y+15, r1	; 0x0f
    33ea:	27 c0       	rjmp	.+78     	; 0x343a <KEYPAD_getPressedKey+0x190>
			{
			 if(GPIO_readPin(KEYPAD_COL_PORT_ID , KEYPAD_COL_START_PIN_ID+col) == BUTTON_IS_PRESSED )
    33ec:	9f 85       	ldd	r25, Y+15	; 0x0f
    33ee:	80 e0       	ldi	r24, 0x00	; 0
    33f0:	69 2f       	mov	r22, r25
    33f2:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <GPIO_readPin>
    33f6:	88 23       	and	r24, r24
    33f8:	d9 f4       	brne	.+54     	; 0x3430 <KEYPAD_getPressedKey+0x186>
			 {
				GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_START_PIN_ID+row , INPUT);
    33fa:	99 89       	ldd	r25, Y+17	; 0x11
    33fc:	81 e0       	ldi	r24, 0x01	; 1
    33fe:	69 2f       	mov	r22, r25
    3400:	40 e0       	ldi	r20, 0x00	; 0
    3402:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <GPIO_setupPinDirection>
				return KEYPAD_adjustKeyNumber((row*KEYPAD_COLUMN_NUMB)+col+1);
    3406:	89 89       	ldd	r24, Y+17	; 0x11
    3408:	9a 89       	ldd	r25, Y+18	; 0x12
    340a:	88 0f       	add	r24, r24
    340c:	99 1f       	adc	r25, r25
    340e:	88 0f       	add	r24, r24
    3410:	99 1f       	adc	r25, r25
    3412:	98 2f       	mov	r25, r24
    3414:	8f 85       	ldd	r24, Y+15	; 0x0f
    3416:	89 0f       	add	r24, r25
    3418:	8f 5f       	subi	r24, 0xFF	; 255
    341a:	0e 94 34 1a 	call	0x3468	; 0x3468 <KEYPAD_adjustKeyNumber>
			}
            /*make this pin input to open another pin in row*/
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_START_PIN_ID+row , INPUT);
		}
}
}
    341e:	64 96       	adiw	r28, 0x14	; 20
    3420:	0f b6       	in	r0, 0x3f	; 63
    3422:	f8 94       	cli
    3424:	de bf       	out	0x3e, r29	; 62
    3426:	0f be       	out	0x3f, r0	; 63
    3428:	cd bf       	out	0x3d, r28	; 61
    342a:	cf 91       	pop	r28
    342c:	df 91       	pop	r29
    342e:	08 95       	ret
			/*Make row pin as output and write 0 in it*/
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_START_PIN_ID+row , OUTPUT);
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_START_PIN_ID+row , BUTTON_IS_PRESSED);

			/*check if the button is pressed on channel or not*/
			for(int col=0;col<KEYPAD_COLUMN_NUMB;col++)
    3430:	8f 85       	ldd	r24, Y+15	; 0x0f
    3432:	98 89       	ldd	r25, Y+16	; 0x10
    3434:	01 96       	adiw	r24, 0x01	; 1
    3436:	98 8b       	std	Y+16, r25	; 0x10
    3438:	8f 87       	std	Y+15, r24	; 0x0f
    343a:	8f 85       	ldd	r24, Y+15	; 0x0f
    343c:	98 89       	ldd	r25, Y+16	; 0x10
    343e:	84 30       	cpi	r24, 0x04	; 4
    3440:	91 05       	cpc	r25, r1
    3442:	a4 f2       	brlt	.-88     	; 0x33ec <KEYPAD_getPressedKey+0x142>
				return KEYPAD_adjustKeyNumber((row*KEYPAD_COLUMN_NUMB)+col+1);
			 }

			}
            /*make this pin input to open another pin in row*/
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_START_PIN_ID+row , INPUT);
    3444:	99 89       	ldd	r25, Y+17	; 0x11
    3446:	81 e0       	ldi	r24, 0x01	; 1
    3448:	69 2f       	mov	r22, r25
    344a:	40 e0       	ldi	r20, 0x00	; 0
    344c:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <GPIO_setupPinDirection>
    	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_COL_START_PIN_ID+i, INPUT);

	while(1)
	{
       _delay_ms(50);
		for(int row=0;row<KEYPAD_ROWS_NUMB;row++)
    3450:	89 89       	ldd	r24, Y+17	; 0x11
    3452:	9a 89       	ldd	r25, Y+18	; 0x12
    3454:	01 96       	adiw	r24, 0x01	; 1
    3456:	9a 8b       	std	Y+18, r25	; 0x12
    3458:	89 8b       	std	Y+17, r24	; 0x11
    345a:	89 89       	ldd	r24, Y+17	; 0x11
    345c:	9a 89       	ldd	r25, Y+18	; 0x12
    345e:	84 30       	cpi	r24, 0x04	; 4
    3460:	91 05       	cpc	r25, r1
    3462:	0c f4       	brge	.+2      	; 0x3466 <KEYPAD_getPressedKey+0x1bc>
    3464:	b4 cf       	rjmp	.-152    	; 0x33ce <KEYPAD_getPressedKey+0x124>
    3466:	3e cf       	rjmp	.-388    	; 0x32e4 <KEYPAD_getPressedKey+0x3a>

00003468 <KEYPAD_adjustKeyNumber>:
}
}


uint8 KEYPAD_adjustKeyNumber(uint8 button_num)
{
    3468:	df 93       	push	r29
    346a:	cf 93       	push	r28
    346c:	00 d0       	rcall	.+0      	; 0x346e <KEYPAD_adjustKeyNumber+0x6>
    346e:	00 d0       	rcall	.+0      	; 0x3470 <KEYPAD_adjustKeyNumber+0x8>
    3470:	cd b7       	in	r28, 0x3d	; 61
    3472:	de b7       	in	r29, 0x3e	; 62
    3474:	8a 83       	std	Y+2, r24	; 0x02
	uint8 adjustNum=0;
    3476:	19 82       	std	Y+1, r1	; 0x01
	switch(button_num)
    3478:	8a 81       	ldd	r24, Y+2	; 0x02
    347a:	28 2f       	mov	r18, r24
    347c:	30 e0       	ldi	r19, 0x00	; 0
    347e:	3c 83       	std	Y+4, r19	; 0x04
    3480:	2b 83       	std	Y+3, r18	; 0x03
    3482:	8b 81       	ldd	r24, Y+3	; 0x03
    3484:	9c 81       	ldd	r25, Y+4	; 0x04
    3486:	88 30       	cpi	r24, 0x08	; 8
    3488:	91 05       	cpc	r25, r1
    348a:	09 f4       	brne	.+2      	; 0x348e <KEYPAD_adjustKeyNumber+0x26>
    348c:	70 c0       	rjmp	.+224    	; 0x356e <KEYPAD_adjustKeyNumber+0x106>
    348e:	2b 81       	ldd	r18, Y+3	; 0x03
    3490:	3c 81       	ldd	r19, Y+4	; 0x04
    3492:	29 30       	cpi	r18, 0x09	; 9
    3494:	31 05       	cpc	r19, r1
    3496:	5c f5       	brge	.+86     	; 0x34ee <KEYPAD_adjustKeyNumber+0x86>
    3498:	8b 81       	ldd	r24, Y+3	; 0x03
    349a:	9c 81       	ldd	r25, Y+4	; 0x04
    349c:	84 30       	cpi	r24, 0x04	; 4
    349e:	91 05       	cpc	r25, r1
    34a0:	09 f4       	brne	.+2      	; 0x34a4 <KEYPAD_adjustKeyNumber+0x3c>
    34a2:	59 c0       	rjmp	.+178    	; 0x3556 <KEYPAD_adjustKeyNumber+0xee>
    34a4:	2b 81       	ldd	r18, Y+3	; 0x03
    34a6:	3c 81       	ldd	r19, Y+4	; 0x04
    34a8:	25 30       	cpi	r18, 0x05	; 5
    34aa:	31 05       	cpc	r19, r1
    34ac:	9c f4       	brge	.+38     	; 0x34d4 <KEYPAD_adjustKeyNumber+0x6c>
    34ae:	8b 81       	ldd	r24, Y+3	; 0x03
    34b0:	9c 81       	ldd	r25, Y+4	; 0x04
    34b2:	82 30       	cpi	r24, 0x02	; 2
    34b4:	91 05       	cpc	r25, r1
    34b6:	09 f4       	brne	.+2      	; 0x34ba <KEYPAD_adjustKeyNumber+0x52>
    34b8:	48 c0       	rjmp	.+144    	; 0x354a <KEYPAD_adjustKeyNumber+0xe2>
    34ba:	2b 81       	ldd	r18, Y+3	; 0x03
    34bc:	3c 81       	ldd	r19, Y+4	; 0x04
    34be:	23 30       	cpi	r18, 0x03	; 3
    34c0:	31 05       	cpc	r19, r1
    34c2:	0c f0       	brlt	.+2      	; 0x34c6 <KEYPAD_adjustKeyNumber+0x5e>
    34c4:	45 c0       	rjmp	.+138    	; 0x3550 <KEYPAD_adjustKeyNumber+0xe8>
    34c6:	8b 81       	ldd	r24, Y+3	; 0x03
    34c8:	9c 81       	ldd	r25, Y+4	; 0x04
    34ca:	81 30       	cpi	r24, 0x01	; 1
    34cc:	91 05       	cpc	r25, r1
    34ce:	09 f4       	brne	.+2      	; 0x34d2 <KEYPAD_adjustKeyNumber+0x6a>
    34d0:	39 c0       	rjmp	.+114    	; 0x3544 <KEYPAD_adjustKeyNumber+0xdc>
    34d2:	66 c0       	rjmp	.+204    	; 0x35a0 <KEYPAD_adjustKeyNumber+0x138>
    34d4:	2b 81       	ldd	r18, Y+3	; 0x03
    34d6:	3c 81       	ldd	r19, Y+4	; 0x04
    34d8:	26 30       	cpi	r18, 0x06	; 6
    34da:	31 05       	cpc	r19, r1
    34dc:	09 f4       	brne	.+2      	; 0x34e0 <KEYPAD_adjustKeyNumber+0x78>
    34de:	41 c0       	rjmp	.+130    	; 0x3562 <KEYPAD_adjustKeyNumber+0xfa>
    34e0:	8b 81       	ldd	r24, Y+3	; 0x03
    34e2:	9c 81       	ldd	r25, Y+4	; 0x04
    34e4:	87 30       	cpi	r24, 0x07	; 7
    34e6:	91 05       	cpc	r25, r1
    34e8:	0c f0       	brlt	.+2      	; 0x34ec <KEYPAD_adjustKeyNumber+0x84>
    34ea:	3e c0       	rjmp	.+124    	; 0x3568 <KEYPAD_adjustKeyNumber+0x100>
    34ec:	37 c0       	rjmp	.+110    	; 0x355c <KEYPAD_adjustKeyNumber+0xf4>
    34ee:	2b 81       	ldd	r18, Y+3	; 0x03
    34f0:	3c 81       	ldd	r19, Y+4	; 0x04
    34f2:	2c 30       	cpi	r18, 0x0C	; 12
    34f4:	31 05       	cpc	r19, r1
    34f6:	09 f4       	brne	.+2      	; 0x34fa <KEYPAD_adjustKeyNumber+0x92>
    34f8:	46 c0       	rjmp	.+140    	; 0x3586 <KEYPAD_adjustKeyNumber+0x11e>
    34fa:	8b 81       	ldd	r24, Y+3	; 0x03
    34fc:	9c 81       	ldd	r25, Y+4	; 0x04
    34fe:	8d 30       	cpi	r24, 0x0D	; 13
    3500:	91 05       	cpc	r25, r1
    3502:	5c f4       	brge	.+22     	; 0x351a <KEYPAD_adjustKeyNumber+0xb2>
    3504:	2b 81       	ldd	r18, Y+3	; 0x03
    3506:	3c 81       	ldd	r19, Y+4	; 0x04
    3508:	2a 30       	cpi	r18, 0x0A	; 10
    350a:	31 05       	cpc	r19, r1
    350c:	b1 f1       	breq	.+108    	; 0x357a <KEYPAD_adjustKeyNumber+0x112>
    350e:	8b 81       	ldd	r24, Y+3	; 0x03
    3510:	9c 81       	ldd	r25, Y+4	; 0x04
    3512:	8b 30       	cpi	r24, 0x0B	; 11
    3514:	91 05       	cpc	r25, r1
    3516:	a4 f5       	brge	.+104    	; 0x3580 <KEYPAD_adjustKeyNumber+0x118>
    3518:	2d c0       	rjmp	.+90     	; 0x3574 <KEYPAD_adjustKeyNumber+0x10c>
    351a:	2b 81       	ldd	r18, Y+3	; 0x03
    351c:	3c 81       	ldd	r19, Y+4	; 0x04
    351e:	2e 30       	cpi	r18, 0x0E	; 14
    3520:	31 05       	cpc	r19, r1
    3522:	b9 f1       	breq	.+110    	; 0x3592 <KEYPAD_adjustKeyNumber+0x12a>
    3524:	8b 81       	ldd	r24, Y+3	; 0x03
    3526:	9c 81       	ldd	r25, Y+4	; 0x04
    3528:	8e 30       	cpi	r24, 0x0E	; 14
    352a:	91 05       	cpc	r25, r1
    352c:	7c f1       	brlt	.+94     	; 0x358c <KEYPAD_adjustKeyNumber+0x124>
    352e:	2b 81       	ldd	r18, Y+3	; 0x03
    3530:	3c 81       	ldd	r19, Y+4	; 0x04
    3532:	2f 30       	cpi	r18, 0x0F	; 15
    3534:	31 05       	cpc	r19, r1
    3536:	81 f1       	breq	.+96     	; 0x3598 <KEYPAD_adjustKeyNumber+0x130>
    3538:	8b 81       	ldd	r24, Y+3	; 0x03
    353a:	9c 81       	ldd	r25, Y+4	; 0x04
    353c:	80 31       	cpi	r24, 0x10	; 16
    353e:	91 05       	cpc	r25, r1
    3540:	69 f1       	breq	.+90     	; 0x359c <KEYPAD_adjustKeyNumber+0x134>
    3542:	2e c0       	rjmp	.+92     	; 0x35a0 <KEYPAD_adjustKeyNumber+0x138>
	{
	case 1:
			adjustNum = BUTTON1;
    3544:	8f e2       	ldi	r24, 0x2F	; 47
    3546:	89 83       	std	Y+1, r24	; 0x01
    3548:	2b c0       	rjmp	.+86     	; 0x35a0 <KEYPAD_adjustKeyNumber+0x138>
			break;
	case 2:
			adjustNum = BUTTON2;
    354a:	89 e0       	ldi	r24, 0x09	; 9
    354c:	89 83       	std	Y+1, r24	; 0x01
    354e:	28 c0       	rjmp	.+80     	; 0x35a0 <KEYPAD_adjustKeyNumber+0x138>
			break;
	case 3:
			adjustNum = BUTTON3;
    3550:	88 e0       	ldi	r24, 0x08	; 8
    3552:	89 83       	std	Y+1, r24	; 0x01
    3554:	25 c0       	rjmp	.+74     	; 0x35a0 <KEYPAD_adjustKeyNumber+0x138>
			break;
	case 4:
			adjustNum = BUTTON4;
    3556:	87 e0       	ldi	r24, 0x07	; 7
    3558:	89 83       	std	Y+1, r24	; 0x01
    355a:	22 c0       	rjmp	.+68     	; 0x35a0 <KEYPAD_adjustKeyNumber+0x138>
			break;
	case 5:
			adjustNum = BUTTON5;
    355c:	8a e2       	ldi	r24, 0x2A	; 42
    355e:	89 83       	std	Y+1, r24	; 0x01
    3560:	1f c0       	rjmp	.+62     	; 0x35a0 <KEYPAD_adjustKeyNumber+0x138>
			break;
	case 6:
			adjustNum = BUTTON6;
    3562:	86 e0       	ldi	r24, 0x06	; 6
    3564:	89 83       	std	Y+1, r24	; 0x01
    3566:	1c c0       	rjmp	.+56     	; 0x35a0 <KEYPAD_adjustKeyNumber+0x138>
			break;
	case 7:
			adjustNum = BUTTON7;
    3568:	85 e0       	ldi	r24, 0x05	; 5
    356a:	89 83       	std	Y+1, r24	; 0x01
    356c:	19 c0       	rjmp	.+50     	; 0x35a0 <KEYPAD_adjustKeyNumber+0x138>
			break;
	case 8:
			adjustNum = BUTTON8;
    356e:	84 e0       	ldi	r24, 0x04	; 4
    3570:	89 83       	std	Y+1, r24	; 0x01
    3572:	16 c0       	rjmp	.+44     	; 0x35a0 <KEYPAD_adjustKeyNumber+0x138>
			break;
	case 9:
			adjustNum = BUTTON9;
    3574:	8d e2       	ldi	r24, 0x2D	; 45
    3576:	89 83       	std	Y+1, r24	; 0x01
    3578:	13 c0       	rjmp	.+38     	; 0x35a0 <KEYPAD_adjustKeyNumber+0x138>
			break;
	case 10:
			adjustNum = BUTTON10;
    357a:	83 e0       	ldi	r24, 0x03	; 3
    357c:	89 83       	std	Y+1, r24	; 0x01
    357e:	10 c0       	rjmp	.+32     	; 0x35a0 <KEYPAD_adjustKeyNumber+0x138>
			break;
	case 11:
			adjustNum = BUTTON11;
    3580:	82 e0       	ldi	r24, 0x02	; 2
    3582:	89 83       	std	Y+1, r24	; 0x01
    3584:	0d c0       	rjmp	.+26     	; 0x35a0 <KEYPAD_adjustKeyNumber+0x138>
			break;
	case 12:
			adjustNum = BUTTON12;
    3586:	81 e0       	ldi	r24, 0x01	; 1
    3588:	89 83       	std	Y+1, r24	; 0x01
    358a:	0a c0       	rjmp	.+20     	; 0x35a0 <KEYPAD_adjustKeyNumber+0x138>
			break;
	case 13:
			adjustNum = BUTTON13;
    358c:	8b e2       	ldi	r24, 0x2B	; 43
    358e:	89 83       	std	Y+1, r24	; 0x01
    3590:	07 c0       	rjmp	.+14     	; 0x35a0 <KEYPAD_adjustKeyNumber+0x138>
			break;
	case 14:
			adjustNum = BUTTON14;
    3592:	8d e3       	ldi	r24, 0x3D	; 61
    3594:	89 83       	std	Y+1, r24	; 0x01
    3596:	04 c0       	rjmp	.+8      	; 0x35a0 <KEYPAD_adjustKeyNumber+0x138>
			break;
	case 15:
			adjustNum = BUTTON15;
    3598:	19 82       	std	Y+1, r1	; 0x01
    359a:	02 c0       	rjmp	.+4      	; 0x35a0 <KEYPAD_adjustKeyNumber+0x138>
			break;
	case 16:
			adjustNum = BUTTON16;
    359c:	80 e2       	ldi	r24, 0x20	; 32
    359e:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	return adjustNum;
    35a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    35a2:	0f 90       	pop	r0
    35a4:	0f 90       	pop	r0
    35a6:	0f 90       	pop	r0
    35a8:	0f 90       	pop	r0
    35aa:	cf 91       	pop	r28
    35ac:	df 91       	pop	r29
    35ae:	08 95       	ret

000035b0 <LCD_sendCommand>:
#include "common_macros.h" /* To use the macros like SET_BIT */



void LCD_sendCommand(uint8 command)
{
    35b0:	0f 93       	push	r16
    35b2:	1f 93       	push	r17
    35b4:	df 93       	push	r29
    35b6:	cf 93       	push	r28
    35b8:	cd b7       	in	r28, 0x3d	; 61
    35ba:	de b7       	in	r29, 0x3e	; 62
    35bc:	c3 56       	subi	r28, 0x63	; 99
    35be:	d0 40       	sbci	r29, 0x00	; 0
    35c0:	0f b6       	in	r0, 0x3f	; 63
    35c2:	f8 94       	cli
    35c4:	de bf       	out	0x3e, r29	; 62
    35c6:	0f be       	out	0x3f, r0	; 63
    35c8:	cd bf       	out	0x3d, r28	; 61
    35ca:	fe 01       	movw	r30, r28
    35cc:	ed 59       	subi	r30, 0x9D	; 157
    35ce:	ff 4f       	sbci	r31, 0xFF	; 255
    35d0:	80 83       	st	Z, r24

	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);     /*write 0 in RS pin */
    35d2:	83 e0       	ldi	r24, 0x03	; 3
    35d4:	62 e0       	ldi	r22, 0x02	; 2
    35d6:	40 e0       	ldi	r20, 0x00	; 0
    35d8:	0e 94 01 17 	call	0x2e02	; 0x2e02 <GPIO_writePin>
    35dc:	fe 01       	movw	r30, r28
    35de:	e1 5a       	subi	r30, 0xA1	; 161
    35e0:	ff 4f       	sbci	r31, 0xFF	; 255
    35e2:	80 e0       	ldi	r24, 0x00	; 0
    35e4:	90 e0       	ldi	r25, 0x00	; 0
    35e6:	a0 e8       	ldi	r26, 0x80	; 128
    35e8:	bf e3       	ldi	r27, 0x3F	; 63
    35ea:	80 83       	st	Z, r24
    35ec:	91 83       	std	Z+1, r25	; 0x01
    35ee:	a2 83       	std	Z+2, r26	; 0x02
    35f0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35f2:	8e 01       	movw	r16, r28
    35f4:	05 5a       	subi	r16, 0xA5	; 165
    35f6:	1f 4f       	sbci	r17, 0xFF	; 255
    35f8:	fe 01       	movw	r30, r28
    35fa:	e1 5a       	subi	r30, 0xA1	; 161
    35fc:	ff 4f       	sbci	r31, 0xFF	; 255
    35fe:	60 81       	ld	r22, Z
    3600:	71 81       	ldd	r23, Z+1	; 0x01
    3602:	82 81       	ldd	r24, Z+2	; 0x02
    3604:	93 81       	ldd	r25, Z+3	; 0x03
    3606:	20 e0       	ldi	r18, 0x00	; 0
    3608:	30 e0       	ldi	r19, 0x00	; 0
    360a:	4a ef       	ldi	r20, 0xFA	; 250
    360c:	54 e4       	ldi	r21, 0x44	; 68
    360e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3612:	dc 01       	movw	r26, r24
    3614:	cb 01       	movw	r24, r22
    3616:	f8 01       	movw	r30, r16
    3618:	80 83       	st	Z, r24
    361a:	91 83       	std	Z+1, r25	; 0x01
    361c:	a2 83       	std	Z+2, r26	; 0x02
    361e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3620:	fe 01       	movw	r30, r28
    3622:	e5 5a       	subi	r30, 0xA5	; 165
    3624:	ff 4f       	sbci	r31, 0xFF	; 255
    3626:	60 81       	ld	r22, Z
    3628:	71 81       	ldd	r23, Z+1	; 0x01
    362a:	82 81       	ldd	r24, Z+2	; 0x02
    362c:	93 81       	ldd	r25, Z+3	; 0x03
    362e:	20 e0       	ldi	r18, 0x00	; 0
    3630:	30 e0       	ldi	r19, 0x00	; 0
    3632:	40 e8       	ldi	r20, 0x80	; 128
    3634:	5f e3       	ldi	r21, 0x3F	; 63
    3636:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    363a:	88 23       	and	r24, r24
    363c:	44 f4       	brge	.+16     	; 0x364e <LCD_sendCommand+0x9e>
		__ticks = 1;
    363e:	fe 01       	movw	r30, r28
    3640:	e7 5a       	subi	r30, 0xA7	; 167
    3642:	ff 4f       	sbci	r31, 0xFF	; 255
    3644:	81 e0       	ldi	r24, 0x01	; 1
    3646:	90 e0       	ldi	r25, 0x00	; 0
    3648:	91 83       	std	Z+1, r25	; 0x01
    364a:	80 83       	st	Z, r24
    364c:	64 c0       	rjmp	.+200    	; 0x3716 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    364e:	fe 01       	movw	r30, r28
    3650:	e5 5a       	subi	r30, 0xA5	; 165
    3652:	ff 4f       	sbci	r31, 0xFF	; 255
    3654:	60 81       	ld	r22, Z
    3656:	71 81       	ldd	r23, Z+1	; 0x01
    3658:	82 81       	ldd	r24, Z+2	; 0x02
    365a:	93 81       	ldd	r25, Z+3	; 0x03
    365c:	20 e0       	ldi	r18, 0x00	; 0
    365e:	3f ef       	ldi	r19, 0xFF	; 255
    3660:	4f e7       	ldi	r20, 0x7F	; 127
    3662:	57 e4       	ldi	r21, 0x47	; 71
    3664:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3668:	18 16       	cp	r1, r24
    366a:	0c f0       	brlt	.+2      	; 0x366e <LCD_sendCommand+0xbe>
    366c:	43 c0       	rjmp	.+134    	; 0x36f4 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    366e:	fe 01       	movw	r30, r28
    3670:	e1 5a       	subi	r30, 0xA1	; 161
    3672:	ff 4f       	sbci	r31, 0xFF	; 255
    3674:	60 81       	ld	r22, Z
    3676:	71 81       	ldd	r23, Z+1	; 0x01
    3678:	82 81       	ldd	r24, Z+2	; 0x02
    367a:	93 81       	ldd	r25, Z+3	; 0x03
    367c:	20 e0       	ldi	r18, 0x00	; 0
    367e:	30 e0       	ldi	r19, 0x00	; 0
    3680:	40 e2       	ldi	r20, 0x20	; 32
    3682:	51 e4       	ldi	r21, 0x41	; 65
    3684:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3688:	dc 01       	movw	r26, r24
    368a:	cb 01       	movw	r24, r22
    368c:	8e 01       	movw	r16, r28
    368e:	07 5a       	subi	r16, 0xA7	; 167
    3690:	1f 4f       	sbci	r17, 0xFF	; 255
    3692:	bc 01       	movw	r22, r24
    3694:	cd 01       	movw	r24, r26
    3696:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    369a:	dc 01       	movw	r26, r24
    369c:	cb 01       	movw	r24, r22
    369e:	f8 01       	movw	r30, r16
    36a0:	91 83       	std	Z+1, r25	; 0x01
    36a2:	80 83       	st	Z, r24
    36a4:	1f c0       	rjmp	.+62     	; 0x36e4 <LCD_sendCommand+0x134>
    36a6:	fe 01       	movw	r30, r28
    36a8:	e9 5a       	subi	r30, 0xA9	; 169
    36aa:	ff 4f       	sbci	r31, 0xFF	; 255
    36ac:	88 ec       	ldi	r24, 0xC8	; 200
    36ae:	90 e0       	ldi	r25, 0x00	; 0
    36b0:	91 83       	std	Z+1, r25	; 0x01
    36b2:	80 83       	st	Z, r24
    36b4:	fe 01       	movw	r30, r28
    36b6:	e9 5a       	subi	r30, 0xA9	; 169
    36b8:	ff 4f       	sbci	r31, 0xFF	; 255
    36ba:	80 81       	ld	r24, Z
    36bc:	91 81       	ldd	r25, Z+1	; 0x01
    36be:	01 97       	sbiw	r24, 0x01	; 1
    36c0:	f1 f7       	brne	.-4      	; 0x36be <LCD_sendCommand+0x10e>
    36c2:	fe 01       	movw	r30, r28
    36c4:	e9 5a       	subi	r30, 0xA9	; 169
    36c6:	ff 4f       	sbci	r31, 0xFF	; 255
    36c8:	91 83       	std	Z+1, r25	; 0x01
    36ca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36cc:	de 01       	movw	r26, r28
    36ce:	a7 5a       	subi	r26, 0xA7	; 167
    36d0:	bf 4f       	sbci	r27, 0xFF	; 255
    36d2:	fe 01       	movw	r30, r28
    36d4:	e7 5a       	subi	r30, 0xA7	; 167
    36d6:	ff 4f       	sbci	r31, 0xFF	; 255
    36d8:	80 81       	ld	r24, Z
    36da:	91 81       	ldd	r25, Z+1	; 0x01
    36dc:	01 97       	sbiw	r24, 0x01	; 1
    36de:	11 96       	adiw	r26, 0x01	; 1
    36e0:	9c 93       	st	X, r25
    36e2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36e4:	fe 01       	movw	r30, r28
    36e6:	e7 5a       	subi	r30, 0xA7	; 167
    36e8:	ff 4f       	sbci	r31, 0xFF	; 255
    36ea:	80 81       	ld	r24, Z
    36ec:	91 81       	ldd	r25, Z+1	; 0x01
    36ee:	00 97       	sbiw	r24, 0x00	; 0
    36f0:	d1 f6       	brne	.-76     	; 0x36a6 <LCD_sendCommand+0xf6>
    36f2:	27 c0       	rjmp	.+78     	; 0x3742 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36f4:	8e 01       	movw	r16, r28
    36f6:	07 5a       	subi	r16, 0xA7	; 167
    36f8:	1f 4f       	sbci	r17, 0xFF	; 255
    36fa:	fe 01       	movw	r30, r28
    36fc:	e5 5a       	subi	r30, 0xA5	; 165
    36fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3700:	60 81       	ld	r22, Z
    3702:	71 81       	ldd	r23, Z+1	; 0x01
    3704:	82 81       	ldd	r24, Z+2	; 0x02
    3706:	93 81       	ldd	r25, Z+3	; 0x03
    3708:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    370c:	dc 01       	movw	r26, r24
    370e:	cb 01       	movw	r24, r22
    3710:	f8 01       	movw	r30, r16
    3712:	91 83       	std	Z+1, r25	; 0x01
    3714:	80 83       	st	Z, r24
    3716:	de 01       	movw	r26, r28
    3718:	ab 5a       	subi	r26, 0xAB	; 171
    371a:	bf 4f       	sbci	r27, 0xFF	; 255
    371c:	fe 01       	movw	r30, r28
    371e:	e7 5a       	subi	r30, 0xA7	; 167
    3720:	ff 4f       	sbci	r31, 0xFF	; 255
    3722:	80 81       	ld	r24, Z
    3724:	91 81       	ldd	r25, Z+1	; 0x01
    3726:	8d 93       	st	X+, r24
    3728:	9c 93       	st	X, r25
    372a:	fe 01       	movw	r30, r28
    372c:	eb 5a       	subi	r30, 0xAB	; 171
    372e:	ff 4f       	sbci	r31, 0xFF	; 255
    3730:	80 81       	ld	r24, Z
    3732:	91 81       	ldd	r25, Z+1	; 0x01
    3734:	01 97       	sbiw	r24, 0x01	; 1
    3736:	f1 f7       	brne	.-4      	; 0x3734 <LCD_sendCommand+0x184>
    3738:	fe 01       	movw	r30, r28
    373a:	eb 5a       	subi	r30, 0xAB	; 171
    373c:	ff 4f       	sbci	r31, 0xFF	; 255
    373e:	91 83       	std	Z+1, r25	; 0x01
    3740:	80 83       	st	Z, r24
	_delay_ms(1);

	GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, LOGIC_HIGH);   /*write 1 in enable pin */
    3742:	83 e0       	ldi	r24, 0x03	; 3
    3744:	63 e0       	ldi	r22, 0x03	; 3
    3746:	41 e0       	ldi	r20, 0x01	; 1
    3748:	0e 94 01 17 	call	0x2e02	; 0x2e02 <GPIO_writePin>
    374c:	fe 01       	movw	r30, r28
    374e:	ef 5a       	subi	r30, 0xAF	; 175
    3750:	ff 4f       	sbci	r31, 0xFF	; 255
    3752:	80 e0       	ldi	r24, 0x00	; 0
    3754:	90 e0       	ldi	r25, 0x00	; 0
    3756:	a0 e8       	ldi	r26, 0x80	; 128
    3758:	bf e3       	ldi	r27, 0x3F	; 63
    375a:	80 83       	st	Z, r24
    375c:	91 83       	std	Z+1, r25	; 0x01
    375e:	a2 83       	std	Z+2, r26	; 0x02
    3760:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3762:	8e 01       	movw	r16, r28
    3764:	03 5b       	subi	r16, 0xB3	; 179
    3766:	1f 4f       	sbci	r17, 0xFF	; 255
    3768:	fe 01       	movw	r30, r28
    376a:	ef 5a       	subi	r30, 0xAF	; 175
    376c:	ff 4f       	sbci	r31, 0xFF	; 255
    376e:	60 81       	ld	r22, Z
    3770:	71 81       	ldd	r23, Z+1	; 0x01
    3772:	82 81       	ldd	r24, Z+2	; 0x02
    3774:	93 81       	ldd	r25, Z+3	; 0x03
    3776:	20 e0       	ldi	r18, 0x00	; 0
    3778:	30 e0       	ldi	r19, 0x00	; 0
    377a:	4a ef       	ldi	r20, 0xFA	; 250
    377c:	54 e4       	ldi	r21, 0x44	; 68
    377e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3782:	dc 01       	movw	r26, r24
    3784:	cb 01       	movw	r24, r22
    3786:	f8 01       	movw	r30, r16
    3788:	80 83       	st	Z, r24
    378a:	91 83       	std	Z+1, r25	; 0x01
    378c:	a2 83       	std	Z+2, r26	; 0x02
    378e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3790:	fe 01       	movw	r30, r28
    3792:	e3 5b       	subi	r30, 0xB3	; 179
    3794:	ff 4f       	sbci	r31, 0xFF	; 255
    3796:	60 81       	ld	r22, Z
    3798:	71 81       	ldd	r23, Z+1	; 0x01
    379a:	82 81       	ldd	r24, Z+2	; 0x02
    379c:	93 81       	ldd	r25, Z+3	; 0x03
    379e:	20 e0       	ldi	r18, 0x00	; 0
    37a0:	30 e0       	ldi	r19, 0x00	; 0
    37a2:	40 e8       	ldi	r20, 0x80	; 128
    37a4:	5f e3       	ldi	r21, 0x3F	; 63
    37a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    37aa:	88 23       	and	r24, r24
    37ac:	44 f4       	brge	.+16     	; 0x37be <LCD_sendCommand+0x20e>
		__ticks = 1;
    37ae:	fe 01       	movw	r30, r28
    37b0:	e5 5b       	subi	r30, 0xB5	; 181
    37b2:	ff 4f       	sbci	r31, 0xFF	; 255
    37b4:	81 e0       	ldi	r24, 0x01	; 1
    37b6:	90 e0       	ldi	r25, 0x00	; 0
    37b8:	91 83       	std	Z+1, r25	; 0x01
    37ba:	80 83       	st	Z, r24
    37bc:	64 c0       	rjmp	.+200    	; 0x3886 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    37be:	fe 01       	movw	r30, r28
    37c0:	e3 5b       	subi	r30, 0xB3	; 179
    37c2:	ff 4f       	sbci	r31, 0xFF	; 255
    37c4:	60 81       	ld	r22, Z
    37c6:	71 81       	ldd	r23, Z+1	; 0x01
    37c8:	82 81       	ldd	r24, Z+2	; 0x02
    37ca:	93 81       	ldd	r25, Z+3	; 0x03
    37cc:	20 e0       	ldi	r18, 0x00	; 0
    37ce:	3f ef       	ldi	r19, 0xFF	; 255
    37d0:	4f e7       	ldi	r20, 0x7F	; 127
    37d2:	57 e4       	ldi	r21, 0x47	; 71
    37d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    37d8:	18 16       	cp	r1, r24
    37da:	0c f0       	brlt	.+2      	; 0x37de <LCD_sendCommand+0x22e>
    37dc:	43 c0       	rjmp	.+134    	; 0x3864 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37de:	fe 01       	movw	r30, r28
    37e0:	ef 5a       	subi	r30, 0xAF	; 175
    37e2:	ff 4f       	sbci	r31, 0xFF	; 255
    37e4:	60 81       	ld	r22, Z
    37e6:	71 81       	ldd	r23, Z+1	; 0x01
    37e8:	82 81       	ldd	r24, Z+2	; 0x02
    37ea:	93 81       	ldd	r25, Z+3	; 0x03
    37ec:	20 e0       	ldi	r18, 0x00	; 0
    37ee:	30 e0       	ldi	r19, 0x00	; 0
    37f0:	40 e2       	ldi	r20, 0x20	; 32
    37f2:	51 e4       	ldi	r21, 0x41	; 65
    37f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37f8:	dc 01       	movw	r26, r24
    37fa:	cb 01       	movw	r24, r22
    37fc:	8e 01       	movw	r16, r28
    37fe:	05 5b       	subi	r16, 0xB5	; 181
    3800:	1f 4f       	sbci	r17, 0xFF	; 255
    3802:	bc 01       	movw	r22, r24
    3804:	cd 01       	movw	r24, r26
    3806:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    380a:	dc 01       	movw	r26, r24
    380c:	cb 01       	movw	r24, r22
    380e:	f8 01       	movw	r30, r16
    3810:	91 83       	std	Z+1, r25	; 0x01
    3812:	80 83       	st	Z, r24
    3814:	1f c0       	rjmp	.+62     	; 0x3854 <LCD_sendCommand+0x2a4>
    3816:	fe 01       	movw	r30, r28
    3818:	e7 5b       	subi	r30, 0xB7	; 183
    381a:	ff 4f       	sbci	r31, 0xFF	; 255
    381c:	88 ec       	ldi	r24, 0xC8	; 200
    381e:	90 e0       	ldi	r25, 0x00	; 0
    3820:	91 83       	std	Z+1, r25	; 0x01
    3822:	80 83       	st	Z, r24
    3824:	fe 01       	movw	r30, r28
    3826:	e7 5b       	subi	r30, 0xB7	; 183
    3828:	ff 4f       	sbci	r31, 0xFF	; 255
    382a:	80 81       	ld	r24, Z
    382c:	91 81       	ldd	r25, Z+1	; 0x01
    382e:	01 97       	sbiw	r24, 0x01	; 1
    3830:	f1 f7       	brne	.-4      	; 0x382e <LCD_sendCommand+0x27e>
    3832:	fe 01       	movw	r30, r28
    3834:	e7 5b       	subi	r30, 0xB7	; 183
    3836:	ff 4f       	sbci	r31, 0xFF	; 255
    3838:	91 83       	std	Z+1, r25	; 0x01
    383a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    383c:	de 01       	movw	r26, r28
    383e:	a5 5b       	subi	r26, 0xB5	; 181
    3840:	bf 4f       	sbci	r27, 0xFF	; 255
    3842:	fe 01       	movw	r30, r28
    3844:	e5 5b       	subi	r30, 0xB5	; 181
    3846:	ff 4f       	sbci	r31, 0xFF	; 255
    3848:	80 81       	ld	r24, Z
    384a:	91 81       	ldd	r25, Z+1	; 0x01
    384c:	01 97       	sbiw	r24, 0x01	; 1
    384e:	11 96       	adiw	r26, 0x01	; 1
    3850:	9c 93       	st	X, r25
    3852:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3854:	fe 01       	movw	r30, r28
    3856:	e5 5b       	subi	r30, 0xB5	; 181
    3858:	ff 4f       	sbci	r31, 0xFF	; 255
    385a:	80 81       	ld	r24, Z
    385c:	91 81       	ldd	r25, Z+1	; 0x01
    385e:	00 97       	sbiw	r24, 0x00	; 0
    3860:	d1 f6       	brne	.-76     	; 0x3816 <LCD_sendCommand+0x266>
    3862:	27 c0       	rjmp	.+78     	; 0x38b2 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3864:	8e 01       	movw	r16, r28
    3866:	05 5b       	subi	r16, 0xB5	; 181
    3868:	1f 4f       	sbci	r17, 0xFF	; 255
    386a:	fe 01       	movw	r30, r28
    386c:	e3 5b       	subi	r30, 0xB3	; 179
    386e:	ff 4f       	sbci	r31, 0xFF	; 255
    3870:	60 81       	ld	r22, Z
    3872:	71 81       	ldd	r23, Z+1	; 0x01
    3874:	82 81       	ldd	r24, Z+2	; 0x02
    3876:	93 81       	ldd	r25, Z+3	; 0x03
    3878:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    387c:	dc 01       	movw	r26, r24
    387e:	cb 01       	movw	r24, r22
    3880:	f8 01       	movw	r30, r16
    3882:	91 83       	std	Z+1, r25	; 0x01
    3884:	80 83       	st	Z, r24
    3886:	de 01       	movw	r26, r28
    3888:	a9 5b       	subi	r26, 0xB9	; 185
    388a:	bf 4f       	sbci	r27, 0xFF	; 255
    388c:	fe 01       	movw	r30, r28
    388e:	e5 5b       	subi	r30, 0xB5	; 181
    3890:	ff 4f       	sbci	r31, 0xFF	; 255
    3892:	80 81       	ld	r24, Z
    3894:	91 81       	ldd	r25, Z+1	; 0x01
    3896:	8d 93       	st	X+, r24
    3898:	9c 93       	st	X, r25
    389a:	fe 01       	movw	r30, r28
    389c:	e9 5b       	subi	r30, 0xB9	; 185
    389e:	ff 4f       	sbci	r31, 0xFF	; 255
    38a0:	80 81       	ld	r24, Z
    38a2:	91 81       	ldd	r25, Z+1	; 0x01
    38a4:	01 97       	sbiw	r24, 0x01	; 1
    38a6:	f1 f7       	brne	.-4      	; 0x38a4 <LCD_sendCommand+0x2f4>
    38a8:	fe 01       	movw	r30, r28
    38aa:	e9 5b       	subi	r30, 0xB9	; 185
    38ac:	ff 4f       	sbci	r31, 0xFF	; 255
    38ae:	91 83       	std	Z+1, r25	; 0x01
    38b0:	80 83       	st	Z, r24

	_delay_ms(1);

#else

	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN4 , GET_BIT(command,4) );
    38b2:	fe 01       	movw	r30, r28
    38b4:	ed 59       	subi	r30, 0x9D	; 157
    38b6:	ff 4f       	sbci	r31, 0xFF	; 255
    38b8:	80 81       	ld	r24, Z
    38ba:	88 2f       	mov	r24, r24
    38bc:	90 e0       	ldi	r25, 0x00	; 0
    38be:	80 71       	andi	r24, 0x10	; 16
    38c0:	90 70       	andi	r25, 0x00	; 0
    38c2:	95 95       	asr	r25
    38c4:	87 95       	ror	r24
    38c6:	95 95       	asr	r25
    38c8:	87 95       	ror	r24
    38ca:	95 95       	asr	r25
    38cc:	87 95       	ror	r24
    38ce:	95 95       	asr	r25
    38d0:	87 95       	ror	r24
    38d2:	98 2f       	mov	r25, r24
    38d4:	82 e0       	ldi	r24, 0x02	; 2
    38d6:	64 e0       	ldi	r22, 0x04	; 4
    38d8:	49 2f       	mov	r20, r25
    38da:	0e 94 01 17 	call	0x2e02	; 0x2e02 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN5 , GET_BIT(command,5) );
    38de:	fe 01       	movw	r30, r28
    38e0:	ed 59       	subi	r30, 0x9D	; 157
    38e2:	ff 4f       	sbci	r31, 0xFF	; 255
    38e4:	80 81       	ld	r24, Z
    38e6:	88 2f       	mov	r24, r24
    38e8:	90 e0       	ldi	r25, 0x00	; 0
    38ea:	80 72       	andi	r24, 0x20	; 32
    38ec:	90 70       	andi	r25, 0x00	; 0
    38ee:	95 95       	asr	r25
    38f0:	87 95       	ror	r24
    38f2:	95 95       	asr	r25
    38f4:	87 95       	ror	r24
    38f6:	95 95       	asr	r25
    38f8:	87 95       	ror	r24
    38fa:	95 95       	asr	r25
    38fc:	87 95       	ror	r24
    38fe:	95 95       	asr	r25
    3900:	87 95       	ror	r24
    3902:	98 2f       	mov	r25, r24
    3904:	82 e0       	ldi	r24, 0x02	; 2
    3906:	65 e0       	ldi	r22, 0x05	; 5
    3908:	49 2f       	mov	r20, r25
    390a:	0e 94 01 17 	call	0x2e02	; 0x2e02 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN6 , GET_BIT(command,6) );
    390e:	fe 01       	movw	r30, r28
    3910:	ed 59       	subi	r30, 0x9D	; 157
    3912:	ff 4f       	sbci	r31, 0xFF	; 255
    3914:	80 81       	ld	r24, Z
    3916:	88 2f       	mov	r24, r24
    3918:	90 e0       	ldi	r25, 0x00	; 0
    391a:	80 74       	andi	r24, 0x40	; 64
    391c:	90 70       	andi	r25, 0x00	; 0
    391e:	08 2e       	mov	r0, r24
    3920:	89 2f       	mov	r24, r25
    3922:	00 0c       	add	r0, r0
    3924:	88 1f       	adc	r24, r24
    3926:	99 0b       	sbc	r25, r25
    3928:	00 0c       	add	r0, r0
    392a:	88 1f       	adc	r24, r24
    392c:	99 1f       	adc	r25, r25
    392e:	98 2f       	mov	r25, r24
    3930:	82 e0       	ldi	r24, 0x02	; 2
    3932:	66 e0       	ldi	r22, 0x06	; 6
    3934:	49 2f       	mov	r20, r25
    3936:	0e 94 01 17 	call	0x2e02	; 0x2e02 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN7 , GET_BIT(command,7) );
    393a:	fe 01       	movw	r30, r28
    393c:	ed 59       	subi	r30, 0x9D	; 157
    393e:	ff 4f       	sbci	r31, 0xFF	; 255
    3940:	80 81       	ld	r24, Z
    3942:	98 2f       	mov	r25, r24
    3944:	99 1f       	adc	r25, r25
    3946:	99 27       	eor	r25, r25
    3948:	99 1f       	adc	r25, r25
    394a:	82 e0       	ldi	r24, 0x02	; 2
    394c:	67 e0       	ldi	r22, 0x07	; 7
    394e:	49 2f       	mov	r20, r25
    3950:	0e 94 01 17 	call	0x2e02	; 0x2e02 <GPIO_writePin>
    3954:	fe 01       	movw	r30, r28
    3956:	ed 5b       	subi	r30, 0xBD	; 189
    3958:	ff 4f       	sbci	r31, 0xFF	; 255
    395a:	80 e0       	ldi	r24, 0x00	; 0
    395c:	90 e0       	ldi	r25, 0x00	; 0
    395e:	a0 e8       	ldi	r26, 0x80	; 128
    3960:	bf e3       	ldi	r27, 0x3F	; 63
    3962:	80 83       	st	Z, r24
    3964:	91 83       	std	Z+1, r25	; 0x01
    3966:	a2 83       	std	Z+2, r26	; 0x02
    3968:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    396a:	8e 01       	movw	r16, r28
    396c:	01 5c       	subi	r16, 0xC1	; 193
    396e:	1f 4f       	sbci	r17, 0xFF	; 255
    3970:	fe 01       	movw	r30, r28
    3972:	ed 5b       	subi	r30, 0xBD	; 189
    3974:	ff 4f       	sbci	r31, 0xFF	; 255
    3976:	60 81       	ld	r22, Z
    3978:	71 81       	ldd	r23, Z+1	; 0x01
    397a:	82 81       	ldd	r24, Z+2	; 0x02
    397c:	93 81       	ldd	r25, Z+3	; 0x03
    397e:	20 e0       	ldi	r18, 0x00	; 0
    3980:	30 e0       	ldi	r19, 0x00	; 0
    3982:	4a ef       	ldi	r20, 0xFA	; 250
    3984:	54 e4       	ldi	r21, 0x44	; 68
    3986:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    398a:	dc 01       	movw	r26, r24
    398c:	cb 01       	movw	r24, r22
    398e:	f8 01       	movw	r30, r16
    3990:	80 83       	st	Z, r24
    3992:	91 83       	std	Z+1, r25	; 0x01
    3994:	a2 83       	std	Z+2, r26	; 0x02
    3996:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3998:	fe 01       	movw	r30, r28
    399a:	ff 96       	adiw	r30, 0x3f	; 63
    399c:	60 81       	ld	r22, Z
    399e:	71 81       	ldd	r23, Z+1	; 0x01
    39a0:	82 81       	ldd	r24, Z+2	; 0x02
    39a2:	93 81       	ldd	r25, Z+3	; 0x03
    39a4:	20 e0       	ldi	r18, 0x00	; 0
    39a6:	30 e0       	ldi	r19, 0x00	; 0
    39a8:	40 e8       	ldi	r20, 0x80	; 128
    39aa:	5f e3       	ldi	r21, 0x3F	; 63
    39ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    39b0:	88 23       	and	r24, r24
    39b2:	2c f4       	brge	.+10     	; 0x39be <LCD_sendCommand+0x40e>
		__ticks = 1;
    39b4:	81 e0       	ldi	r24, 0x01	; 1
    39b6:	90 e0       	ldi	r25, 0x00	; 0
    39b8:	9e af       	std	Y+62, r25	; 0x3e
    39ba:	8d af       	std	Y+61, r24	; 0x3d
    39bc:	46 c0       	rjmp	.+140    	; 0x3a4a <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    39be:	fe 01       	movw	r30, r28
    39c0:	ff 96       	adiw	r30, 0x3f	; 63
    39c2:	60 81       	ld	r22, Z
    39c4:	71 81       	ldd	r23, Z+1	; 0x01
    39c6:	82 81       	ldd	r24, Z+2	; 0x02
    39c8:	93 81       	ldd	r25, Z+3	; 0x03
    39ca:	20 e0       	ldi	r18, 0x00	; 0
    39cc:	3f ef       	ldi	r19, 0xFF	; 255
    39ce:	4f e7       	ldi	r20, 0x7F	; 127
    39d0:	57 e4       	ldi	r21, 0x47	; 71
    39d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    39d6:	18 16       	cp	r1, r24
    39d8:	64 f5       	brge	.+88     	; 0x3a32 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39da:	fe 01       	movw	r30, r28
    39dc:	ed 5b       	subi	r30, 0xBD	; 189
    39de:	ff 4f       	sbci	r31, 0xFF	; 255
    39e0:	60 81       	ld	r22, Z
    39e2:	71 81       	ldd	r23, Z+1	; 0x01
    39e4:	82 81       	ldd	r24, Z+2	; 0x02
    39e6:	93 81       	ldd	r25, Z+3	; 0x03
    39e8:	20 e0       	ldi	r18, 0x00	; 0
    39ea:	30 e0       	ldi	r19, 0x00	; 0
    39ec:	40 e2       	ldi	r20, 0x20	; 32
    39ee:	51 e4       	ldi	r21, 0x41	; 65
    39f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39f4:	dc 01       	movw	r26, r24
    39f6:	cb 01       	movw	r24, r22
    39f8:	bc 01       	movw	r22, r24
    39fa:	cd 01       	movw	r24, r26
    39fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a00:	dc 01       	movw	r26, r24
    3a02:	cb 01       	movw	r24, r22
    3a04:	9e af       	std	Y+62, r25	; 0x3e
    3a06:	8d af       	std	Y+61, r24	; 0x3d
    3a08:	0f c0       	rjmp	.+30     	; 0x3a28 <LCD_sendCommand+0x478>
    3a0a:	88 ec       	ldi	r24, 0xC8	; 200
    3a0c:	90 e0       	ldi	r25, 0x00	; 0
    3a0e:	9c af       	std	Y+60, r25	; 0x3c
    3a10:	8b af       	std	Y+59, r24	; 0x3b
    3a12:	8b ad       	ldd	r24, Y+59	; 0x3b
    3a14:	9c ad       	ldd	r25, Y+60	; 0x3c
    3a16:	01 97       	sbiw	r24, 0x01	; 1
    3a18:	f1 f7       	brne	.-4      	; 0x3a16 <LCD_sendCommand+0x466>
    3a1a:	9c af       	std	Y+60, r25	; 0x3c
    3a1c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a1e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3a20:	9e ad       	ldd	r25, Y+62	; 0x3e
    3a22:	01 97       	sbiw	r24, 0x01	; 1
    3a24:	9e af       	std	Y+62, r25	; 0x3e
    3a26:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a28:	8d ad       	ldd	r24, Y+61	; 0x3d
    3a2a:	9e ad       	ldd	r25, Y+62	; 0x3e
    3a2c:	00 97       	sbiw	r24, 0x00	; 0
    3a2e:	69 f7       	brne	.-38     	; 0x3a0a <LCD_sendCommand+0x45a>
    3a30:	16 c0       	rjmp	.+44     	; 0x3a5e <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a32:	fe 01       	movw	r30, r28
    3a34:	ff 96       	adiw	r30, 0x3f	; 63
    3a36:	60 81       	ld	r22, Z
    3a38:	71 81       	ldd	r23, Z+1	; 0x01
    3a3a:	82 81       	ldd	r24, Z+2	; 0x02
    3a3c:	93 81       	ldd	r25, Z+3	; 0x03
    3a3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a42:	dc 01       	movw	r26, r24
    3a44:	cb 01       	movw	r24, r22
    3a46:	9e af       	std	Y+62, r25	; 0x3e
    3a48:	8d af       	std	Y+61, r24	; 0x3d
    3a4a:	8d ad       	ldd	r24, Y+61	; 0x3d
    3a4c:	9e ad       	ldd	r25, Y+62	; 0x3e
    3a4e:	9a af       	std	Y+58, r25	; 0x3a
    3a50:	89 af       	std	Y+57, r24	; 0x39
    3a52:	89 ad       	ldd	r24, Y+57	; 0x39
    3a54:	9a ad       	ldd	r25, Y+58	; 0x3a
    3a56:	01 97       	sbiw	r24, 0x01	; 1
    3a58:	f1 f7       	brne	.-4      	; 0x3a56 <LCD_sendCommand+0x4a6>
    3a5a:	9a af       	std	Y+58, r25	; 0x3a
    3a5c:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1);
	GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, LOGIC_LOW); /*write 0 in enable pin to make falling edge*/
    3a5e:	83 e0       	ldi	r24, 0x03	; 3
    3a60:	63 e0       	ldi	r22, 0x03	; 3
    3a62:	40 e0       	ldi	r20, 0x00	; 0
    3a64:	0e 94 01 17 	call	0x2e02	; 0x2e02 <GPIO_writePin>
    3a68:	80 e0       	ldi	r24, 0x00	; 0
    3a6a:	90 e0       	ldi	r25, 0x00	; 0
    3a6c:	a0 e8       	ldi	r26, 0x80	; 128
    3a6e:	bf e3       	ldi	r27, 0x3F	; 63
    3a70:	8d ab       	std	Y+53, r24	; 0x35
    3a72:	9e ab       	std	Y+54, r25	; 0x36
    3a74:	af ab       	std	Y+55, r26	; 0x37
    3a76:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a78:	6d a9       	ldd	r22, Y+53	; 0x35
    3a7a:	7e a9       	ldd	r23, Y+54	; 0x36
    3a7c:	8f a9       	ldd	r24, Y+55	; 0x37
    3a7e:	98 ad       	ldd	r25, Y+56	; 0x38
    3a80:	20 e0       	ldi	r18, 0x00	; 0
    3a82:	30 e0       	ldi	r19, 0x00	; 0
    3a84:	4a ef       	ldi	r20, 0xFA	; 250
    3a86:	54 e4       	ldi	r21, 0x44	; 68
    3a88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a8c:	dc 01       	movw	r26, r24
    3a8e:	cb 01       	movw	r24, r22
    3a90:	89 ab       	std	Y+49, r24	; 0x31
    3a92:	9a ab       	std	Y+50, r25	; 0x32
    3a94:	ab ab       	std	Y+51, r26	; 0x33
    3a96:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3a98:	69 a9       	ldd	r22, Y+49	; 0x31
    3a9a:	7a a9       	ldd	r23, Y+50	; 0x32
    3a9c:	8b a9       	ldd	r24, Y+51	; 0x33
    3a9e:	9c a9       	ldd	r25, Y+52	; 0x34
    3aa0:	20 e0       	ldi	r18, 0x00	; 0
    3aa2:	30 e0       	ldi	r19, 0x00	; 0
    3aa4:	40 e8       	ldi	r20, 0x80	; 128
    3aa6:	5f e3       	ldi	r21, 0x3F	; 63
    3aa8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3aac:	88 23       	and	r24, r24
    3aae:	2c f4       	brge	.+10     	; 0x3aba <LCD_sendCommand+0x50a>
		__ticks = 1;
    3ab0:	81 e0       	ldi	r24, 0x01	; 1
    3ab2:	90 e0       	ldi	r25, 0x00	; 0
    3ab4:	98 ab       	std	Y+48, r25	; 0x30
    3ab6:	8f a7       	std	Y+47, r24	; 0x2f
    3ab8:	3f c0       	rjmp	.+126    	; 0x3b38 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    3aba:	69 a9       	ldd	r22, Y+49	; 0x31
    3abc:	7a a9       	ldd	r23, Y+50	; 0x32
    3abe:	8b a9       	ldd	r24, Y+51	; 0x33
    3ac0:	9c a9       	ldd	r25, Y+52	; 0x34
    3ac2:	20 e0       	ldi	r18, 0x00	; 0
    3ac4:	3f ef       	ldi	r19, 0xFF	; 255
    3ac6:	4f e7       	ldi	r20, 0x7F	; 127
    3ac8:	57 e4       	ldi	r21, 0x47	; 71
    3aca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3ace:	18 16       	cp	r1, r24
    3ad0:	4c f5       	brge	.+82     	; 0x3b24 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ad2:	6d a9       	ldd	r22, Y+53	; 0x35
    3ad4:	7e a9       	ldd	r23, Y+54	; 0x36
    3ad6:	8f a9       	ldd	r24, Y+55	; 0x37
    3ad8:	98 ad       	ldd	r25, Y+56	; 0x38
    3ada:	20 e0       	ldi	r18, 0x00	; 0
    3adc:	30 e0       	ldi	r19, 0x00	; 0
    3ade:	40 e2       	ldi	r20, 0x20	; 32
    3ae0:	51 e4       	ldi	r21, 0x41	; 65
    3ae2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ae6:	dc 01       	movw	r26, r24
    3ae8:	cb 01       	movw	r24, r22
    3aea:	bc 01       	movw	r22, r24
    3aec:	cd 01       	movw	r24, r26
    3aee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3af2:	dc 01       	movw	r26, r24
    3af4:	cb 01       	movw	r24, r22
    3af6:	98 ab       	std	Y+48, r25	; 0x30
    3af8:	8f a7       	std	Y+47, r24	; 0x2f
    3afa:	0f c0       	rjmp	.+30     	; 0x3b1a <LCD_sendCommand+0x56a>
    3afc:	88 ec       	ldi	r24, 0xC8	; 200
    3afe:	90 e0       	ldi	r25, 0x00	; 0
    3b00:	9e a7       	std	Y+46, r25	; 0x2e
    3b02:	8d a7       	std	Y+45, r24	; 0x2d
    3b04:	8d a5       	ldd	r24, Y+45	; 0x2d
    3b06:	9e a5       	ldd	r25, Y+46	; 0x2e
    3b08:	01 97       	sbiw	r24, 0x01	; 1
    3b0a:	f1 f7       	brne	.-4      	; 0x3b08 <LCD_sendCommand+0x558>
    3b0c:	9e a7       	std	Y+46, r25	; 0x2e
    3b0e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b10:	8f a5       	ldd	r24, Y+47	; 0x2f
    3b12:	98 a9       	ldd	r25, Y+48	; 0x30
    3b14:	01 97       	sbiw	r24, 0x01	; 1
    3b16:	98 ab       	std	Y+48, r25	; 0x30
    3b18:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b1a:	8f a5       	ldd	r24, Y+47	; 0x2f
    3b1c:	98 a9       	ldd	r25, Y+48	; 0x30
    3b1e:	00 97       	sbiw	r24, 0x00	; 0
    3b20:	69 f7       	brne	.-38     	; 0x3afc <LCD_sendCommand+0x54c>
    3b22:	14 c0       	rjmp	.+40     	; 0x3b4c <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b24:	69 a9       	ldd	r22, Y+49	; 0x31
    3b26:	7a a9       	ldd	r23, Y+50	; 0x32
    3b28:	8b a9       	ldd	r24, Y+51	; 0x33
    3b2a:	9c a9       	ldd	r25, Y+52	; 0x34
    3b2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b30:	dc 01       	movw	r26, r24
    3b32:	cb 01       	movw	r24, r22
    3b34:	98 ab       	std	Y+48, r25	; 0x30
    3b36:	8f a7       	std	Y+47, r24	; 0x2f
    3b38:	8f a5       	ldd	r24, Y+47	; 0x2f
    3b3a:	98 a9       	ldd	r25, Y+48	; 0x30
    3b3c:	9c a7       	std	Y+44, r25	; 0x2c
    3b3e:	8b a7       	std	Y+43, r24	; 0x2b
    3b40:	8b a5       	ldd	r24, Y+43	; 0x2b
    3b42:	9c a5       	ldd	r25, Y+44	; 0x2c
    3b44:	01 97       	sbiw	r24, 0x01	; 1
    3b46:	f1 f7       	brne	.-4      	; 0x3b44 <LCD_sendCommand+0x594>
    3b48:	9c a7       	std	Y+44, r25	; 0x2c
    3b4a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, LOGIC_HIGH); /*write 1 in enable pin */
    3b4c:	83 e0       	ldi	r24, 0x03	; 3
    3b4e:	63 e0       	ldi	r22, 0x03	; 3
    3b50:	41 e0       	ldi	r20, 0x01	; 1
    3b52:	0e 94 01 17 	call	0x2e02	; 0x2e02 <GPIO_writePin>
    3b56:	80 e0       	ldi	r24, 0x00	; 0
    3b58:	90 e0       	ldi	r25, 0x00	; 0
    3b5a:	a0 e8       	ldi	r26, 0x80	; 128
    3b5c:	bf e3       	ldi	r27, 0x3F	; 63
    3b5e:	8f a3       	std	Y+39, r24	; 0x27
    3b60:	98 a7       	std	Y+40, r25	; 0x28
    3b62:	a9 a7       	std	Y+41, r26	; 0x29
    3b64:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b66:	6f a1       	ldd	r22, Y+39	; 0x27
    3b68:	78 a5       	ldd	r23, Y+40	; 0x28
    3b6a:	89 a5       	ldd	r24, Y+41	; 0x29
    3b6c:	9a a5       	ldd	r25, Y+42	; 0x2a
    3b6e:	20 e0       	ldi	r18, 0x00	; 0
    3b70:	30 e0       	ldi	r19, 0x00	; 0
    3b72:	4a ef       	ldi	r20, 0xFA	; 250
    3b74:	54 e4       	ldi	r21, 0x44	; 68
    3b76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b7a:	dc 01       	movw	r26, r24
    3b7c:	cb 01       	movw	r24, r22
    3b7e:	8b a3       	std	Y+35, r24	; 0x23
    3b80:	9c a3       	std	Y+36, r25	; 0x24
    3b82:	ad a3       	std	Y+37, r26	; 0x25
    3b84:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3b86:	6b a1       	ldd	r22, Y+35	; 0x23
    3b88:	7c a1       	ldd	r23, Y+36	; 0x24
    3b8a:	8d a1       	ldd	r24, Y+37	; 0x25
    3b8c:	9e a1       	ldd	r25, Y+38	; 0x26
    3b8e:	20 e0       	ldi	r18, 0x00	; 0
    3b90:	30 e0       	ldi	r19, 0x00	; 0
    3b92:	40 e8       	ldi	r20, 0x80	; 128
    3b94:	5f e3       	ldi	r21, 0x3F	; 63
    3b96:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3b9a:	88 23       	and	r24, r24
    3b9c:	2c f4       	brge	.+10     	; 0x3ba8 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    3b9e:	81 e0       	ldi	r24, 0x01	; 1
    3ba0:	90 e0       	ldi	r25, 0x00	; 0
    3ba2:	9a a3       	std	Y+34, r25	; 0x22
    3ba4:	89 a3       	std	Y+33, r24	; 0x21
    3ba6:	3f c0       	rjmp	.+126    	; 0x3c26 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    3ba8:	6b a1       	ldd	r22, Y+35	; 0x23
    3baa:	7c a1       	ldd	r23, Y+36	; 0x24
    3bac:	8d a1       	ldd	r24, Y+37	; 0x25
    3bae:	9e a1       	ldd	r25, Y+38	; 0x26
    3bb0:	20 e0       	ldi	r18, 0x00	; 0
    3bb2:	3f ef       	ldi	r19, 0xFF	; 255
    3bb4:	4f e7       	ldi	r20, 0x7F	; 127
    3bb6:	57 e4       	ldi	r21, 0x47	; 71
    3bb8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3bbc:	18 16       	cp	r1, r24
    3bbe:	4c f5       	brge	.+82     	; 0x3c12 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bc0:	6f a1       	ldd	r22, Y+39	; 0x27
    3bc2:	78 a5       	ldd	r23, Y+40	; 0x28
    3bc4:	89 a5       	ldd	r24, Y+41	; 0x29
    3bc6:	9a a5       	ldd	r25, Y+42	; 0x2a
    3bc8:	20 e0       	ldi	r18, 0x00	; 0
    3bca:	30 e0       	ldi	r19, 0x00	; 0
    3bcc:	40 e2       	ldi	r20, 0x20	; 32
    3bce:	51 e4       	ldi	r21, 0x41	; 65
    3bd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bd4:	dc 01       	movw	r26, r24
    3bd6:	cb 01       	movw	r24, r22
    3bd8:	bc 01       	movw	r22, r24
    3bda:	cd 01       	movw	r24, r26
    3bdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3be0:	dc 01       	movw	r26, r24
    3be2:	cb 01       	movw	r24, r22
    3be4:	9a a3       	std	Y+34, r25	; 0x22
    3be6:	89 a3       	std	Y+33, r24	; 0x21
    3be8:	0f c0       	rjmp	.+30     	; 0x3c08 <LCD_sendCommand+0x658>
    3bea:	88 ec       	ldi	r24, 0xC8	; 200
    3bec:	90 e0       	ldi	r25, 0x00	; 0
    3bee:	98 a3       	std	Y+32, r25	; 0x20
    3bf0:	8f 8f       	std	Y+31, r24	; 0x1f
    3bf2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3bf4:	98 a1       	ldd	r25, Y+32	; 0x20
    3bf6:	01 97       	sbiw	r24, 0x01	; 1
    3bf8:	f1 f7       	brne	.-4      	; 0x3bf6 <LCD_sendCommand+0x646>
    3bfa:	98 a3       	std	Y+32, r25	; 0x20
    3bfc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bfe:	89 a1       	ldd	r24, Y+33	; 0x21
    3c00:	9a a1       	ldd	r25, Y+34	; 0x22
    3c02:	01 97       	sbiw	r24, 0x01	; 1
    3c04:	9a a3       	std	Y+34, r25	; 0x22
    3c06:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c08:	89 a1       	ldd	r24, Y+33	; 0x21
    3c0a:	9a a1       	ldd	r25, Y+34	; 0x22
    3c0c:	00 97       	sbiw	r24, 0x00	; 0
    3c0e:	69 f7       	brne	.-38     	; 0x3bea <LCD_sendCommand+0x63a>
    3c10:	14 c0       	rjmp	.+40     	; 0x3c3a <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c12:	6b a1       	ldd	r22, Y+35	; 0x23
    3c14:	7c a1       	ldd	r23, Y+36	; 0x24
    3c16:	8d a1       	ldd	r24, Y+37	; 0x25
    3c18:	9e a1       	ldd	r25, Y+38	; 0x26
    3c1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c1e:	dc 01       	movw	r26, r24
    3c20:	cb 01       	movw	r24, r22
    3c22:	9a a3       	std	Y+34, r25	; 0x22
    3c24:	89 a3       	std	Y+33, r24	; 0x21
    3c26:	89 a1       	ldd	r24, Y+33	; 0x21
    3c28:	9a a1       	ldd	r25, Y+34	; 0x22
    3c2a:	9e 8f       	std	Y+30, r25	; 0x1e
    3c2c:	8d 8f       	std	Y+29, r24	; 0x1d
    3c2e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3c30:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3c32:	01 97       	sbiw	r24, 0x01	; 1
    3c34:	f1 f7       	brne	.-4      	; 0x3c32 <LCD_sendCommand+0x682>
    3c36:	9e 8f       	std	Y+30, r25	; 0x1e
    3c38:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN4 , GET_BIT(command,0) );
    3c3a:	fe 01       	movw	r30, r28
    3c3c:	ed 59       	subi	r30, 0x9D	; 157
    3c3e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c40:	80 81       	ld	r24, Z
    3c42:	98 2f       	mov	r25, r24
    3c44:	91 70       	andi	r25, 0x01	; 1
    3c46:	82 e0       	ldi	r24, 0x02	; 2
    3c48:	64 e0       	ldi	r22, 0x04	; 4
    3c4a:	49 2f       	mov	r20, r25
    3c4c:	0e 94 01 17 	call	0x2e02	; 0x2e02 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN5 , GET_BIT(command,1) );
    3c50:	fe 01       	movw	r30, r28
    3c52:	ed 59       	subi	r30, 0x9D	; 157
    3c54:	ff 4f       	sbci	r31, 0xFF	; 255
    3c56:	80 81       	ld	r24, Z
    3c58:	88 2f       	mov	r24, r24
    3c5a:	90 e0       	ldi	r25, 0x00	; 0
    3c5c:	82 70       	andi	r24, 0x02	; 2
    3c5e:	90 70       	andi	r25, 0x00	; 0
    3c60:	95 95       	asr	r25
    3c62:	87 95       	ror	r24
    3c64:	98 2f       	mov	r25, r24
    3c66:	82 e0       	ldi	r24, 0x02	; 2
    3c68:	65 e0       	ldi	r22, 0x05	; 5
    3c6a:	49 2f       	mov	r20, r25
    3c6c:	0e 94 01 17 	call	0x2e02	; 0x2e02 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN6 , GET_BIT(command,2) );
    3c70:	fe 01       	movw	r30, r28
    3c72:	ed 59       	subi	r30, 0x9D	; 157
    3c74:	ff 4f       	sbci	r31, 0xFF	; 255
    3c76:	80 81       	ld	r24, Z
    3c78:	88 2f       	mov	r24, r24
    3c7a:	90 e0       	ldi	r25, 0x00	; 0
    3c7c:	84 70       	andi	r24, 0x04	; 4
    3c7e:	90 70       	andi	r25, 0x00	; 0
    3c80:	95 95       	asr	r25
    3c82:	87 95       	ror	r24
    3c84:	95 95       	asr	r25
    3c86:	87 95       	ror	r24
    3c88:	98 2f       	mov	r25, r24
    3c8a:	82 e0       	ldi	r24, 0x02	; 2
    3c8c:	66 e0       	ldi	r22, 0x06	; 6
    3c8e:	49 2f       	mov	r20, r25
    3c90:	0e 94 01 17 	call	0x2e02	; 0x2e02 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN7 , GET_BIT(command,3) );
    3c94:	fe 01       	movw	r30, r28
    3c96:	ed 59       	subi	r30, 0x9D	; 157
    3c98:	ff 4f       	sbci	r31, 0xFF	; 255
    3c9a:	80 81       	ld	r24, Z
    3c9c:	88 2f       	mov	r24, r24
    3c9e:	90 e0       	ldi	r25, 0x00	; 0
    3ca0:	88 70       	andi	r24, 0x08	; 8
    3ca2:	90 70       	andi	r25, 0x00	; 0
    3ca4:	95 95       	asr	r25
    3ca6:	87 95       	ror	r24
    3ca8:	95 95       	asr	r25
    3caa:	87 95       	ror	r24
    3cac:	95 95       	asr	r25
    3cae:	87 95       	ror	r24
    3cb0:	98 2f       	mov	r25, r24
    3cb2:	82 e0       	ldi	r24, 0x02	; 2
    3cb4:	67 e0       	ldi	r22, 0x07	; 7
    3cb6:	49 2f       	mov	r20, r25
    3cb8:	0e 94 01 17 	call	0x2e02	; 0x2e02 <GPIO_writePin>
    3cbc:	80 e0       	ldi	r24, 0x00	; 0
    3cbe:	90 e0       	ldi	r25, 0x00	; 0
    3cc0:	a0 e8       	ldi	r26, 0x80	; 128
    3cc2:	bf e3       	ldi	r27, 0x3F	; 63
    3cc4:	89 8f       	std	Y+25, r24	; 0x19
    3cc6:	9a 8f       	std	Y+26, r25	; 0x1a
    3cc8:	ab 8f       	std	Y+27, r26	; 0x1b
    3cca:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ccc:	69 8d       	ldd	r22, Y+25	; 0x19
    3cce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3cd0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3cd2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3cd4:	20 e0       	ldi	r18, 0x00	; 0
    3cd6:	30 e0       	ldi	r19, 0x00	; 0
    3cd8:	4a ef       	ldi	r20, 0xFA	; 250
    3cda:	54 e4       	ldi	r21, 0x44	; 68
    3cdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ce0:	dc 01       	movw	r26, r24
    3ce2:	cb 01       	movw	r24, r22
    3ce4:	8d 8b       	std	Y+21, r24	; 0x15
    3ce6:	9e 8b       	std	Y+22, r25	; 0x16
    3ce8:	af 8b       	std	Y+23, r26	; 0x17
    3cea:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3cec:	6d 89       	ldd	r22, Y+21	; 0x15
    3cee:	7e 89       	ldd	r23, Y+22	; 0x16
    3cf0:	8f 89       	ldd	r24, Y+23	; 0x17
    3cf2:	98 8d       	ldd	r25, Y+24	; 0x18
    3cf4:	20 e0       	ldi	r18, 0x00	; 0
    3cf6:	30 e0       	ldi	r19, 0x00	; 0
    3cf8:	40 e8       	ldi	r20, 0x80	; 128
    3cfa:	5f e3       	ldi	r21, 0x3F	; 63
    3cfc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3d00:	88 23       	and	r24, r24
    3d02:	2c f4       	brge	.+10     	; 0x3d0e <LCD_sendCommand+0x75e>
		__ticks = 1;
    3d04:	81 e0       	ldi	r24, 0x01	; 1
    3d06:	90 e0       	ldi	r25, 0x00	; 0
    3d08:	9c 8b       	std	Y+20, r25	; 0x14
    3d0a:	8b 8b       	std	Y+19, r24	; 0x13
    3d0c:	3f c0       	rjmp	.+126    	; 0x3d8c <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    3d0e:	6d 89       	ldd	r22, Y+21	; 0x15
    3d10:	7e 89       	ldd	r23, Y+22	; 0x16
    3d12:	8f 89       	ldd	r24, Y+23	; 0x17
    3d14:	98 8d       	ldd	r25, Y+24	; 0x18
    3d16:	20 e0       	ldi	r18, 0x00	; 0
    3d18:	3f ef       	ldi	r19, 0xFF	; 255
    3d1a:	4f e7       	ldi	r20, 0x7F	; 127
    3d1c:	57 e4       	ldi	r21, 0x47	; 71
    3d1e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3d22:	18 16       	cp	r1, r24
    3d24:	4c f5       	brge	.+82     	; 0x3d78 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d26:	69 8d       	ldd	r22, Y+25	; 0x19
    3d28:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3d2a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d2c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d2e:	20 e0       	ldi	r18, 0x00	; 0
    3d30:	30 e0       	ldi	r19, 0x00	; 0
    3d32:	40 e2       	ldi	r20, 0x20	; 32
    3d34:	51 e4       	ldi	r21, 0x41	; 65
    3d36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d3a:	dc 01       	movw	r26, r24
    3d3c:	cb 01       	movw	r24, r22
    3d3e:	bc 01       	movw	r22, r24
    3d40:	cd 01       	movw	r24, r26
    3d42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d46:	dc 01       	movw	r26, r24
    3d48:	cb 01       	movw	r24, r22
    3d4a:	9c 8b       	std	Y+20, r25	; 0x14
    3d4c:	8b 8b       	std	Y+19, r24	; 0x13
    3d4e:	0f c0       	rjmp	.+30     	; 0x3d6e <LCD_sendCommand+0x7be>
    3d50:	88 ec       	ldi	r24, 0xC8	; 200
    3d52:	90 e0       	ldi	r25, 0x00	; 0
    3d54:	9a 8b       	std	Y+18, r25	; 0x12
    3d56:	89 8b       	std	Y+17, r24	; 0x11
    3d58:	89 89       	ldd	r24, Y+17	; 0x11
    3d5a:	9a 89       	ldd	r25, Y+18	; 0x12
    3d5c:	01 97       	sbiw	r24, 0x01	; 1
    3d5e:	f1 f7       	brne	.-4      	; 0x3d5c <LCD_sendCommand+0x7ac>
    3d60:	9a 8b       	std	Y+18, r25	; 0x12
    3d62:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d64:	8b 89       	ldd	r24, Y+19	; 0x13
    3d66:	9c 89       	ldd	r25, Y+20	; 0x14
    3d68:	01 97       	sbiw	r24, 0x01	; 1
    3d6a:	9c 8b       	std	Y+20, r25	; 0x14
    3d6c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d6e:	8b 89       	ldd	r24, Y+19	; 0x13
    3d70:	9c 89       	ldd	r25, Y+20	; 0x14
    3d72:	00 97       	sbiw	r24, 0x00	; 0
    3d74:	69 f7       	brne	.-38     	; 0x3d50 <LCD_sendCommand+0x7a0>
    3d76:	14 c0       	rjmp	.+40     	; 0x3da0 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d78:	6d 89       	ldd	r22, Y+21	; 0x15
    3d7a:	7e 89       	ldd	r23, Y+22	; 0x16
    3d7c:	8f 89       	ldd	r24, Y+23	; 0x17
    3d7e:	98 8d       	ldd	r25, Y+24	; 0x18
    3d80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d84:	dc 01       	movw	r26, r24
    3d86:	cb 01       	movw	r24, r22
    3d88:	9c 8b       	std	Y+20, r25	; 0x14
    3d8a:	8b 8b       	std	Y+19, r24	; 0x13
    3d8c:	8b 89       	ldd	r24, Y+19	; 0x13
    3d8e:	9c 89       	ldd	r25, Y+20	; 0x14
    3d90:	98 8b       	std	Y+16, r25	; 0x10
    3d92:	8f 87       	std	Y+15, r24	; 0x0f
    3d94:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d96:	98 89       	ldd	r25, Y+16	; 0x10
    3d98:	01 97       	sbiw	r24, 0x01	; 1
    3d9a:	f1 f7       	brne	.-4      	; 0x3d98 <LCD_sendCommand+0x7e8>
    3d9c:	98 8b       	std	Y+16, r25	; 0x10
    3d9e:	8f 87       	std	Y+15, r24	; 0x0f



#endif

	GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, LOGIC_LOW);
    3da0:	83 e0       	ldi	r24, 0x03	; 3
    3da2:	63 e0       	ldi	r22, 0x03	; 3
    3da4:	40 e0       	ldi	r20, 0x00	; 0
    3da6:	0e 94 01 17 	call	0x2e02	; 0x2e02 <GPIO_writePin>
    3daa:	80 e0       	ldi	r24, 0x00	; 0
    3dac:	90 e0       	ldi	r25, 0x00	; 0
    3dae:	a0 e8       	ldi	r26, 0x80	; 128
    3db0:	bf e3       	ldi	r27, 0x3F	; 63
    3db2:	8b 87       	std	Y+11, r24	; 0x0b
    3db4:	9c 87       	std	Y+12, r25	; 0x0c
    3db6:	ad 87       	std	Y+13, r26	; 0x0d
    3db8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dba:	6b 85       	ldd	r22, Y+11	; 0x0b
    3dbc:	7c 85       	ldd	r23, Y+12	; 0x0c
    3dbe:	8d 85       	ldd	r24, Y+13	; 0x0d
    3dc0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3dc2:	20 e0       	ldi	r18, 0x00	; 0
    3dc4:	30 e0       	ldi	r19, 0x00	; 0
    3dc6:	4a ef       	ldi	r20, 0xFA	; 250
    3dc8:	54 e4       	ldi	r21, 0x44	; 68
    3dca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dce:	dc 01       	movw	r26, r24
    3dd0:	cb 01       	movw	r24, r22
    3dd2:	8f 83       	std	Y+7, r24	; 0x07
    3dd4:	98 87       	std	Y+8, r25	; 0x08
    3dd6:	a9 87       	std	Y+9, r26	; 0x09
    3dd8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3dda:	6f 81       	ldd	r22, Y+7	; 0x07
    3ddc:	78 85       	ldd	r23, Y+8	; 0x08
    3dde:	89 85       	ldd	r24, Y+9	; 0x09
    3de0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3de2:	20 e0       	ldi	r18, 0x00	; 0
    3de4:	30 e0       	ldi	r19, 0x00	; 0
    3de6:	40 e8       	ldi	r20, 0x80	; 128
    3de8:	5f e3       	ldi	r21, 0x3F	; 63
    3dea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3dee:	88 23       	and	r24, r24
    3df0:	2c f4       	brge	.+10     	; 0x3dfc <LCD_sendCommand+0x84c>
		__ticks = 1;
    3df2:	81 e0       	ldi	r24, 0x01	; 1
    3df4:	90 e0       	ldi	r25, 0x00	; 0
    3df6:	9e 83       	std	Y+6, r25	; 0x06
    3df8:	8d 83       	std	Y+5, r24	; 0x05
    3dfa:	3f c0       	rjmp	.+126    	; 0x3e7a <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    3dfc:	6f 81       	ldd	r22, Y+7	; 0x07
    3dfe:	78 85       	ldd	r23, Y+8	; 0x08
    3e00:	89 85       	ldd	r24, Y+9	; 0x09
    3e02:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e04:	20 e0       	ldi	r18, 0x00	; 0
    3e06:	3f ef       	ldi	r19, 0xFF	; 255
    3e08:	4f e7       	ldi	r20, 0x7F	; 127
    3e0a:	57 e4       	ldi	r21, 0x47	; 71
    3e0c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3e10:	18 16       	cp	r1, r24
    3e12:	4c f5       	brge	.+82     	; 0x3e66 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e14:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e16:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e18:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e1c:	20 e0       	ldi	r18, 0x00	; 0
    3e1e:	30 e0       	ldi	r19, 0x00	; 0
    3e20:	40 e2       	ldi	r20, 0x20	; 32
    3e22:	51 e4       	ldi	r21, 0x41	; 65
    3e24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e28:	dc 01       	movw	r26, r24
    3e2a:	cb 01       	movw	r24, r22
    3e2c:	bc 01       	movw	r22, r24
    3e2e:	cd 01       	movw	r24, r26
    3e30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e34:	dc 01       	movw	r26, r24
    3e36:	cb 01       	movw	r24, r22
    3e38:	9e 83       	std	Y+6, r25	; 0x06
    3e3a:	8d 83       	std	Y+5, r24	; 0x05
    3e3c:	0f c0       	rjmp	.+30     	; 0x3e5c <LCD_sendCommand+0x8ac>
    3e3e:	88 ec       	ldi	r24, 0xC8	; 200
    3e40:	90 e0       	ldi	r25, 0x00	; 0
    3e42:	9c 83       	std	Y+4, r25	; 0x04
    3e44:	8b 83       	std	Y+3, r24	; 0x03
    3e46:	8b 81       	ldd	r24, Y+3	; 0x03
    3e48:	9c 81       	ldd	r25, Y+4	; 0x04
    3e4a:	01 97       	sbiw	r24, 0x01	; 1
    3e4c:	f1 f7       	brne	.-4      	; 0x3e4a <LCD_sendCommand+0x89a>
    3e4e:	9c 83       	std	Y+4, r25	; 0x04
    3e50:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e52:	8d 81       	ldd	r24, Y+5	; 0x05
    3e54:	9e 81       	ldd	r25, Y+6	; 0x06
    3e56:	01 97       	sbiw	r24, 0x01	; 1
    3e58:	9e 83       	std	Y+6, r25	; 0x06
    3e5a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e5c:	8d 81       	ldd	r24, Y+5	; 0x05
    3e5e:	9e 81       	ldd	r25, Y+6	; 0x06
    3e60:	00 97       	sbiw	r24, 0x00	; 0
    3e62:	69 f7       	brne	.-38     	; 0x3e3e <LCD_sendCommand+0x88e>
    3e64:	14 c0       	rjmp	.+40     	; 0x3e8e <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e66:	6f 81       	ldd	r22, Y+7	; 0x07
    3e68:	78 85       	ldd	r23, Y+8	; 0x08
    3e6a:	89 85       	ldd	r24, Y+9	; 0x09
    3e6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e72:	dc 01       	movw	r26, r24
    3e74:	cb 01       	movw	r24, r22
    3e76:	9e 83       	std	Y+6, r25	; 0x06
    3e78:	8d 83       	std	Y+5, r24	; 0x05
    3e7a:	8d 81       	ldd	r24, Y+5	; 0x05
    3e7c:	9e 81       	ldd	r25, Y+6	; 0x06
    3e7e:	9a 83       	std	Y+2, r25	; 0x02
    3e80:	89 83       	std	Y+1, r24	; 0x01
    3e82:	89 81       	ldd	r24, Y+1	; 0x01
    3e84:	9a 81       	ldd	r25, Y+2	; 0x02
    3e86:	01 97       	sbiw	r24, 0x01	; 1
    3e88:	f1 f7       	brne	.-4      	; 0x3e86 <LCD_sendCommand+0x8d6>
    3e8a:	9a 83       	std	Y+2, r25	; 0x02
    3e8c:	89 83       	std	Y+1, r24	; 0x01
	/*write  0 in enable pin beacase LCD read the at falling edge of enable, so we make it 1 then 0*/

	_delay_ms(1);
}
    3e8e:	cd 59       	subi	r28, 0x9D	; 157
    3e90:	df 4f       	sbci	r29, 0xFF	; 255
    3e92:	0f b6       	in	r0, 0x3f	; 63
    3e94:	f8 94       	cli
    3e96:	de bf       	out	0x3e, r29	; 62
    3e98:	0f be       	out	0x3f, r0	; 63
    3e9a:	cd bf       	out	0x3d, r28	; 61
    3e9c:	cf 91       	pop	r28
    3e9e:	df 91       	pop	r29
    3ea0:	1f 91       	pop	r17
    3ea2:	0f 91       	pop	r16
    3ea4:	08 95       	ret

00003ea6 <LCD_init>:


void LCD_init(void)
{
    3ea6:	df 93       	push	r29
    3ea8:	cf 93       	push	r28
    3eaa:	cd b7       	in	r28, 0x3d	; 61
    3eac:	de b7       	in	r29, 0x3e	; 62
    3eae:	6c 97       	sbiw	r28, 0x1c	; 28
    3eb0:	0f b6       	in	r0, 0x3f	; 63
    3eb2:	f8 94       	cli
    3eb4:	de bf       	out	0x3e, r29	; 62
    3eb6:	0f be       	out	0x3f, r0	; 63
    3eb8:	cd bf       	out	0x3d, r28	; 61
	GPIO_setupPinDirection(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID,OUTPUT);/*make enable output*/
    3eba:	83 e0       	ldi	r24, 0x03	; 3
    3ebc:	63 e0       	ldi	r22, 0x03	; 3
    3ebe:	41 e0       	ldi	r20, 0x01	; 1
    3ec0:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <GPIO_setupPinDirection>

	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID,OUTPUT);/*make RS  output*/
    3ec4:	83 e0       	ldi	r24, 0x03	; 3
    3ec6:	62 e0       	ldi	r22, 0x02	; 2
    3ec8:	41 e0       	ldi	r20, 0x01	; 1
    3eca:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <GPIO_setupPinDirection>
    3ece:	80 e0       	ldi	r24, 0x00	; 0
    3ed0:	90 e0       	ldi	r25, 0x00	; 0
    3ed2:	a0 ea       	ldi	r26, 0xA0	; 160
    3ed4:	b1 e4       	ldi	r27, 0x41	; 65
    3ed6:	89 8f       	std	Y+25, r24	; 0x19
    3ed8:	9a 8f       	std	Y+26, r25	; 0x1a
    3eda:	ab 8f       	std	Y+27, r26	; 0x1b
    3edc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ede:	69 8d       	ldd	r22, Y+25	; 0x19
    3ee0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ee2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ee4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ee6:	20 e0       	ldi	r18, 0x00	; 0
    3ee8:	30 e0       	ldi	r19, 0x00	; 0
    3eea:	4a ef       	ldi	r20, 0xFA	; 250
    3eec:	54 e4       	ldi	r21, 0x44	; 68
    3eee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ef2:	dc 01       	movw	r26, r24
    3ef4:	cb 01       	movw	r24, r22
    3ef6:	8d 8b       	std	Y+21, r24	; 0x15
    3ef8:	9e 8b       	std	Y+22, r25	; 0x16
    3efa:	af 8b       	std	Y+23, r26	; 0x17
    3efc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3efe:	6d 89       	ldd	r22, Y+21	; 0x15
    3f00:	7e 89       	ldd	r23, Y+22	; 0x16
    3f02:	8f 89       	ldd	r24, Y+23	; 0x17
    3f04:	98 8d       	ldd	r25, Y+24	; 0x18
    3f06:	20 e0       	ldi	r18, 0x00	; 0
    3f08:	30 e0       	ldi	r19, 0x00	; 0
    3f0a:	40 e8       	ldi	r20, 0x80	; 128
    3f0c:	5f e3       	ldi	r21, 0x3F	; 63
    3f0e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3f12:	88 23       	and	r24, r24
    3f14:	2c f4       	brge	.+10     	; 0x3f20 <LCD_init+0x7a>
		__ticks = 1;
    3f16:	81 e0       	ldi	r24, 0x01	; 1
    3f18:	90 e0       	ldi	r25, 0x00	; 0
    3f1a:	9c 8b       	std	Y+20, r25	; 0x14
    3f1c:	8b 8b       	std	Y+19, r24	; 0x13
    3f1e:	3f c0       	rjmp	.+126    	; 0x3f9e <LCD_init+0xf8>
	else if (__tmp > 65535)
    3f20:	6d 89       	ldd	r22, Y+21	; 0x15
    3f22:	7e 89       	ldd	r23, Y+22	; 0x16
    3f24:	8f 89       	ldd	r24, Y+23	; 0x17
    3f26:	98 8d       	ldd	r25, Y+24	; 0x18
    3f28:	20 e0       	ldi	r18, 0x00	; 0
    3f2a:	3f ef       	ldi	r19, 0xFF	; 255
    3f2c:	4f e7       	ldi	r20, 0x7F	; 127
    3f2e:	57 e4       	ldi	r21, 0x47	; 71
    3f30:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3f34:	18 16       	cp	r1, r24
    3f36:	4c f5       	brge	.+82     	; 0x3f8a <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f38:	69 8d       	ldd	r22, Y+25	; 0x19
    3f3a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3f3c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3f3e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3f40:	20 e0       	ldi	r18, 0x00	; 0
    3f42:	30 e0       	ldi	r19, 0x00	; 0
    3f44:	40 e2       	ldi	r20, 0x20	; 32
    3f46:	51 e4       	ldi	r21, 0x41	; 65
    3f48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f4c:	dc 01       	movw	r26, r24
    3f4e:	cb 01       	movw	r24, r22
    3f50:	bc 01       	movw	r22, r24
    3f52:	cd 01       	movw	r24, r26
    3f54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f58:	dc 01       	movw	r26, r24
    3f5a:	cb 01       	movw	r24, r22
    3f5c:	9c 8b       	std	Y+20, r25	; 0x14
    3f5e:	8b 8b       	std	Y+19, r24	; 0x13
    3f60:	0f c0       	rjmp	.+30     	; 0x3f80 <LCD_init+0xda>
    3f62:	88 ec       	ldi	r24, 0xC8	; 200
    3f64:	90 e0       	ldi	r25, 0x00	; 0
    3f66:	9a 8b       	std	Y+18, r25	; 0x12
    3f68:	89 8b       	std	Y+17, r24	; 0x11
    3f6a:	89 89       	ldd	r24, Y+17	; 0x11
    3f6c:	9a 89       	ldd	r25, Y+18	; 0x12
    3f6e:	01 97       	sbiw	r24, 0x01	; 1
    3f70:	f1 f7       	brne	.-4      	; 0x3f6e <LCD_init+0xc8>
    3f72:	9a 8b       	std	Y+18, r25	; 0x12
    3f74:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f76:	8b 89       	ldd	r24, Y+19	; 0x13
    3f78:	9c 89       	ldd	r25, Y+20	; 0x14
    3f7a:	01 97       	sbiw	r24, 0x01	; 1
    3f7c:	9c 8b       	std	Y+20, r25	; 0x14
    3f7e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f80:	8b 89       	ldd	r24, Y+19	; 0x13
    3f82:	9c 89       	ldd	r25, Y+20	; 0x14
    3f84:	00 97       	sbiw	r24, 0x00	; 0
    3f86:	69 f7       	brne	.-38     	; 0x3f62 <LCD_init+0xbc>
    3f88:	14 c0       	rjmp	.+40     	; 0x3fb2 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f8a:	6d 89       	ldd	r22, Y+21	; 0x15
    3f8c:	7e 89       	ldd	r23, Y+22	; 0x16
    3f8e:	8f 89       	ldd	r24, Y+23	; 0x17
    3f90:	98 8d       	ldd	r25, Y+24	; 0x18
    3f92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f96:	dc 01       	movw	r26, r24
    3f98:	cb 01       	movw	r24, r22
    3f9a:	9c 8b       	std	Y+20, r25	; 0x14
    3f9c:	8b 8b       	std	Y+19, r24	; 0x13
    3f9e:	8b 89       	ldd	r24, Y+19	; 0x13
    3fa0:	9c 89       	ldd	r25, Y+20	; 0x14
    3fa2:	98 8b       	std	Y+16, r25	; 0x10
    3fa4:	8f 87       	std	Y+15, r24	; 0x0f
    3fa6:	8f 85       	ldd	r24, Y+15	; 0x0f
    3fa8:	98 89       	ldd	r25, Y+16	; 0x10
    3faa:	01 97       	sbiw	r24, 0x01	; 1
    3fac:	f1 f7       	brne	.-4      	; 0x3faa <LCD_init+0x104>
    3fae:	98 8b       	std	Y+16, r25	; 0x10
    3fb0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(20);
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);  /*make LCD 8 bit mode and 2 line*/


#else
	GPIO_setupPinDirection(LCD_DATA_PORT_ID , LCD_DATA_PIN4 , OUTPUT);
    3fb2:	82 e0       	ldi	r24, 0x02	; 2
    3fb4:	64 e0       	ldi	r22, 0x04	; 4
    3fb6:	41 e0       	ldi	r20, 0x01	; 1
    3fb8:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID , LCD_DATA_PIN5 , OUTPUT);
    3fbc:	82 e0       	ldi	r24, 0x02	; 2
    3fbe:	65 e0       	ldi	r22, 0x05	; 5
    3fc0:	41 e0       	ldi	r20, 0x01	; 1
    3fc2:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID , LCD_DATA_PIN6 , OUTPUT);
    3fc6:	82 e0       	ldi	r24, 0x02	; 2
    3fc8:	66 e0       	ldi	r22, 0x06	; 6
    3fca:	41 e0       	ldi	r20, 0x01	; 1
    3fcc:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID , LCD_DATA_PIN7 , OUTPUT);
    3fd0:	82 e0       	ldi	r24, 0x02	; 2
    3fd2:	67 e0       	ldi	r22, 0x07	; 7
    3fd4:	41 e0       	ldi	r20, 0x01	; 1
    3fd6:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <GPIO_setupPinDirection>
    3fda:	80 e0       	ldi	r24, 0x00	; 0
    3fdc:	90 e0       	ldi	r25, 0x00	; 0
    3fde:	a0 ea       	ldi	r26, 0xA0	; 160
    3fe0:	b1 e4       	ldi	r27, 0x41	; 65
    3fe2:	8b 87       	std	Y+11, r24	; 0x0b
    3fe4:	9c 87       	std	Y+12, r25	; 0x0c
    3fe6:	ad 87       	std	Y+13, r26	; 0x0d
    3fe8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fea:	6b 85       	ldd	r22, Y+11	; 0x0b
    3fec:	7c 85       	ldd	r23, Y+12	; 0x0c
    3fee:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ff0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ff2:	20 e0       	ldi	r18, 0x00	; 0
    3ff4:	30 e0       	ldi	r19, 0x00	; 0
    3ff6:	4a ef       	ldi	r20, 0xFA	; 250
    3ff8:	54 e4       	ldi	r21, 0x44	; 68
    3ffa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ffe:	dc 01       	movw	r26, r24
    4000:	cb 01       	movw	r24, r22
    4002:	8f 83       	std	Y+7, r24	; 0x07
    4004:	98 87       	std	Y+8, r25	; 0x08
    4006:	a9 87       	std	Y+9, r26	; 0x09
    4008:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    400a:	6f 81       	ldd	r22, Y+7	; 0x07
    400c:	78 85       	ldd	r23, Y+8	; 0x08
    400e:	89 85       	ldd	r24, Y+9	; 0x09
    4010:	9a 85       	ldd	r25, Y+10	; 0x0a
    4012:	20 e0       	ldi	r18, 0x00	; 0
    4014:	30 e0       	ldi	r19, 0x00	; 0
    4016:	40 e8       	ldi	r20, 0x80	; 128
    4018:	5f e3       	ldi	r21, 0x3F	; 63
    401a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    401e:	88 23       	and	r24, r24
    4020:	2c f4       	brge	.+10     	; 0x402c <LCD_init+0x186>
		__ticks = 1;
    4022:	81 e0       	ldi	r24, 0x01	; 1
    4024:	90 e0       	ldi	r25, 0x00	; 0
    4026:	9e 83       	std	Y+6, r25	; 0x06
    4028:	8d 83       	std	Y+5, r24	; 0x05
    402a:	3f c0       	rjmp	.+126    	; 0x40aa <LCD_init+0x204>
	else if (__tmp > 65535)
    402c:	6f 81       	ldd	r22, Y+7	; 0x07
    402e:	78 85       	ldd	r23, Y+8	; 0x08
    4030:	89 85       	ldd	r24, Y+9	; 0x09
    4032:	9a 85       	ldd	r25, Y+10	; 0x0a
    4034:	20 e0       	ldi	r18, 0x00	; 0
    4036:	3f ef       	ldi	r19, 0xFF	; 255
    4038:	4f e7       	ldi	r20, 0x7F	; 127
    403a:	57 e4       	ldi	r21, 0x47	; 71
    403c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4040:	18 16       	cp	r1, r24
    4042:	4c f5       	brge	.+82     	; 0x4096 <LCD_init+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4044:	6b 85       	ldd	r22, Y+11	; 0x0b
    4046:	7c 85       	ldd	r23, Y+12	; 0x0c
    4048:	8d 85       	ldd	r24, Y+13	; 0x0d
    404a:	9e 85       	ldd	r25, Y+14	; 0x0e
    404c:	20 e0       	ldi	r18, 0x00	; 0
    404e:	30 e0       	ldi	r19, 0x00	; 0
    4050:	40 e2       	ldi	r20, 0x20	; 32
    4052:	51 e4       	ldi	r21, 0x41	; 65
    4054:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4058:	dc 01       	movw	r26, r24
    405a:	cb 01       	movw	r24, r22
    405c:	bc 01       	movw	r22, r24
    405e:	cd 01       	movw	r24, r26
    4060:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4064:	dc 01       	movw	r26, r24
    4066:	cb 01       	movw	r24, r22
    4068:	9e 83       	std	Y+6, r25	; 0x06
    406a:	8d 83       	std	Y+5, r24	; 0x05
    406c:	0f c0       	rjmp	.+30     	; 0x408c <LCD_init+0x1e6>
    406e:	88 ec       	ldi	r24, 0xC8	; 200
    4070:	90 e0       	ldi	r25, 0x00	; 0
    4072:	9c 83       	std	Y+4, r25	; 0x04
    4074:	8b 83       	std	Y+3, r24	; 0x03
    4076:	8b 81       	ldd	r24, Y+3	; 0x03
    4078:	9c 81       	ldd	r25, Y+4	; 0x04
    407a:	01 97       	sbiw	r24, 0x01	; 1
    407c:	f1 f7       	brne	.-4      	; 0x407a <LCD_init+0x1d4>
    407e:	9c 83       	std	Y+4, r25	; 0x04
    4080:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4082:	8d 81       	ldd	r24, Y+5	; 0x05
    4084:	9e 81       	ldd	r25, Y+6	; 0x06
    4086:	01 97       	sbiw	r24, 0x01	; 1
    4088:	9e 83       	std	Y+6, r25	; 0x06
    408a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    408c:	8d 81       	ldd	r24, Y+5	; 0x05
    408e:	9e 81       	ldd	r25, Y+6	; 0x06
    4090:	00 97       	sbiw	r24, 0x00	; 0
    4092:	69 f7       	brne	.-38     	; 0x406e <LCD_init+0x1c8>
    4094:	14 c0       	rjmp	.+40     	; 0x40be <LCD_init+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4096:	6f 81       	ldd	r22, Y+7	; 0x07
    4098:	78 85       	ldd	r23, Y+8	; 0x08
    409a:	89 85       	ldd	r24, Y+9	; 0x09
    409c:	9a 85       	ldd	r25, Y+10	; 0x0a
    409e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40a2:	dc 01       	movw	r26, r24
    40a4:	cb 01       	movw	r24, r22
    40a6:	9e 83       	std	Y+6, r25	; 0x06
    40a8:	8d 83       	std	Y+5, r24	; 0x05
    40aa:	8d 81       	ldd	r24, Y+5	; 0x05
    40ac:	9e 81       	ldd	r25, Y+6	; 0x06
    40ae:	9a 83       	std	Y+2, r25	; 0x02
    40b0:	89 83       	std	Y+1, r24	; 0x01
    40b2:	89 81       	ldd	r24, Y+1	; 0x01
    40b4:	9a 81       	ldd	r25, Y+2	; 0x02
    40b6:	01 97       	sbiw	r24, 0x01	; 1
    40b8:	f1 f7       	brne	.-4      	; 0x40b6 <LCD_init+0x210>
    40ba:	9a 83       	std	Y+2, r25	; 0x02
    40bc:	89 83       	std	Y+1, r24	; 0x01
	/*make last 4 pins in portc output*/
	_delay_ms(20);
	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    40be:	83 e3       	ldi	r24, 0x33	; 51
    40c0:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    40c4:	82 e3       	ldi	r24, 0x32	; 50
    40c6:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    40ca:	88 e2       	ldi	r24, 0x28	; 40
    40cc:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <LCD_sendCommand>

#endif


	LCD_sendCommand(LCD_CURSOR_OFF);
    40d0:	8c e0       	ldi	r24, 0x0C	; 12
    40d2:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <LCD_sendCommand>

	LCD_sendCommand(LCD_CLEAR_COMMAND);
    40d6:	81 e0       	ldi	r24, 0x01	; 1
    40d8:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <LCD_sendCommand>

}
    40dc:	6c 96       	adiw	r28, 0x1c	; 28
    40de:	0f b6       	in	r0, 0x3f	; 63
    40e0:	f8 94       	cli
    40e2:	de bf       	out	0x3e, r29	; 62
    40e4:	0f be       	out	0x3f, r0	; 63
    40e6:	cd bf       	out	0x3d, r28	; 61
    40e8:	cf 91       	pop	r28
    40ea:	df 91       	pop	r29
    40ec:	08 95       	ret

000040ee <LCD_writeChar>:

void LCD_writeChar(uint8 ch)
{
    40ee:	0f 93       	push	r16
    40f0:	1f 93       	push	r17
    40f2:	df 93       	push	r29
    40f4:	cf 93       	push	r28
    40f6:	cd b7       	in	r28, 0x3d	; 61
    40f8:	de b7       	in	r29, 0x3e	; 62
    40fa:	c3 56       	subi	r28, 0x63	; 99
    40fc:	d0 40       	sbci	r29, 0x00	; 0
    40fe:	0f b6       	in	r0, 0x3f	; 63
    4100:	f8 94       	cli
    4102:	de bf       	out	0x3e, r29	; 62
    4104:	0f be       	out	0x3f, r0	; 63
    4106:	cd bf       	out	0x3d, r28	; 61
    4108:	fe 01       	movw	r30, r28
    410a:	ed 59       	subi	r30, 0x9D	; 157
    410c:	ff 4f       	sbci	r31, 0xFF	; 255
    410e:	80 83       	st	Z, r24
	  GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);     /*write 1 in RS pin */
    4110:	83 e0       	ldi	r24, 0x03	; 3
    4112:	62 e0       	ldi	r22, 0x02	; 2
    4114:	41 e0       	ldi	r20, 0x01	; 1
    4116:	0e 94 01 17 	call	0x2e02	; 0x2e02 <GPIO_writePin>
    411a:	fe 01       	movw	r30, r28
    411c:	e1 5a       	subi	r30, 0xA1	; 161
    411e:	ff 4f       	sbci	r31, 0xFF	; 255
    4120:	80 e0       	ldi	r24, 0x00	; 0
    4122:	90 e0       	ldi	r25, 0x00	; 0
    4124:	a0 e8       	ldi	r26, 0x80	; 128
    4126:	bf e3       	ldi	r27, 0x3F	; 63
    4128:	80 83       	st	Z, r24
    412a:	91 83       	std	Z+1, r25	; 0x01
    412c:	a2 83       	std	Z+2, r26	; 0x02
    412e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4130:	8e 01       	movw	r16, r28
    4132:	05 5a       	subi	r16, 0xA5	; 165
    4134:	1f 4f       	sbci	r17, 0xFF	; 255
    4136:	fe 01       	movw	r30, r28
    4138:	e1 5a       	subi	r30, 0xA1	; 161
    413a:	ff 4f       	sbci	r31, 0xFF	; 255
    413c:	60 81       	ld	r22, Z
    413e:	71 81       	ldd	r23, Z+1	; 0x01
    4140:	82 81       	ldd	r24, Z+2	; 0x02
    4142:	93 81       	ldd	r25, Z+3	; 0x03
    4144:	20 e0       	ldi	r18, 0x00	; 0
    4146:	30 e0       	ldi	r19, 0x00	; 0
    4148:	4a ef       	ldi	r20, 0xFA	; 250
    414a:	54 e4       	ldi	r21, 0x44	; 68
    414c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4150:	dc 01       	movw	r26, r24
    4152:	cb 01       	movw	r24, r22
    4154:	f8 01       	movw	r30, r16
    4156:	80 83       	st	Z, r24
    4158:	91 83       	std	Z+1, r25	; 0x01
    415a:	a2 83       	std	Z+2, r26	; 0x02
    415c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    415e:	fe 01       	movw	r30, r28
    4160:	e5 5a       	subi	r30, 0xA5	; 165
    4162:	ff 4f       	sbci	r31, 0xFF	; 255
    4164:	60 81       	ld	r22, Z
    4166:	71 81       	ldd	r23, Z+1	; 0x01
    4168:	82 81       	ldd	r24, Z+2	; 0x02
    416a:	93 81       	ldd	r25, Z+3	; 0x03
    416c:	20 e0       	ldi	r18, 0x00	; 0
    416e:	30 e0       	ldi	r19, 0x00	; 0
    4170:	40 e8       	ldi	r20, 0x80	; 128
    4172:	5f e3       	ldi	r21, 0x3F	; 63
    4174:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4178:	88 23       	and	r24, r24
    417a:	44 f4       	brge	.+16     	; 0x418c <LCD_writeChar+0x9e>
		__ticks = 1;
    417c:	fe 01       	movw	r30, r28
    417e:	e7 5a       	subi	r30, 0xA7	; 167
    4180:	ff 4f       	sbci	r31, 0xFF	; 255
    4182:	81 e0       	ldi	r24, 0x01	; 1
    4184:	90 e0       	ldi	r25, 0x00	; 0
    4186:	91 83       	std	Z+1, r25	; 0x01
    4188:	80 83       	st	Z, r24
    418a:	64 c0       	rjmp	.+200    	; 0x4254 <LCD_writeChar+0x166>
	else if (__tmp > 65535)
    418c:	fe 01       	movw	r30, r28
    418e:	e5 5a       	subi	r30, 0xA5	; 165
    4190:	ff 4f       	sbci	r31, 0xFF	; 255
    4192:	60 81       	ld	r22, Z
    4194:	71 81       	ldd	r23, Z+1	; 0x01
    4196:	82 81       	ldd	r24, Z+2	; 0x02
    4198:	93 81       	ldd	r25, Z+3	; 0x03
    419a:	20 e0       	ldi	r18, 0x00	; 0
    419c:	3f ef       	ldi	r19, 0xFF	; 255
    419e:	4f e7       	ldi	r20, 0x7F	; 127
    41a0:	57 e4       	ldi	r21, 0x47	; 71
    41a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    41a6:	18 16       	cp	r1, r24
    41a8:	0c f0       	brlt	.+2      	; 0x41ac <LCD_writeChar+0xbe>
    41aa:	43 c0       	rjmp	.+134    	; 0x4232 <LCD_writeChar+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41ac:	fe 01       	movw	r30, r28
    41ae:	e1 5a       	subi	r30, 0xA1	; 161
    41b0:	ff 4f       	sbci	r31, 0xFF	; 255
    41b2:	60 81       	ld	r22, Z
    41b4:	71 81       	ldd	r23, Z+1	; 0x01
    41b6:	82 81       	ldd	r24, Z+2	; 0x02
    41b8:	93 81       	ldd	r25, Z+3	; 0x03
    41ba:	20 e0       	ldi	r18, 0x00	; 0
    41bc:	30 e0       	ldi	r19, 0x00	; 0
    41be:	40 e2       	ldi	r20, 0x20	; 32
    41c0:	51 e4       	ldi	r21, 0x41	; 65
    41c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41c6:	dc 01       	movw	r26, r24
    41c8:	cb 01       	movw	r24, r22
    41ca:	8e 01       	movw	r16, r28
    41cc:	07 5a       	subi	r16, 0xA7	; 167
    41ce:	1f 4f       	sbci	r17, 0xFF	; 255
    41d0:	bc 01       	movw	r22, r24
    41d2:	cd 01       	movw	r24, r26
    41d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41d8:	dc 01       	movw	r26, r24
    41da:	cb 01       	movw	r24, r22
    41dc:	f8 01       	movw	r30, r16
    41de:	91 83       	std	Z+1, r25	; 0x01
    41e0:	80 83       	st	Z, r24
    41e2:	1f c0       	rjmp	.+62     	; 0x4222 <LCD_writeChar+0x134>
    41e4:	fe 01       	movw	r30, r28
    41e6:	e9 5a       	subi	r30, 0xA9	; 169
    41e8:	ff 4f       	sbci	r31, 0xFF	; 255
    41ea:	88 ec       	ldi	r24, 0xC8	; 200
    41ec:	90 e0       	ldi	r25, 0x00	; 0
    41ee:	91 83       	std	Z+1, r25	; 0x01
    41f0:	80 83       	st	Z, r24
    41f2:	fe 01       	movw	r30, r28
    41f4:	e9 5a       	subi	r30, 0xA9	; 169
    41f6:	ff 4f       	sbci	r31, 0xFF	; 255
    41f8:	80 81       	ld	r24, Z
    41fa:	91 81       	ldd	r25, Z+1	; 0x01
    41fc:	01 97       	sbiw	r24, 0x01	; 1
    41fe:	f1 f7       	brne	.-4      	; 0x41fc <LCD_writeChar+0x10e>
    4200:	fe 01       	movw	r30, r28
    4202:	e9 5a       	subi	r30, 0xA9	; 169
    4204:	ff 4f       	sbci	r31, 0xFF	; 255
    4206:	91 83       	std	Z+1, r25	; 0x01
    4208:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    420a:	de 01       	movw	r26, r28
    420c:	a7 5a       	subi	r26, 0xA7	; 167
    420e:	bf 4f       	sbci	r27, 0xFF	; 255
    4210:	fe 01       	movw	r30, r28
    4212:	e7 5a       	subi	r30, 0xA7	; 167
    4214:	ff 4f       	sbci	r31, 0xFF	; 255
    4216:	80 81       	ld	r24, Z
    4218:	91 81       	ldd	r25, Z+1	; 0x01
    421a:	01 97       	sbiw	r24, 0x01	; 1
    421c:	11 96       	adiw	r26, 0x01	; 1
    421e:	9c 93       	st	X, r25
    4220:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4222:	fe 01       	movw	r30, r28
    4224:	e7 5a       	subi	r30, 0xA7	; 167
    4226:	ff 4f       	sbci	r31, 0xFF	; 255
    4228:	80 81       	ld	r24, Z
    422a:	91 81       	ldd	r25, Z+1	; 0x01
    422c:	00 97       	sbiw	r24, 0x00	; 0
    422e:	d1 f6       	brne	.-76     	; 0x41e4 <LCD_writeChar+0xf6>
    4230:	27 c0       	rjmp	.+78     	; 0x4280 <LCD_writeChar+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4232:	8e 01       	movw	r16, r28
    4234:	07 5a       	subi	r16, 0xA7	; 167
    4236:	1f 4f       	sbci	r17, 0xFF	; 255
    4238:	fe 01       	movw	r30, r28
    423a:	e5 5a       	subi	r30, 0xA5	; 165
    423c:	ff 4f       	sbci	r31, 0xFF	; 255
    423e:	60 81       	ld	r22, Z
    4240:	71 81       	ldd	r23, Z+1	; 0x01
    4242:	82 81       	ldd	r24, Z+2	; 0x02
    4244:	93 81       	ldd	r25, Z+3	; 0x03
    4246:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    424a:	dc 01       	movw	r26, r24
    424c:	cb 01       	movw	r24, r22
    424e:	f8 01       	movw	r30, r16
    4250:	91 83       	std	Z+1, r25	; 0x01
    4252:	80 83       	st	Z, r24
    4254:	de 01       	movw	r26, r28
    4256:	ab 5a       	subi	r26, 0xAB	; 171
    4258:	bf 4f       	sbci	r27, 0xFF	; 255
    425a:	fe 01       	movw	r30, r28
    425c:	e7 5a       	subi	r30, 0xA7	; 167
    425e:	ff 4f       	sbci	r31, 0xFF	; 255
    4260:	80 81       	ld	r24, Z
    4262:	91 81       	ldd	r25, Z+1	; 0x01
    4264:	8d 93       	st	X+, r24
    4266:	9c 93       	st	X, r25
    4268:	fe 01       	movw	r30, r28
    426a:	eb 5a       	subi	r30, 0xAB	; 171
    426c:	ff 4f       	sbci	r31, 0xFF	; 255
    426e:	80 81       	ld	r24, Z
    4270:	91 81       	ldd	r25, Z+1	; 0x01
    4272:	01 97       	sbiw	r24, 0x01	; 1
    4274:	f1 f7       	brne	.-4      	; 0x4272 <LCD_writeChar+0x184>
    4276:	fe 01       	movw	r30, r28
    4278:	eb 5a       	subi	r30, 0xAB	; 171
    427a:	ff 4f       	sbci	r31, 0xFF	; 255
    427c:	91 83       	std	Z+1, r25	; 0x01
    427e:	80 83       	st	Z, r24
			_delay_ms(1);

			GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, LOGIC_HIGH);   /*write 1 in enable pin */
    4280:	83 e0       	ldi	r24, 0x03	; 3
    4282:	63 e0       	ldi	r22, 0x03	; 3
    4284:	41 e0       	ldi	r20, 0x01	; 1
    4286:	0e 94 01 17 	call	0x2e02	; 0x2e02 <GPIO_writePin>
    428a:	fe 01       	movw	r30, r28
    428c:	ef 5a       	subi	r30, 0xAF	; 175
    428e:	ff 4f       	sbci	r31, 0xFF	; 255
    4290:	80 e0       	ldi	r24, 0x00	; 0
    4292:	90 e0       	ldi	r25, 0x00	; 0
    4294:	a0 e8       	ldi	r26, 0x80	; 128
    4296:	bf e3       	ldi	r27, 0x3F	; 63
    4298:	80 83       	st	Z, r24
    429a:	91 83       	std	Z+1, r25	; 0x01
    429c:	a2 83       	std	Z+2, r26	; 0x02
    429e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42a0:	8e 01       	movw	r16, r28
    42a2:	03 5b       	subi	r16, 0xB3	; 179
    42a4:	1f 4f       	sbci	r17, 0xFF	; 255
    42a6:	fe 01       	movw	r30, r28
    42a8:	ef 5a       	subi	r30, 0xAF	; 175
    42aa:	ff 4f       	sbci	r31, 0xFF	; 255
    42ac:	60 81       	ld	r22, Z
    42ae:	71 81       	ldd	r23, Z+1	; 0x01
    42b0:	82 81       	ldd	r24, Z+2	; 0x02
    42b2:	93 81       	ldd	r25, Z+3	; 0x03
    42b4:	20 e0       	ldi	r18, 0x00	; 0
    42b6:	30 e0       	ldi	r19, 0x00	; 0
    42b8:	4a ef       	ldi	r20, 0xFA	; 250
    42ba:	54 e4       	ldi	r21, 0x44	; 68
    42bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42c0:	dc 01       	movw	r26, r24
    42c2:	cb 01       	movw	r24, r22
    42c4:	f8 01       	movw	r30, r16
    42c6:	80 83       	st	Z, r24
    42c8:	91 83       	std	Z+1, r25	; 0x01
    42ca:	a2 83       	std	Z+2, r26	; 0x02
    42cc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    42ce:	fe 01       	movw	r30, r28
    42d0:	e3 5b       	subi	r30, 0xB3	; 179
    42d2:	ff 4f       	sbci	r31, 0xFF	; 255
    42d4:	60 81       	ld	r22, Z
    42d6:	71 81       	ldd	r23, Z+1	; 0x01
    42d8:	82 81       	ldd	r24, Z+2	; 0x02
    42da:	93 81       	ldd	r25, Z+3	; 0x03
    42dc:	20 e0       	ldi	r18, 0x00	; 0
    42de:	30 e0       	ldi	r19, 0x00	; 0
    42e0:	40 e8       	ldi	r20, 0x80	; 128
    42e2:	5f e3       	ldi	r21, 0x3F	; 63
    42e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    42e8:	88 23       	and	r24, r24
    42ea:	44 f4       	brge	.+16     	; 0x42fc <LCD_writeChar+0x20e>
		__ticks = 1;
    42ec:	fe 01       	movw	r30, r28
    42ee:	e5 5b       	subi	r30, 0xB5	; 181
    42f0:	ff 4f       	sbci	r31, 0xFF	; 255
    42f2:	81 e0       	ldi	r24, 0x01	; 1
    42f4:	90 e0       	ldi	r25, 0x00	; 0
    42f6:	91 83       	std	Z+1, r25	; 0x01
    42f8:	80 83       	st	Z, r24
    42fa:	64 c0       	rjmp	.+200    	; 0x43c4 <LCD_writeChar+0x2d6>
	else if (__tmp > 65535)
    42fc:	fe 01       	movw	r30, r28
    42fe:	e3 5b       	subi	r30, 0xB3	; 179
    4300:	ff 4f       	sbci	r31, 0xFF	; 255
    4302:	60 81       	ld	r22, Z
    4304:	71 81       	ldd	r23, Z+1	; 0x01
    4306:	82 81       	ldd	r24, Z+2	; 0x02
    4308:	93 81       	ldd	r25, Z+3	; 0x03
    430a:	20 e0       	ldi	r18, 0x00	; 0
    430c:	3f ef       	ldi	r19, 0xFF	; 255
    430e:	4f e7       	ldi	r20, 0x7F	; 127
    4310:	57 e4       	ldi	r21, 0x47	; 71
    4312:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4316:	18 16       	cp	r1, r24
    4318:	0c f0       	brlt	.+2      	; 0x431c <LCD_writeChar+0x22e>
    431a:	43 c0       	rjmp	.+134    	; 0x43a2 <LCD_writeChar+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    431c:	fe 01       	movw	r30, r28
    431e:	ef 5a       	subi	r30, 0xAF	; 175
    4320:	ff 4f       	sbci	r31, 0xFF	; 255
    4322:	60 81       	ld	r22, Z
    4324:	71 81       	ldd	r23, Z+1	; 0x01
    4326:	82 81       	ldd	r24, Z+2	; 0x02
    4328:	93 81       	ldd	r25, Z+3	; 0x03
    432a:	20 e0       	ldi	r18, 0x00	; 0
    432c:	30 e0       	ldi	r19, 0x00	; 0
    432e:	40 e2       	ldi	r20, 0x20	; 32
    4330:	51 e4       	ldi	r21, 0x41	; 65
    4332:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4336:	dc 01       	movw	r26, r24
    4338:	cb 01       	movw	r24, r22
    433a:	8e 01       	movw	r16, r28
    433c:	05 5b       	subi	r16, 0xB5	; 181
    433e:	1f 4f       	sbci	r17, 0xFF	; 255
    4340:	bc 01       	movw	r22, r24
    4342:	cd 01       	movw	r24, r26
    4344:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4348:	dc 01       	movw	r26, r24
    434a:	cb 01       	movw	r24, r22
    434c:	f8 01       	movw	r30, r16
    434e:	91 83       	std	Z+1, r25	; 0x01
    4350:	80 83       	st	Z, r24
    4352:	1f c0       	rjmp	.+62     	; 0x4392 <LCD_writeChar+0x2a4>
    4354:	fe 01       	movw	r30, r28
    4356:	e7 5b       	subi	r30, 0xB7	; 183
    4358:	ff 4f       	sbci	r31, 0xFF	; 255
    435a:	88 ec       	ldi	r24, 0xC8	; 200
    435c:	90 e0       	ldi	r25, 0x00	; 0
    435e:	91 83       	std	Z+1, r25	; 0x01
    4360:	80 83       	st	Z, r24
    4362:	fe 01       	movw	r30, r28
    4364:	e7 5b       	subi	r30, 0xB7	; 183
    4366:	ff 4f       	sbci	r31, 0xFF	; 255
    4368:	80 81       	ld	r24, Z
    436a:	91 81       	ldd	r25, Z+1	; 0x01
    436c:	01 97       	sbiw	r24, 0x01	; 1
    436e:	f1 f7       	brne	.-4      	; 0x436c <LCD_writeChar+0x27e>
    4370:	fe 01       	movw	r30, r28
    4372:	e7 5b       	subi	r30, 0xB7	; 183
    4374:	ff 4f       	sbci	r31, 0xFF	; 255
    4376:	91 83       	std	Z+1, r25	; 0x01
    4378:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    437a:	de 01       	movw	r26, r28
    437c:	a5 5b       	subi	r26, 0xB5	; 181
    437e:	bf 4f       	sbci	r27, 0xFF	; 255
    4380:	fe 01       	movw	r30, r28
    4382:	e5 5b       	subi	r30, 0xB5	; 181
    4384:	ff 4f       	sbci	r31, 0xFF	; 255
    4386:	80 81       	ld	r24, Z
    4388:	91 81       	ldd	r25, Z+1	; 0x01
    438a:	01 97       	sbiw	r24, 0x01	; 1
    438c:	11 96       	adiw	r26, 0x01	; 1
    438e:	9c 93       	st	X, r25
    4390:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4392:	fe 01       	movw	r30, r28
    4394:	e5 5b       	subi	r30, 0xB5	; 181
    4396:	ff 4f       	sbci	r31, 0xFF	; 255
    4398:	80 81       	ld	r24, Z
    439a:	91 81       	ldd	r25, Z+1	; 0x01
    439c:	00 97       	sbiw	r24, 0x00	; 0
    439e:	d1 f6       	brne	.-76     	; 0x4354 <LCD_writeChar+0x266>
    43a0:	27 c0       	rjmp	.+78     	; 0x43f0 <LCD_writeChar+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43a2:	8e 01       	movw	r16, r28
    43a4:	05 5b       	subi	r16, 0xB5	; 181
    43a6:	1f 4f       	sbci	r17, 0xFF	; 255
    43a8:	fe 01       	movw	r30, r28
    43aa:	e3 5b       	subi	r30, 0xB3	; 179
    43ac:	ff 4f       	sbci	r31, 0xFF	; 255
    43ae:	60 81       	ld	r22, Z
    43b0:	71 81       	ldd	r23, Z+1	; 0x01
    43b2:	82 81       	ldd	r24, Z+2	; 0x02
    43b4:	93 81       	ldd	r25, Z+3	; 0x03
    43b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43ba:	dc 01       	movw	r26, r24
    43bc:	cb 01       	movw	r24, r22
    43be:	f8 01       	movw	r30, r16
    43c0:	91 83       	std	Z+1, r25	; 0x01
    43c2:	80 83       	st	Z, r24
    43c4:	de 01       	movw	r26, r28
    43c6:	a9 5b       	subi	r26, 0xB9	; 185
    43c8:	bf 4f       	sbci	r27, 0xFF	; 255
    43ca:	fe 01       	movw	r30, r28
    43cc:	e5 5b       	subi	r30, 0xB5	; 181
    43ce:	ff 4f       	sbci	r31, 0xFF	; 255
    43d0:	80 81       	ld	r24, Z
    43d2:	91 81       	ldd	r25, Z+1	; 0x01
    43d4:	8d 93       	st	X+, r24
    43d6:	9c 93       	st	X, r25
    43d8:	fe 01       	movw	r30, r28
    43da:	e9 5b       	subi	r30, 0xB9	; 185
    43dc:	ff 4f       	sbci	r31, 0xFF	; 255
    43de:	80 81       	ld	r24, Z
    43e0:	91 81       	ldd	r25, Z+1	; 0x01
    43e2:	01 97       	sbiw	r24, 0x01	; 1
    43e4:	f1 f7       	brne	.-4      	; 0x43e2 <LCD_writeChar+0x2f4>
    43e6:	fe 01       	movw	r30, r28
    43e8:	e9 5b       	subi	r30, 0xB9	; 185
    43ea:	ff 4f       	sbci	r31, 0xFF	; 255
    43ec:	91 83       	std	Z+1, r25	; 0x01
    43ee:	80 83       	st	Z, r24

			_delay_ms(1);

		#else

			GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN4 , GET_BIT(ch,4) );
    43f0:	fe 01       	movw	r30, r28
    43f2:	ed 59       	subi	r30, 0x9D	; 157
    43f4:	ff 4f       	sbci	r31, 0xFF	; 255
    43f6:	80 81       	ld	r24, Z
    43f8:	88 2f       	mov	r24, r24
    43fa:	90 e0       	ldi	r25, 0x00	; 0
    43fc:	80 71       	andi	r24, 0x10	; 16
    43fe:	90 70       	andi	r25, 0x00	; 0
    4400:	95 95       	asr	r25
    4402:	87 95       	ror	r24
    4404:	95 95       	asr	r25
    4406:	87 95       	ror	r24
    4408:	95 95       	asr	r25
    440a:	87 95       	ror	r24
    440c:	95 95       	asr	r25
    440e:	87 95       	ror	r24
    4410:	98 2f       	mov	r25, r24
    4412:	82 e0       	ldi	r24, 0x02	; 2
    4414:	64 e0       	ldi	r22, 0x04	; 4
    4416:	49 2f       	mov	r20, r25
    4418:	0e 94 01 17 	call	0x2e02	; 0x2e02 <GPIO_writePin>
			GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN5 , GET_BIT(ch,5) );
    441c:	fe 01       	movw	r30, r28
    441e:	ed 59       	subi	r30, 0x9D	; 157
    4420:	ff 4f       	sbci	r31, 0xFF	; 255
    4422:	80 81       	ld	r24, Z
    4424:	88 2f       	mov	r24, r24
    4426:	90 e0       	ldi	r25, 0x00	; 0
    4428:	80 72       	andi	r24, 0x20	; 32
    442a:	90 70       	andi	r25, 0x00	; 0
    442c:	95 95       	asr	r25
    442e:	87 95       	ror	r24
    4430:	95 95       	asr	r25
    4432:	87 95       	ror	r24
    4434:	95 95       	asr	r25
    4436:	87 95       	ror	r24
    4438:	95 95       	asr	r25
    443a:	87 95       	ror	r24
    443c:	95 95       	asr	r25
    443e:	87 95       	ror	r24
    4440:	98 2f       	mov	r25, r24
    4442:	82 e0       	ldi	r24, 0x02	; 2
    4444:	65 e0       	ldi	r22, 0x05	; 5
    4446:	49 2f       	mov	r20, r25
    4448:	0e 94 01 17 	call	0x2e02	; 0x2e02 <GPIO_writePin>
			GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN6 , GET_BIT(ch,6) );
    444c:	fe 01       	movw	r30, r28
    444e:	ed 59       	subi	r30, 0x9D	; 157
    4450:	ff 4f       	sbci	r31, 0xFF	; 255
    4452:	80 81       	ld	r24, Z
    4454:	88 2f       	mov	r24, r24
    4456:	90 e0       	ldi	r25, 0x00	; 0
    4458:	80 74       	andi	r24, 0x40	; 64
    445a:	90 70       	andi	r25, 0x00	; 0
    445c:	08 2e       	mov	r0, r24
    445e:	89 2f       	mov	r24, r25
    4460:	00 0c       	add	r0, r0
    4462:	88 1f       	adc	r24, r24
    4464:	99 0b       	sbc	r25, r25
    4466:	00 0c       	add	r0, r0
    4468:	88 1f       	adc	r24, r24
    446a:	99 1f       	adc	r25, r25
    446c:	98 2f       	mov	r25, r24
    446e:	82 e0       	ldi	r24, 0x02	; 2
    4470:	66 e0       	ldi	r22, 0x06	; 6
    4472:	49 2f       	mov	r20, r25
    4474:	0e 94 01 17 	call	0x2e02	; 0x2e02 <GPIO_writePin>
			GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN7 , GET_BIT(ch,7) );
    4478:	fe 01       	movw	r30, r28
    447a:	ed 59       	subi	r30, 0x9D	; 157
    447c:	ff 4f       	sbci	r31, 0xFF	; 255
    447e:	80 81       	ld	r24, Z
    4480:	98 2f       	mov	r25, r24
    4482:	99 1f       	adc	r25, r25
    4484:	99 27       	eor	r25, r25
    4486:	99 1f       	adc	r25, r25
    4488:	82 e0       	ldi	r24, 0x02	; 2
    448a:	67 e0       	ldi	r22, 0x07	; 7
    448c:	49 2f       	mov	r20, r25
    448e:	0e 94 01 17 	call	0x2e02	; 0x2e02 <GPIO_writePin>
    4492:	fe 01       	movw	r30, r28
    4494:	ed 5b       	subi	r30, 0xBD	; 189
    4496:	ff 4f       	sbci	r31, 0xFF	; 255
    4498:	80 e0       	ldi	r24, 0x00	; 0
    449a:	90 e0       	ldi	r25, 0x00	; 0
    449c:	a0 e8       	ldi	r26, 0x80	; 128
    449e:	bf e3       	ldi	r27, 0x3F	; 63
    44a0:	80 83       	st	Z, r24
    44a2:	91 83       	std	Z+1, r25	; 0x01
    44a4:	a2 83       	std	Z+2, r26	; 0x02
    44a6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44a8:	8e 01       	movw	r16, r28
    44aa:	01 5c       	subi	r16, 0xC1	; 193
    44ac:	1f 4f       	sbci	r17, 0xFF	; 255
    44ae:	fe 01       	movw	r30, r28
    44b0:	ed 5b       	subi	r30, 0xBD	; 189
    44b2:	ff 4f       	sbci	r31, 0xFF	; 255
    44b4:	60 81       	ld	r22, Z
    44b6:	71 81       	ldd	r23, Z+1	; 0x01
    44b8:	82 81       	ldd	r24, Z+2	; 0x02
    44ba:	93 81       	ldd	r25, Z+3	; 0x03
    44bc:	20 e0       	ldi	r18, 0x00	; 0
    44be:	30 e0       	ldi	r19, 0x00	; 0
    44c0:	4a ef       	ldi	r20, 0xFA	; 250
    44c2:	54 e4       	ldi	r21, 0x44	; 68
    44c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44c8:	dc 01       	movw	r26, r24
    44ca:	cb 01       	movw	r24, r22
    44cc:	f8 01       	movw	r30, r16
    44ce:	80 83       	st	Z, r24
    44d0:	91 83       	std	Z+1, r25	; 0x01
    44d2:	a2 83       	std	Z+2, r26	; 0x02
    44d4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    44d6:	fe 01       	movw	r30, r28
    44d8:	ff 96       	adiw	r30, 0x3f	; 63
    44da:	60 81       	ld	r22, Z
    44dc:	71 81       	ldd	r23, Z+1	; 0x01
    44de:	82 81       	ldd	r24, Z+2	; 0x02
    44e0:	93 81       	ldd	r25, Z+3	; 0x03
    44e2:	20 e0       	ldi	r18, 0x00	; 0
    44e4:	30 e0       	ldi	r19, 0x00	; 0
    44e6:	40 e8       	ldi	r20, 0x80	; 128
    44e8:	5f e3       	ldi	r21, 0x3F	; 63
    44ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    44ee:	88 23       	and	r24, r24
    44f0:	2c f4       	brge	.+10     	; 0x44fc <LCD_writeChar+0x40e>
		__ticks = 1;
    44f2:	81 e0       	ldi	r24, 0x01	; 1
    44f4:	90 e0       	ldi	r25, 0x00	; 0
    44f6:	9e af       	std	Y+62, r25	; 0x3e
    44f8:	8d af       	std	Y+61, r24	; 0x3d
    44fa:	46 c0       	rjmp	.+140    	; 0x4588 <LCD_writeChar+0x49a>
	else if (__tmp > 65535)
    44fc:	fe 01       	movw	r30, r28
    44fe:	ff 96       	adiw	r30, 0x3f	; 63
    4500:	60 81       	ld	r22, Z
    4502:	71 81       	ldd	r23, Z+1	; 0x01
    4504:	82 81       	ldd	r24, Z+2	; 0x02
    4506:	93 81       	ldd	r25, Z+3	; 0x03
    4508:	20 e0       	ldi	r18, 0x00	; 0
    450a:	3f ef       	ldi	r19, 0xFF	; 255
    450c:	4f e7       	ldi	r20, 0x7F	; 127
    450e:	57 e4       	ldi	r21, 0x47	; 71
    4510:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4514:	18 16       	cp	r1, r24
    4516:	64 f5       	brge	.+88     	; 0x4570 <LCD_writeChar+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4518:	fe 01       	movw	r30, r28
    451a:	ed 5b       	subi	r30, 0xBD	; 189
    451c:	ff 4f       	sbci	r31, 0xFF	; 255
    451e:	60 81       	ld	r22, Z
    4520:	71 81       	ldd	r23, Z+1	; 0x01
    4522:	82 81       	ldd	r24, Z+2	; 0x02
    4524:	93 81       	ldd	r25, Z+3	; 0x03
    4526:	20 e0       	ldi	r18, 0x00	; 0
    4528:	30 e0       	ldi	r19, 0x00	; 0
    452a:	40 e2       	ldi	r20, 0x20	; 32
    452c:	51 e4       	ldi	r21, 0x41	; 65
    452e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4532:	dc 01       	movw	r26, r24
    4534:	cb 01       	movw	r24, r22
    4536:	bc 01       	movw	r22, r24
    4538:	cd 01       	movw	r24, r26
    453a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    453e:	dc 01       	movw	r26, r24
    4540:	cb 01       	movw	r24, r22
    4542:	9e af       	std	Y+62, r25	; 0x3e
    4544:	8d af       	std	Y+61, r24	; 0x3d
    4546:	0f c0       	rjmp	.+30     	; 0x4566 <LCD_writeChar+0x478>
    4548:	88 ec       	ldi	r24, 0xC8	; 200
    454a:	90 e0       	ldi	r25, 0x00	; 0
    454c:	9c af       	std	Y+60, r25	; 0x3c
    454e:	8b af       	std	Y+59, r24	; 0x3b
    4550:	8b ad       	ldd	r24, Y+59	; 0x3b
    4552:	9c ad       	ldd	r25, Y+60	; 0x3c
    4554:	01 97       	sbiw	r24, 0x01	; 1
    4556:	f1 f7       	brne	.-4      	; 0x4554 <LCD_writeChar+0x466>
    4558:	9c af       	std	Y+60, r25	; 0x3c
    455a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    455c:	8d ad       	ldd	r24, Y+61	; 0x3d
    455e:	9e ad       	ldd	r25, Y+62	; 0x3e
    4560:	01 97       	sbiw	r24, 0x01	; 1
    4562:	9e af       	std	Y+62, r25	; 0x3e
    4564:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4566:	8d ad       	ldd	r24, Y+61	; 0x3d
    4568:	9e ad       	ldd	r25, Y+62	; 0x3e
    456a:	00 97       	sbiw	r24, 0x00	; 0
    456c:	69 f7       	brne	.-38     	; 0x4548 <LCD_writeChar+0x45a>
    456e:	16 c0       	rjmp	.+44     	; 0x459c <LCD_writeChar+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4570:	fe 01       	movw	r30, r28
    4572:	ff 96       	adiw	r30, 0x3f	; 63
    4574:	60 81       	ld	r22, Z
    4576:	71 81       	ldd	r23, Z+1	; 0x01
    4578:	82 81       	ldd	r24, Z+2	; 0x02
    457a:	93 81       	ldd	r25, Z+3	; 0x03
    457c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4580:	dc 01       	movw	r26, r24
    4582:	cb 01       	movw	r24, r22
    4584:	9e af       	std	Y+62, r25	; 0x3e
    4586:	8d af       	std	Y+61, r24	; 0x3d
    4588:	8d ad       	ldd	r24, Y+61	; 0x3d
    458a:	9e ad       	ldd	r25, Y+62	; 0x3e
    458c:	9a af       	std	Y+58, r25	; 0x3a
    458e:	89 af       	std	Y+57, r24	; 0x39
    4590:	89 ad       	ldd	r24, Y+57	; 0x39
    4592:	9a ad       	ldd	r25, Y+58	; 0x3a
    4594:	01 97       	sbiw	r24, 0x01	; 1
    4596:	f1 f7       	brne	.-4      	; 0x4594 <LCD_writeChar+0x4a6>
    4598:	9a af       	std	Y+58, r25	; 0x3a
    459a:	89 af       	std	Y+57, r24	; 0x39

			_delay_ms(1);
			GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, LOGIC_LOW); /*write 0 in enable pin to make falling edge*/
    459c:	83 e0       	ldi	r24, 0x03	; 3
    459e:	63 e0       	ldi	r22, 0x03	; 3
    45a0:	40 e0       	ldi	r20, 0x00	; 0
    45a2:	0e 94 01 17 	call	0x2e02	; 0x2e02 <GPIO_writePin>
    45a6:	80 e0       	ldi	r24, 0x00	; 0
    45a8:	90 e0       	ldi	r25, 0x00	; 0
    45aa:	a0 e8       	ldi	r26, 0x80	; 128
    45ac:	bf e3       	ldi	r27, 0x3F	; 63
    45ae:	8d ab       	std	Y+53, r24	; 0x35
    45b0:	9e ab       	std	Y+54, r25	; 0x36
    45b2:	af ab       	std	Y+55, r26	; 0x37
    45b4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45b6:	6d a9       	ldd	r22, Y+53	; 0x35
    45b8:	7e a9       	ldd	r23, Y+54	; 0x36
    45ba:	8f a9       	ldd	r24, Y+55	; 0x37
    45bc:	98 ad       	ldd	r25, Y+56	; 0x38
    45be:	20 e0       	ldi	r18, 0x00	; 0
    45c0:	30 e0       	ldi	r19, 0x00	; 0
    45c2:	4a ef       	ldi	r20, 0xFA	; 250
    45c4:	54 e4       	ldi	r21, 0x44	; 68
    45c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45ca:	dc 01       	movw	r26, r24
    45cc:	cb 01       	movw	r24, r22
    45ce:	89 ab       	std	Y+49, r24	; 0x31
    45d0:	9a ab       	std	Y+50, r25	; 0x32
    45d2:	ab ab       	std	Y+51, r26	; 0x33
    45d4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    45d6:	69 a9       	ldd	r22, Y+49	; 0x31
    45d8:	7a a9       	ldd	r23, Y+50	; 0x32
    45da:	8b a9       	ldd	r24, Y+51	; 0x33
    45dc:	9c a9       	ldd	r25, Y+52	; 0x34
    45de:	20 e0       	ldi	r18, 0x00	; 0
    45e0:	30 e0       	ldi	r19, 0x00	; 0
    45e2:	40 e8       	ldi	r20, 0x80	; 128
    45e4:	5f e3       	ldi	r21, 0x3F	; 63
    45e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    45ea:	88 23       	and	r24, r24
    45ec:	2c f4       	brge	.+10     	; 0x45f8 <LCD_writeChar+0x50a>
		__ticks = 1;
    45ee:	81 e0       	ldi	r24, 0x01	; 1
    45f0:	90 e0       	ldi	r25, 0x00	; 0
    45f2:	98 ab       	std	Y+48, r25	; 0x30
    45f4:	8f a7       	std	Y+47, r24	; 0x2f
    45f6:	3f c0       	rjmp	.+126    	; 0x4676 <LCD_writeChar+0x588>
	else if (__tmp > 65535)
    45f8:	69 a9       	ldd	r22, Y+49	; 0x31
    45fa:	7a a9       	ldd	r23, Y+50	; 0x32
    45fc:	8b a9       	ldd	r24, Y+51	; 0x33
    45fe:	9c a9       	ldd	r25, Y+52	; 0x34
    4600:	20 e0       	ldi	r18, 0x00	; 0
    4602:	3f ef       	ldi	r19, 0xFF	; 255
    4604:	4f e7       	ldi	r20, 0x7F	; 127
    4606:	57 e4       	ldi	r21, 0x47	; 71
    4608:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    460c:	18 16       	cp	r1, r24
    460e:	4c f5       	brge	.+82     	; 0x4662 <LCD_writeChar+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4610:	6d a9       	ldd	r22, Y+53	; 0x35
    4612:	7e a9       	ldd	r23, Y+54	; 0x36
    4614:	8f a9       	ldd	r24, Y+55	; 0x37
    4616:	98 ad       	ldd	r25, Y+56	; 0x38
    4618:	20 e0       	ldi	r18, 0x00	; 0
    461a:	30 e0       	ldi	r19, 0x00	; 0
    461c:	40 e2       	ldi	r20, 0x20	; 32
    461e:	51 e4       	ldi	r21, 0x41	; 65
    4620:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4624:	dc 01       	movw	r26, r24
    4626:	cb 01       	movw	r24, r22
    4628:	bc 01       	movw	r22, r24
    462a:	cd 01       	movw	r24, r26
    462c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4630:	dc 01       	movw	r26, r24
    4632:	cb 01       	movw	r24, r22
    4634:	98 ab       	std	Y+48, r25	; 0x30
    4636:	8f a7       	std	Y+47, r24	; 0x2f
    4638:	0f c0       	rjmp	.+30     	; 0x4658 <LCD_writeChar+0x56a>
    463a:	88 ec       	ldi	r24, 0xC8	; 200
    463c:	90 e0       	ldi	r25, 0x00	; 0
    463e:	9e a7       	std	Y+46, r25	; 0x2e
    4640:	8d a7       	std	Y+45, r24	; 0x2d
    4642:	8d a5       	ldd	r24, Y+45	; 0x2d
    4644:	9e a5       	ldd	r25, Y+46	; 0x2e
    4646:	01 97       	sbiw	r24, 0x01	; 1
    4648:	f1 f7       	brne	.-4      	; 0x4646 <LCD_writeChar+0x558>
    464a:	9e a7       	std	Y+46, r25	; 0x2e
    464c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    464e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4650:	98 a9       	ldd	r25, Y+48	; 0x30
    4652:	01 97       	sbiw	r24, 0x01	; 1
    4654:	98 ab       	std	Y+48, r25	; 0x30
    4656:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4658:	8f a5       	ldd	r24, Y+47	; 0x2f
    465a:	98 a9       	ldd	r25, Y+48	; 0x30
    465c:	00 97       	sbiw	r24, 0x00	; 0
    465e:	69 f7       	brne	.-38     	; 0x463a <LCD_writeChar+0x54c>
    4660:	14 c0       	rjmp	.+40     	; 0x468a <LCD_writeChar+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4662:	69 a9       	ldd	r22, Y+49	; 0x31
    4664:	7a a9       	ldd	r23, Y+50	; 0x32
    4666:	8b a9       	ldd	r24, Y+51	; 0x33
    4668:	9c a9       	ldd	r25, Y+52	; 0x34
    466a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    466e:	dc 01       	movw	r26, r24
    4670:	cb 01       	movw	r24, r22
    4672:	98 ab       	std	Y+48, r25	; 0x30
    4674:	8f a7       	std	Y+47, r24	; 0x2f
    4676:	8f a5       	ldd	r24, Y+47	; 0x2f
    4678:	98 a9       	ldd	r25, Y+48	; 0x30
    467a:	9c a7       	std	Y+44, r25	; 0x2c
    467c:	8b a7       	std	Y+43, r24	; 0x2b
    467e:	8b a5       	ldd	r24, Y+43	; 0x2b
    4680:	9c a5       	ldd	r25, Y+44	; 0x2c
    4682:	01 97       	sbiw	r24, 0x01	; 1
    4684:	f1 f7       	brne	.-4      	; 0x4682 <LCD_writeChar+0x594>
    4686:	9c a7       	std	Y+44, r25	; 0x2c
    4688:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1);
			GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, LOGIC_HIGH); /*write 1 in enable pin */
    468a:	83 e0       	ldi	r24, 0x03	; 3
    468c:	63 e0       	ldi	r22, 0x03	; 3
    468e:	41 e0       	ldi	r20, 0x01	; 1
    4690:	0e 94 01 17 	call	0x2e02	; 0x2e02 <GPIO_writePin>
    4694:	80 e0       	ldi	r24, 0x00	; 0
    4696:	90 e0       	ldi	r25, 0x00	; 0
    4698:	a0 e8       	ldi	r26, 0x80	; 128
    469a:	bf e3       	ldi	r27, 0x3F	; 63
    469c:	8f a3       	std	Y+39, r24	; 0x27
    469e:	98 a7       	std	Y+40, r25	; 0x28
    46a0:	a9 a7       	std	Y+41, r26	; 0x29
    46a2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46a4:	6f a1       	ldd	r22, Y+39	; 0x27
    46a6:	78 a5       	ldd	r23, Y+40	; 0x28
    46a8:	89 a5       	ldd	r24, Y+41	; 0x29
    46aa:	9a a5       	ldd	r25, Y+42	; 0x2a
    46ac:	20 e0       	ldi	r18, 0x00	; 0
    46ae:	30 e0       	ldi	r19, 0x00	; 0
    46b0:	4a ef       	ldi	r20, 0xFA	; 250
    46b2:	54 e4       	ldi	r21, 0x44	; 68
    46b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46b8:	dc 01       	movw	r26, r24
    46ba:	cb 01       	movw	r24, r22
    46bc:	8b a3       	std	Y+35, r24	; 0x23
    46be:	9c a3       	std	Y+36, r25	; 0x24
    46c0:	ad a3       	std	Y+37, r26	; 0x25
    46c2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    46c4:	6b a1       	ldd	r22, Y+35	; 0x23
    46c6:	7c a1       	ldd	r23, Y+36	; 0x24
    46c8:	8d a1       	ldd	r24, Y+37	; 0x25
    46ca:	9e a1       	ldd	r25, Y+38	; 0x26
    46cc:	20 e0       	ldi	r18, 0x00	; 0
    46ce:	30 e0       	ldi	r19, 0x00	; 0
    46d0:	40 e8       	ldi	r20, 0x80	; 128
    46d2:	5f e3       	ldi	r21, 0x3F	; 63
    46d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    46d8:	88 23       	and	r24, r24
    46da:	2c f4       	brge	.+10     	; 0x46e6 <LCD_writeChar+0x5f8>
		__ticks = 1;
    46dc:	81 e0       	ldi	r24, 0x01	; 1
    46de:	90 e0       	ldi	r25, 0x00	; 0
    46e0:	9a a3       	std	Y+34, r25	; 0x22
    46e2:	89 a3       	std	Y+33, r24	; 0x21
    46e4:	3f c0       	rjmp	.+126    	; 0x4764 <LCD_writeChar+0x676>
	else if (__tmp > 65535)
    46e6:	6b a1       	ldd	r22, Y+35	; 0x23
    46e8:	7c a1       	ldd	r23, Y+36	; 0x24
    46ea:	8d a1       	ldd	r24, Y+37	; 0x25
    46ec:	9e a1       	ldd	r25, Y+38	; 0x26
    46ee:	20 e0       	ldi	r18, 0x00	; 0
    46f0:	3f ef       	ldi	r19, 0xFF	; 255
    46f2:	4f e7       	ldi	r20, 0x7F	; 127
    46f4:	57 e4       	ldi	r21, 0x47	; 71
    46f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    46fa:	18 16       	cp	r1, r24
    46fc:	4c f5       	brge	.+82     	; 0x4750 <LCD_writeChar+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46fe:	6f a1       	ldd	r22, Y+39	; 0x27
    4700:	78 a5       	ldd	r23, Y+40	; 0x28
    4702:	89 a5       	ldd	r24, Y+41	; 0x29
    4704:	9a a5       	ldd	r25, Y+42	; 0x2a
    4706:	20 e0       	ldi	r18, 0x00	; 0
    4708:	30 e0       	ldi	r19, 0x00	; 0
    470a:	40 e2       	ldi	r20, 0x20	; 32
    470c:	51 e4       	ldi	r21, 0x41	; 65
    470e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4712:	dc 01       	movw	r26, r24
    4714:	cb 01       	movw	r24, r22
    4716:	bc 01       	movw	r22, r24
    4718:	cd 01       	movw	r24, r26
    471a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    471e:	dc 01       	movw	r26, r24
    4720:	cb 01       	movw	r24, r22
    4722:	9a a3       	std	Y+34, r25	; 0x22
    4724:	89 a3       	std	Y+33, r24	; 0x21
    4726:	0f c0       	rjmp	.+30     	; 0x4746 <LCD_writeChar+0x658>
    4728:	88 ec       	ldi	r24, 0xC8	; 200
    472a:	90 e0       	ldi	r25, 0x00	; 0
    472c:	98 a3       	std	Y+32, r25	; 0x20
    472e:	8f 8f       	std	Y+31, r24	; 0x1f
    4730:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4732:	98 a1       	ldd	r25, Y+32	; 0x20
    4734:	01 97       	sbiw	r24, 0x01	; 1
    4736:	f1 f7       	brne	.-4      	; 0x4734 <LCD_writeChar+0x646>
    4738:	98 a3       	std	Y+32, r25	; 0x20
    473a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    473c:	89 a1       	ldd	r24, Y+33	; 0x21
    473e:	9a a1       	ldd	r25, Y+34	; 0x22
    4740:	01 97       	sbiw	r24, 0x01	; 1
    4742:	9a a3       	std	Y+34, r25	; 0x22
    4744:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4746:	89 a1       	ldd	r24, Y+33	; 0x21
    4748:	9a a1       	ldd	r25, Y+34	; 0x22
    474a:	00 97       	sbiw	r24, 0x00	; 0
    474c:	69 f7       	brne	.-38     	; 0x4728 <LCD_writeChar+0x63a>
    474e:	14 c0       	rjmp	.+40     	; 0x4778 <LCD_writeChar+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4750:	6b a1       	ldd	r22, Y+35	; 0x23
    4752:	7c a1       	ldd	r23, Y+36	; 0x24
    4754:	8d a1       	ldd	r24, Y+37	; 0x25
    4756:	9e a1       	ldd	r25, Y+38	; 0x26
    4758:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    475c:	dc 01       	movw	r26, r24
    475e:	cb 01       	movw	r24, r22
    4760:	9a a3       	std	Y+34, r25	; 0x22
    4762:	89 a3       	std	Y+33, r24	; 0x21
    4764:	89 a1       	ldd	r24, Y+33	; 0x21
    4766:	9a a1       	ldd	r25, Y+34	; 0x22
    4768:	9e 8f       	std	Y+30, r25	; 0x1e
    476a:	8d 8f       	std	Y+29, r24	; 0x1d
    476c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    476e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4770:	01 97       	sbiw	r24, 0x01	; 1
    4772:	f1 f7       	brne	.-4      	; 0x4770 <LCD_writeChar+0x682>
    4774:	9e 8f       	std	Y+30, r25	; 0x1e
    4776:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(1);

			GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN4 , GET_BIT(ch,0) );
    4778:	fe 01       	movw	r30, r28
    477a:	ed 59       	subi	r30, 0x9D	; 157
    477c:	ff 4f       	sbci	r31, 0xFF	; 255
    477e:	80 81       	ld	r24, Z
    4780:	98 2f       	mov	r25, r24
    4782:	91 70       	andi	r25, 0x01	; 1
    4784:	82 e0       	ldi	r24, 0x02	; 2
    4786:	64 e0       	ldi	r22, 0x04	; 4
    4788:	49 2f       	mov	r20, r25
    478a:	0e 94 01 17 	call	0x2e02	; 0x2e02 <GPIO_writePin>
			GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN5 , GET_BIT(ch,1) );
    478e:	fe 01       	movw	r30, r28
    4790:	ed 59       	subi	r30, 0x9D	; 157
    4792:	ff 4f       	sbci	r31, 0xFF	; 255
    4794:	80 81       	ld	r24, Z
    4796:	88 2f       	mov	r24, r24
    4798:	90 e0       	ldi	r25, 0x00	; 0
    479a:	82 70       	andi	r24, 0x02	; 2
    479c:	90 70       	andi	r25, 0x00	; 0
    479e:	95 95       	asr	r25
    47a0:	87 95       	ror	r24
    47a2:	98 2f       	mov	r25, r24
    47a4:	82 e0       	ldi	r24, 0x02	; 2
    47a6:	65 e0       	ldi	r22, 0x05	; 5
    47a8:	49 2f       	mov	r20, r25
    47aa:	0e 94 01 17 	call	0x2e02	; 0x2e02 <GPIO_writePin>
			GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN6 , GET_BIT(ch,2) );
    47ae:	fe 01       	movw	r30, r28
    47b0:	ed 59       	subi	r30, 0x9D	; 157
    47b2:	ff 4f       	sbci	r31, 0xFF	; 255
    47b4:	80 81       	ld	r24, Z
    47b6:	88 2f       	mov	r24, r24
    47b8:	90 e0       	ldi	r25, 0x00	; 0
    47ba:	84 70       	andi	r24, 0x04	; 4
    47bc:	90 70       	andi	r25, 0x00	; 0
    47be:	95 95       	asr	r25
    47c0:	87 95       	ror	r24
    47c2:	95 95       	asr	r25
    47c4:	87 95       	ror	r24
    47c6:	98 2f       	mov	r25, r24
    47c8:	82 e0       	ldi	r24, 0x02	; 2
    47ca:	66 e0       	ldi	r22, 0x06	; 6
    47cc:	49 2f       	mov	r20, r25
    47ce:	0e 94 01 17 	call	0x2e02	; 0x2e02 <GPIO_writePin>
			GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN7 , GET_BIT(ch,3) );
    47d2:	fe 01       	movw	r30, r28
    47d4:	ed 59       	subi	r30, 0x9D	; 157
    47d6:	ff 4f       	sbci	r31, 0xFF	; 255
    47d8:	80 81       	ld	r24, Z
    47da:	88 2f       	mov	r24, r24
    47dc:	90 e0       	ldi	r25, 0x00	; 0
    47de:	88 70       	andi	r24, 0x08	; 8
    47e0:	90 70       	andi	r25, 0x00	; 0
    47e2:	95 95       	asr	r25
    47e4:	87 95       	ror	r24
    47e6:	95 95       	asr	r25
    47e8:	87 95       	ror	r24
    47ea:	95 95       	asr	r25
    47ec:	87 95       	ror	r24
    47ee:	98 2f       	mov	r25, r24
    47f0:	82 e0       	ldi	r24, 0x02	; 2
    47f2:	67 e0       	ldi	r22, 0x07	; 7
    47f4:	49 2f       	mov	r20, r25
    47f6:	0e 94 01 17 	call	0x2e02	; 0x2e02 <GPIO_writePin>
    47fa:	80 e0       	ldi	r24, 0x00	; 0
    47fc:	90 e0       	ldi	r25, 0x00	; 0
    47fe:	a0 e8       	ldi	r26, 0x80	; 128
    4800:	bf e3       	ldi	r27, 0x3F	; 63
    4802:	89 8f       	std	Y+25, r24	; 0x19
    4804:	9a 8f       	std	Y+26, r25	; 0x1a
    4806:	ab 8f       	std	Y+27, r26	; 0x1b
    4808:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    480a:	69 8d       	ldd	r22, Y+25	; 0x19
    480c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    480e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4810:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4812:	20 e0       	ldi	r18, 0x00	; 0
    4814:	30 e0       	ldi	r19, 0x00	; 0
    4816:	4a ef       	ldi	r20, 0xFA	; 250
    4818:	54 e4       	ldi	r21, 0x44	; 68
    481a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    481e:	dc 01       	movw	r26, r24
    4820:	cb 01       	movw	r24, r22
    4822:	8d 8b       	std	Y+21, r24	; 0x15
    4824:	9e 8b       	std	Y+22, r25	; 0x16
    4826:	af 8b       	std	Y+23, r26	; 0x17
    4828:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    482a:	6d 89       	ldd	r22, Y+21	; 0x15
    482c:	7e 89       	ldd	r23, Y+22	; 0x16
    482e:	8f 89       	ldd	r24, Y+23	; 0x17
    4830:	98 8d       	ldd	r25, Y+24	; 0x18
    4832:	20 e0       	ldi	r18, 0x00	; 0
    4834:	30 e0       	ldi	r19, 0x00	; 0
    4836:	40 e8       	ldi	r20, 0x80	; 128
    4838:	5f e3       	ldi	r21, 0x3F	; 63
    483a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    483e:	88 23       	and	r24, r24
    4840:	2c f4       	brge	.+10     	; 0x484c <LCD_writeChar+0x75e>
		__ticks = 1;
    4842:	81 e0       	ldi	r24, 0x01	; 1
    4844:	90 e0       	ldi	r25, 0x00	; 0
    4846:	9c 8b       	std	Y+20, r25	; 0x14
    4848:	8b 8b       	std	Y+19, r24	; 0x13
    484a:	3f c0       	rjmp	.+126    	; 0x48ca <LCD_writeChar+0x7dc>
	else if (__tmp > 65535)
    484c:	6d 89       	ldd	r22, Y+21	; 0x15
    484e:	7e 89       	ldd	r23, Y+22	; 0x16
    4850:	8f 89       	ldd	r24, Y+23	; 0x17
    4852:	98 8d       	ldd	r25, Y+24	; 0x18
    4854:	20 e0       	ldi	r18, 0x00	; 0
    4856:	3f ef       	ldi	r19, 0xFF	; 255
    4858:	4f e7       	ldi	r20, 0x7F	; 127
    485a:	57 e4       	ldi	r21, 0x47	; 71
    485c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4860:	18 16       	cp	r1, r24
    4862:	4c f5       	brge	.+82     	; 0x48b6 <LCD_writeChar+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4864:	69 8d       	ldd	r22, Y+25	; 0x19
    4866:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4868:	8b 8d       	ldd	r24, Y+27	; 0x1b
    486a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    486c:	20 e0       	ldi	r18, 0x00	; 0
    486e:	30 e0       	ldi	r19, 0x00	; 0
    4870:	40 e2       	ldi	r20, 0x20	; 32
    4872:	51 e4       	ldi	r21, 0x41	; 65
    4874:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4878:	dc 01       	movw	r26, r24
    487a:	cb 01       	movw	r24, r22
    487c:	bc 01       	movw	r22, r24
    487e:	cd 01       	movw	r24, r26
    4880:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4884:	dc 01       	movw	r26, r24
    4886:	cb 01       	movw	r24, r22
    4888:	9c 8b       	std	Y+20, r25	; 0x14
    488a:	8b 8b       	std	Y+19, r24	; 0x13
    488c:	0f c0       	rjmp	.+30     	; 0x48ac <LCD_writeChar+0x7be>
    488e:	88 ec       	ldi	r24, 0xC8	; 200
    4890:	90 e0       	ldi	r25, 0x00	; 0
    4892:	9a 8b       	std	Y+18, r25	; 0x12
    4894:	89 8b       	std	Y+17, r24	; 0x11
    4896:	89 89       	ldd	r24, Y+17	; 0x11
    4898:	9a 89       	ldd	r25, Y+18	; 0x12
    489a:	01 97       	sbiw	r24, 0x01	; 1
    489c:	f1 f7       	brne	.-4      	; 0x489a <LCD_writeChar+0x7ac>
    489e:	9a 8b       	std	Y+18, r25	; 0x12
    48a0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48a2:	8b 89       	ldd	r24, Y+19	; 0x13
    48a4:	9c 89       	ldd	r25, Y+20	; 0x14
    48a6:	01 97       	sbiw	r24, 0x01	; 1
    48a8:	9c 8b       	std	Y+20, r25	; 0x14
    48aa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48ac:	8b 89       	ldd	r24, Y+19	; 0x13
    48ae:	9c 89       	ldd	r25, Y+20	; 0x14
    48b0:	00 97       	sbiw	r24, 0x00	; 0
    48b2:	69 f7       	brne	.-38     	; 0x488e <LCD_writeChar+0x7a0>
    48b4:	14 c0       	rjmp	.+40     	; 0x48de <LCD_writeChar+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48b6:	6d 89       	ldd	r22, Y+21	; 0x15
    48b8:	7e 89       	ldd	r23, Y+22	; 0x16
    48ba:	8f 89       	ldd	r24, Y+23	; 0x17
    48bc:	98 8d       	ldd	r25, Y+24	; 0x18
    48be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48c2:	dc 01       	movw	r26, r24
    48c4:	cb 01       	movw	r24, r22
    48c6:	9c 8b       	std	Y+20, r25	; 0x14
    48c8:	8b 8b       	std	Y+19, r24	; 0x13
    48ca:	8b 89       	ldd	r24, Y+19	; 0x13
    48cc:	9c 89       	ldd	r25, Y+20	; 0x14
    48ce:	98 8b       	std	Y+16, r25	; 0x10
    48d0:	8f 87       	std	Y+15, r24	; 0x0f
    48d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    48d4:	98 89       	ldd	r25, Y+16	; 0x10
    48d6:	01 97       	sbiw	r24, 0x01	; 1
    48d8:	f1 f7       	brne	.-4      	; 0x48d6 <LCD_writeChar+0x7e8>
    48da:	98 8b       	std	Y+16, r25	; 0x10
    48dc:	8f 87       	std	Y+15, r24	; 0x0f



		#endif

			GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, LOGIC_LOW);
    48de:	83 e0       	ldi	r24, 0x03	; 3
    48e0:	63 e0       	ldi	r22, 0x03	; 3
    48e2:	40 e0       	ldi	r20, 0x00	; 0
    48e4:	0e 94 01 17 	call	0x2e02	; 0x2e02 <GPIO_writePin>
    48e8:	80 e0       	ldi	r24, 0x00	; 0
    48ea:	90 e0       	ldi	r25, 0x00	; 0
    48ec:	a0 e8       	ldi	r26, 0x80	; 128
    48ee:	bf e3       	ldi	r27, 0x3F	; 63
    48f0:	8b 87       	std	Y+11, r24	; 0x0b
    48f2:	9c 87       	std	Y+12, r25	; 0x0c
    48f4:	ad 87       	std	Y+13, r26	; 0x0d
    48f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    48fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    48fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    48fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    4900:	20 e0       	ldi	r18, 0x00	; 0
    4902:	30 e0       	ldi	r19, 0x00	; 0
    4904:	4a ef       	ldi	r20, 0xFA	; 250
    4906:	54 e4       	ldi	r21, 0x44	; 68
    4908:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    490c:	dc 01       	movw	r26, r24
    490e:	cb 01       	movw	r24, r22
    4910:	8f 83       	std	Y+7, r24	; 0x07
    4912:	98 87       	std	Y+8, r25	; 0x08
    4914:	a9 87       	std	Y+9, r26	; 0x09
    4916:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4918:	6f 81       	ldd	r22, Y+7	; 0x07
    491a:	78 85       	ldd	r23, Y+8	; 0x08
    491c:	89 85       	ldd	r24, Y+9	; 0x09
    491e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4920:	20 e0       	ldi	r18, 0x00	; 0
    4922:	30 e0       	ldi	r19, 0x00	; 0
    4924:	40 e8       	ldi	r20, 0x80	; 128
    4926:	5f e3       	ldi	r21, 0x3F	; 63
    4928:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    492c:	88 23       	and	r24, r24
    492e:	2c f4       	brge	.+10     	; 0x493a <LCD_writeChar+0x84c>
		__ticks = 1;
    4930:	81 e0       	ldi	r24, 0x01	; 1
    4932:	90 e0       	ldi	r25, 0x00	; 0
    4934:	9e 83       	std	Y+6, r25	; 0x06
    4936:	8d 83       	std	Y+5, r24	; 0x05
    4938:	3f c0       	rjmp	.+126    	; 0x49b8 <LCD_writeChar+0x8ca>
	else if (__tmp > 65535)
    493a:	6f 81       	ldd	r22, Y+7	; 0x07
    493c:	78 85       	ldd	r23, Y+8	; 0x08
    493e:	89 85       	ldd	r24, Y+9	; 0x09
    4940:	9a 85       	ldd	r25, Y+10	; 0x0a
    4942:	20 e0       	ldi	r18, 0x00	; 0
    4944:	3f ef       	ldi	r19, 0xFF	; 255
    4946:	4f e7       	ldi	r20, 0x7F	; 127
    4948:	57 e4       	ldi	r21, 0x47	; 71
    494a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    494e:	18 16       	cp	r1, r24
    4950:	4c f5       	brge	.+82     	; 0x49a4 <LCD_writeChar+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4952:	6b 85       	ldd	r22, Y+11	; 0x0b
    4954:	7c 85       	ldd	r23, Y+12	; 0x0c
    4956:	8d 85       	ldd	r24, Y+13	; 0x0d
    4958:	9e 85       	ldd	r25, Y+14	; 0x0e
    495a:	20 e0       	ldi	r18, 0x00	; 0
    495c:	30 e0       	ldi	r19, 0x00	; 0
    495e:	40 e2       	ldi	r20, 0x20	; 32
    4960:	51 e4       	ldi	r21, 0x41	; 65
    4962:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4966:	dc 01       	movw	r26, r24
    4968:	cb 01       	movw	r24, r22
    496a:	bc 01       	movw	r22, r24
    496c:	cd 01       	movw	r24, r26
    496e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4972:	dc 01       	movw	r26, r24
    4974:	cb 01       	movw	r24, r22
    4976:	9e 83       	std	Y+6, r25	; 0x06
    4978:	8d 83       	std	Y+5, r24	; 0x05
    497a:	0f c0       	rjmp	.+30     	; 0x499a <LCD_writeChar+0x8ac>
    497c:	88 ec       	ldi	r24, 0xC8	; 200
    497e:	90 e0       	ldi	r25, 0x00	; 0
    4980:	9c 83       	std	Y+4, r25	; 0x04
    4982:	8b 83       	std	Y+3, r24	; 0x03
    4984:	8b 81       	ldd	r24, Y+3	; 0x03
    4986:	9c 81       	ldd	r25, Y+4	; 0x04
    4988:	01 97       	sbiw	r24, 0x01	; 1
    498a:	f1 f7       	brne	.-4      	; 0x4988 <LCD_writeChar+0x89a>
    498c:	9c 83       	std	Y+4, r25	; 0x04
    498e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4990:	8d 81       	ldd	r24, Y+5	; 0x05
    4992:	9e 81       	ldd	r25, Y+6	; 0x06
    4994:	01 97       	sbiw	r24, 0x01	; 1
    4996:	9e 83       	std	Y+6, r25	; 0x06
    4998:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    499a:	8d 81       	ldd	r24, Y+5	; 0x05
    499c:	9e 81       	ldd	r25, Y+6	; 0x06
    499e:	00 97       	sbiw	r24, 0x00	; 0
    49a0:	69 f7       	brne	.-38     	; 0x497c <LCD_writeChar+0x88e>
    49a2:	14 c0       	rjmp	.+40     	; 0x49cc <LCD_writeChar+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49a4:	6f 81       	ldd	r22, Y+7	; 0x07
    49a6:	78 85       	ldd	r23, Y+8	; 0x08
    49a8:	89 85       	ldd	r24, Y+9	; 0x09
    49aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    49ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49b0:	dc 01       	movw	r26, r24
    49b2:	cb 01       	movw	r24, r22
    49b4:	9e 83       	std	Y+6, r25	; 0x06
    49b6:	8d 83       	std	Y+5, r24	; 0x05
    49b8:	8d 81       	ldd	r24, Y+5	; 0x05
    49ba:	9e 81       	ldd	r25, Y+6	; 0x06
    49bc:	9a 83       	std	Y+2, r25	; 0x02
    49be:	89 83       	std	Y+1, r24	; 0x01
    49c0:	89 81       	ldd	r24, Y+1	; 0x01
    49c2:	9a 81       	ldd	r25, Y+2	; 0x02
    49c4:	01 97       	sbiw	r24, 0x01	; 1
    49c6:	f1 f7       	brne	.-4      	; 0x49c4 <LCD_writeChar+0x8d6>
    49c8:	9a 83       	std	Y+2, r25	; 0x02
    49ca:	89 83       	std	Y+1, r24	; 0x01
			/*write  0 in enable pin beacase LCD read the at falling edge of enable, so we make it 1 then 0*/

			_delay_ms(1);
}
    49cc:	cd 59       	subi	r28, 0x9D	; 157
    49ce:	df 4f       	sbci	r29, 0xFF	; 255
    49d0:	0f b6       	in	r0, 0x3f	; 63
    49d2:	f8 94       	cli
    49d4:	de bf       	out	0x3e, r29	; 62
    49d6:	0f be       	out	0x3f, r0	; 63
    49d8:	cd bf       	out	0x3d, r28	; 61
    49da:	cf 91       	pop	r28
    49dc:	df 91       	pop	r29
    49de:	1f 91       	pop	r17
    49e0:	0f 91       	pop	r16
    49e2:	08 95       	ret

000049e4 <LCD_writeString>:

void LCD_writeString(uint8 *str)
{
    49e4:	df 93       	push	r29
    49e6:	cf 93       	push	r28
    49e8:	00 d0       	rcall	.+0      	; 0x49ea <LCD_writeString+0x6>
    49ea:	00 d0       	rcall	.+0      	; 0x49ec <LCD_writeString+0x8>
    49ec:	cd b7       	in	r28, 0x3d	; 61
    49ee:	de b7       	in	r29, 0x3e	; 62
    49f0:	9c 83       	std	Y+4, r25	; 0x04
    49f2:	8b 83       	std	Y+3, r24	; 0x03
	int i=0;
    49f4:	1a 82       	std	Y+2, r1	; 0x02
    49f6:	19 82       	std	Y+1, r1	; 0x01
    49f8:	0f c0       	rjmp	.+30     	; 0x4a18 <LCD_writeString+0x34>
	while(str[i]!='\0')
	{
		LCD_writeChar(str[i]);
    49fa:	29 81       	ldd	r18, Y+1	; 0x01
    49fc:	3a 81       	ldd	r19, Y+2	; 0x02
    49fe:	8b 81       	ldd	r24, Y+3	; 0x03
    4a00:	9c 81       	ldd	r25, Y+4	; 0x04
    4a02:	fc 01       	movw	r30, r24
    4a04:	e2 0f       	add	r30, r18
    4a06:	f3 1f       	adc	r31, r19
    4a08:	80 81       	ld	r24, Z
    4a0a:	0e 94 77 20 	call	0x40ee	; 0x40ee <LCD_writeChar>
		i++;
    4a0e:	89 81       	ldd	r24, Y+1	; 0x01
    4a10:	9a 81       	ldd	r25, Y+2	; 0x02
    4a12:	01 96       	adiw	r24, 0x01	; 1
    4a14:	9a 83       	std	Y+2, r25	; 0x02
    4a16:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_writeString(uint8 *str)
{
	int i=0;
	while(str[i]!='\0')
    4a18:	29 81       	ldd	r18, Y+1	; 0x01
    4a1a:	3a 81       	ldd	r19, Y+2	; 0x02
    4a1c:	8b 81       	ldd	r24, Y+3	; 0x03
    4a1e:	9c 81       	ldd	r25, Y+4	; 0x04
    4a20:	fc 01       	movw	r30, r24
    4a22:	e2 0f       	add	r30, r18
    4a24:	f3 1f       	adc	r31, r19
    4a26:	80 81       	ld	r24, Z
    4a28:	88 23       	and	r24, r24
    4a2a:	39 f7       	brne	.-50     	; 0x49fa <LCD_writeString+0x16>
	{
		LCD_writeChar(str[i]);
		i++;
	}
}
    4a2c:	0f 90       	pop	r0
    4a2e:	0f 90       	pop	r0
    4a30:	0f 90       	pop	r0
    4a32:	0f 90       	pop	r0
    4a34:	cf 91       	pop	r28
    4a36:	df 91       	pop	r29
    4a38:	08 95       	ret

00004a3a <LCD_moveCursor>:

void LCD_moveCursor(uint8 row , uint8 col)
{
    4a3a:	df 93       	push	r29
    4a3c:	cf 93       	push	r28
    4a3e:	00 d0       	rcall	.+0      	; 0x4a40 <LCD_moveCursor+0x6>
    4a40:	00 d0       	rcall	.+0      	; 0x4a42 <LCD_moveCursor+0x8>
    4a42:	0f 92       	push	r0
    4a44:	cd b7       	in	r28, 0x3d	; 61
    4a46:	de b7       	in	r29, 0x3e	; 62
    4a48:	8a 83       	std	Y+2, r24	; 0x02
    4a4a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address=0x00;
    4a4c:	19 82       	std	Y+1, r1	; 0x01
	switch(row)
    4a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    4a50:	28 2f       	mov	r18, r24
    4a52:	30 e0       	ldi	r19, 0x00	; 0
    4a54:	3d 83       	std	Y+5, r19	; 0x05
    4a56:	2c 83       	std	Y+4, r18	; 0x04
    4a58:	8c 81       	ldd	r24, Y+4	; 0x04
    4a5a:	9d 81       	ldd	r25, Y+5	; 0x05
    4a5c:	81 30       	cpi	r24, 0x01	; 1
    4a5e:	91 05       	cpc	r25, r1
    4a60:	c1 f0       	breq	.+48     	; 0x4a92 <LCD_moveCursor+0x58>
    4a62:	2c 81       	ldd	r18, Y+4	; 0x04
    4a64:	3d 81       	ldd	r19, Y+5	; 0x05
    4a66:	22 30       	cpi	r18, 0x02	; 2
    4a68:	31 05       	cpc	r19, r1
    4a6a:	2c f4       	brge	.+10     	; 0x4a76 <LCD_moveCursor+0x3c>
    4a6c:	8c 81       	ldd	r24, Y+4	; 0x04
    4a6e:	9d 81       	ldd	r25, Y+5	; 0x05
    4a70:	00 97       	sbiw	r24, 0x00	; 0
    4a72:	61 f0       	breq	.+24     	; 0x4a8c <LCD_moveCursor+0x52>
    4a74:	19 c0       	rjmp	.+50     	; 0x4aa8 <LCD_moveCursor+0x6e>
    4a76:	2c 81       	ldd	r18, Y+4	; 0x04
    4a78:	3d 81       	ldd	r19, Y+5	; 0x05
    4a7a:	22 30       	cpi	r18, 0x02	; 2
    4a7c:	31 05       	cpc	r19, r1
    4a7e:	69 f0       	breq	.+26     	; 0x4a9a <LCD_moveCursor+0x60>
    4a80:	8c 81       	ldd	r24, Y+4	; 0x04
    4a82:	9d 81       	ldd	r25, Y+5	; 0x05
    4a84:	83 30       	cpi	r24, 0x03	; 3
    4a86:	91 05       	cpc	r25, r1
    4a88:	61 f0       	breq	.+24     	; 0x4aa2 <LCD_moveCursor+0x68>
    4a8a:	0e c0       	rjmp	.+28     	; 0x4aa8 <LCD_moveCursor+0x6e>
	{
	case 0:
		lcd_memory_address=col+0x00;
    4a8c:	8b 81       	ldd	r24, Y+3	; 0x03
    4a8e:	89 83       	std	Y+1, r24	; 0x01
    4a90:	0b c0       	rjmp	.+22     	; 0x4aa8 <LCD_moveCursor+0x6e>
		break;
	case 1:
		lcd_memory_address=col+0x40;
    4a92:	8b 81       	ldd	r24, Y+3	; 0x03
    4a94:	80 5c       	subi	r24, 0xC0	; 192
    4a96:	89 83       	std	Y+1, r24	; 0x01
    4a98:	07 c0       	rjmp	.+14     	; 0x4aa8 <LCD_moveCursor+0x6e>
		break;
	case 2: /*for 4 line LCD*/
		lcd_memory_address=col+0x10;
    4a9a:	8b 81       	ldd	r24, Y+3	; 0x03
    4a9c:	80 5f       	subi	r24, 0xF0	; 240
    4a9e:	89 83       	std	Y+1, r24	; 0x01
    4aa0:	03 c0       	rjmp	.+6      	; 0x4aa8 <LCD_moveCursor+0x6e>
		break;
	case 3:
		lcd_memory_address=col+0x50;
    4aa2:	8b 81       	ldd	r24, Y+3	; 0x03
    4aa4:	80 5b       	subi	r24, 0xB0	; 176
    4aa6:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	LCD_sendCommand(lcd_memory_address | 0x80);
    4aa8:	89 81       	ldd	r24, Y+1	; 0x01
    4aaa:	80 68       	ori	r24, 0x80	; 128
    4aac:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <LCD_sendCommand>
}
    4ab0:	0f 90       	pop	r0
    4ab2:	0f 90       	pop	r0
    4ab4:	0f 90       	pop	r0
    4ab6:	0f 90       	pop	r0
    4ab8:	0f 90       	pop	r0
    4aba:	cf 91       	pop	r28
    4abc:	df 91       	pop	r29
    4abe:	08 95       	ret

00004ac0 <LCD_integerToString>:


void LCD_integerToString(uint16 num)
{
    4ac0:	df 93       	push	r29
    4ac2:	cf 93       	push	r28
    4ac4:	cd b7       	in	r28, 0x3d	; 61
    4ac6:	de b7       	in	r29, 0x3e	; 62
    4ac8:	62 97       	sbiw	r28, 0x12	; 18
    4aca:	0f b6       	in	r0, 0x3f	; 63
    4acc:	f8 94       	cli
    4ace:	de bf       	out	0x3e, r29	; 62
    4ad0:	0f be       	out	0x3f, r0	; 63
    4ad2:	cd bf       	out	0x3d, r28	; 61
    4ad4:	9a 8b       	std	Y+18, r25	; 0x12
    4ad6:	89 8b       	std	Y+17, r24	; 0x11
	char numInAsci[16];
	itoa(num,numInAsci,10);
    4ad8:	89 89       	ldd	r24, Y+17	; 0x11
    4ada:	9a 89       	ldd	r25, Y+18	; 0x12
    4adc:	9e 01       	movw	r18, r28
    4ade:	2f 5f       	subi	r18, 0xFF	; 255
    4ae0:	3f 4f       	sbci	r19, 0xFF	; 255
    4ae2:	b9 01       	movw	r22, r18
    4ae4:	4a e0       	ldi	r20, 0x0A	; 10
    4ae6:	50 e0       	ldi	r21, 0x00	; 0
    4ae8:	0e 94 50 27 	call	0x4ea0	; 0x4ea0 <itoa>
	LCD_writeString(numInAsci);
    4aec:	ce 01       	movw	r24, r28
    4aee:	01 96       	adiw	r24, 0x01	; 1
    4af0:	0e 94 f2 24 	call	0x49e4	; 0x49e4 <LCD_writeString>
}
    4af4:	62 96       	adiw	r28, 0x12	; 18
    4af6:	0f b6       	in	r0, 0x3f	; 63
    4af8:	f8 94       	cli
    4afa:	de bf       	out	0x3e, r29	; 62
    4afc:	0f be       	out	0x3f, r0	; 63
    4afe:	cd bf       	out	0x3d, r28	; 61
    4b00:	cf 91       	pop	r28
    4b02:	df 91       	pop	r29
    4b04:	08 95       	ret

00004b06 <LCD_clearScreen>:

void LCD_clearScreen()
{
    4b06:	df 93       	push	r29
    4b08:	cf 93       	push	r28
    4b0a:	cd b7       	in	r28, 0x3d	; 61
    4b0c:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    4b0e:	81 e0       	ldi	r24, 0x01	; 1
    4b10:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <LCD_sendCommand>
}
    4b14:	cf 91       	pop	r28
    4b16:	df 91       	pop	r29
    4b18:	08 95       	ret

00004b1a <main>:

#include "application.h"


int main(void)
{
    4b1a:	df 93       	push	r29
    4b1c:	cf 93       	push	r28
    4b1e:	cd b7       	in	r28, 0x3d	; 61
    4b20:	de b7       	in	r29, 0x3e	; 62
    4b22:	6d 97       	sbiw	r28, 0x1d	; 29
    4b24:	0f b6       	in	r0, 0x3f	; 63
    4b26:	f8 94       	cli
    4b28:	de bf       	out	0x3e, r29	; 62
    4b2a:	0f be       	out	0x3f, r0	; 63
    4b2c:	cd bf       	out	0x3d, r28	; 61

	LCD_init();
    4b2e:	0e 94 53 1f 	call	0x3ea6	; 0x3ea6 <LCD_init>
	UART_configType uart_conf = {DISABLE,ONE_BIT,BIT8,9600};
    4b32:	ce 01       	movw	r24, r28
    4b34:	42 96       	adiw	r24, 0x12	; 18
    4b36:	9a 8f       	std	Y+26, r25	; 0x1a
    4b38:	89 8f       	std	Y+25, r24	; 0x19
    4b3a:	e4 e1       	ldi	r30, 0x14	; 20
    4b3c:	f1 e0       	ldi	r31, 0x01	; 1
    4b3e:	fc 8f       	std	Y+28, r31	; 0x1c
    4b40:	eb 8f       	std	Y+27, r30	; 0x1b
    4b42:	f7 e0       	ldi	r31, 0x07	; 7
    4b44:	fd 8f       	std	Y+29, r31	; 0x1d
    4b46:	eb 8d       	ldd	r30, Y+27	; 0x1b
    4b48:	fc 8d       	ldd	r31, Y+28	; 0x1c
    4b4a:	00 80       	ld	r0, Z
    4b4c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4b4e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4b50:	01 96       	adiw	r24, 0x01	; 1
    4b52:	9c 8f       	std	Y+28, r25	; 0x1c
    4b54:	8b 8f       	std	Y+27, r24	; 0x1b
    4b56:	e9 8d       	ldd	r30, Y+25	; 0x19
    4b58:	fa 8d       	ldd	r31, Y+26	; 0x1a
    4b5a:	00 82       	st	Z, r0
    4b5c:	89 8d       	ldd	r24, Y+25	; 0x19
    4b5e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4b60:	01 96       	adiw	r24, 0x01	; 1
    4b62:	9a 8f       	std	Y+26, r25	; 0x1a
    4b64:	89 8f       	std	Y+25, r24	; 0x19
    4b66:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4b68:	91 50       	subi	r25, 0x01	; 1
    4b6a:	9d 8f       	std	Y+29, r25	; 0x1d
    4b6c:	ed 8d       	ldd	r30, Y+29	; 0x1d
    4b6e:	ee 23       	and	r30, r30
    4b70:	51 f7       	brne	.-44     	; 0x4b46 <main+0x2c>
	UART_init(&uart_conf);
    4b72:	ce 01       	movw	r24, r28
    4b74:	42 96       	adiw	r24, 0x12	; 18
    4b76:	0e 94 a8 06 	call	0xd50	; 0xd50 <UART_init>

	/* Enable Global Interrupt I-Bit */
	SREG |= (1<<7);
    4b7a:	af e5       	ldi	r26, 0x5F	; 95
    4b7c:	b0 e0       	ldi	r27, 0x00	; 0
    4b7e:	ef e5       	ldi	r30, 0x5F	; 95
    4b80:	f0 e0       	ldi	r31, 0x00	; 0
    4b82:	80 81       	ld	r24, Z
    4b84:	80 68       	ori	r24, 0x80	; 128
    4b86:	8c 93       	st	X, r24


	/*Step 1 to set the password*/
	step_1_set_password();
    4b88:	0e 94 29 09 	call	0x1252	; 0x1252 <step_1_set_password>
	/*end of step 1*/

	LCD_clearScreen();
    4b8c:	0e 94 83 25 	call	0x4b06	; 0x4b06 <LCD_clearScreen>

	options chossen_option;
	for(;;)
	{
		LCD_writeString("+ : Open Door");
    4b90:	82 ee       	ldi	r24, 0xE2	; 226
    4b92:	90 e0       	ldi	r25, 0x00	; 0
    4b94:	0e 94 f2 24 	call	0x49e4	; 0x49e4 <LCD_writeString>
		LCD_moveCursor(1,0);
    4b98:	81 e0       	ldi	r24, 0x01	; 1
    4b9a:	60 e0       	ldi	r22, 0x00	; 0
    4b9c:	0e 94 1d 25 	call	0x4a3a	; 0x4a3a <LCD_moveCursor>
		LCD_writeString("- : Change Pass");
    4ba0:	80 ef       	ldi	r24, 0xF0	; 240
    4ba2:	90 e0       	ldi	r25, 0x00	; 0
    4ba4:	0e 94 f2 24 	call	0x49e4	; 0x49e4 <LCD_writeString>
		uint8 error_open_door_numbs = 0;
    4ba8:	18 8a       	std	Y+16, r1	; 0x10
		uint8 error_chang_pass_numbs = 0;
    4baa:	1f 86       	std	Y+15, r1	; 0x0f

		chossen_option = KEYPAD_getPressedKey();
    4bac:	0e 94 55 19 	call	0x32aa	; 0x32aa <KEYPAD_getPressedKey>
    4bb0:	89 8b       	std	Y+17, r24	; 0x11
    4bb2:	80 e0       	ldi	r24, 0x00	; 0
    4bb4:	90 e0       	ldi	r25, 0x00	; 0
    4bb6:	aa ef       	ldi	r26, 0xFA	; 250
    4bb8:	b3 e4       	ldi	r27, 0x43	; 67
    4bba:	8b 87       	std	Y+11, r24	; 0x0b
    4bbc:	9c 87       	std	Y+12, r25	; 0x0c
    4bbe:	ad 87       	std	Y+13, r26	; 0x0d
    4bc0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4bc2:	6b 85       	ldd	r22, Y+11	; 0x0b
    4bc4:	7c 85       	ldd	r23, Y+12	; 0x0c
    4bc6:	8d 85       	ldd	r24, Y+13	; 0x0d
    4bc8:	9e 85       	ldd	r25, Y+14	; 0x0e
    4bca:	20 e0       	ldi	r18, 0x00	; 0
    4bcc:	30 e0       	ldi	r19, 0x00	; 0
    4bce:	4a ef       	ldi	r20, 0xFA	; 250
    4bd0:	54 e4       	ldi	r21, 0x44	; 68
    4bd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bd6:	dc 01       	movw	r26, r24
    4bd8:	cb 01       	movw	r24, r22
    4bda:	8f 83       	std	Y+7, r24	; 0x07
    4bdc:	98 87       	std	Y+8, r25	; 0x08
    4bde:	a9 87       	std	Y+9, r26	; 0x09
    4be0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4be2:	6f 81       	ldd	r22, Y+7	; 0x07
    4be4:	78 85       	ldd	r23, Y+8	; 0x08
    4be6:	89 85       	ldd	r24, Y+9	; 0x09
    4be8:	9a 85       	ldd	r25, Y+10	; 0x0a
    4bea:	20 e0       	ldi	r18, 0x00	; 0
    4bec:	30 e0       	ldi	r19, 0x00	; 0
    4bee:	40 e8       	ldi	r20, 0x80	; 128
    4bf0:	5f e3       	ldi	r21, 0x3F	; 63
    4bf2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4bf6:	88 23       	and	r24, r24
    4bf8:	2c f4       	brge	.+10     	; 0x4c04 <main+0xea>
		__ticks = 1;
    4bfa:	81 e0       	ldi	r24, 0x01	; 1
    4bfc:	90 e0       	ldi	r25, 0x00	; 0
    4bfe:	9e 83       	std	Y+6, r25	; 0x06
    4c00:	8d 83       	std	Y+5, r24	; 0x05
    4c02:	3f c0       	rjmp	.+126    	; 0x4c82 <main+0x168>
	else if (__tmp > 65535)
    4c04:	6f 81       	ldd	r22, Y+7	; 0x07
    4c06:	78 85       	ldd	r23, Y+8	; 0x08
    4c08:	89 85       	ldd	r24, Y+9	; 0x09
    4c0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c0c:	20 e0       	ldi	r18, 0x00	; 0
    4c0e:	3f ef       	ldi	r19, 0xFF	; 255
    4c10:	4f e7       	ldi	r20, 0x7F	; 127
    4c12:	57 e4       	ldi	r21, 0x47	; 71
    4c14:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4c18:	18 16       	cp	r1, r24
    4c1a:	4c f5       	brge	.+82     	; 0x4c6e <main+0x154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4c20:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c22:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c24:	20 e0       	ldi	r18, 0x00	; 0
    4c26:	30 e0       	ldi	r19, 0x00	; 0
    4c28:	40 e2       	ldi	r20, 0x20	; 32
    4c2a:	51 e4       	ldi	r21, 0x41	; 65
    4c2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c30:	dc 01       	movw	r26, r24
    4c32:	cb 01       	movw	r24, r22
    4c34:	bc 01       	movw	r22, r24
    4c36:	cd 01       	movw	r24, r26
    4c38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c3c:	dc 01       	movw	r26, r24
    4c3e:	cb 01       	movw	r24, r22
    4c40:	9e 83       	std	Y+6, r25	; 0x06
    4c42:	8d 83       	std	Y+5, r24	; 0x05
    4c44:	0f c0       	rjmp	.+30     	; 0x4c64 <main+0x14a>
    4c46:	88 ec       	ldi	r24, 0xC8	; 200
    4c48:	90 e0       	ldi	r25, 0x00	; 0
    4c4a:	9c 83       	std	Y+4, r25	; 0x04
    4c4c:	8b 83       	std	Y+3, r24	; 0x03
    4c4e:	8b 81       	ldd	r24, Y+3	; 0x03
    4c50:	9c 81       	ldd	r25, Y+4	; 0x04
    4c52:	01 97       	sbiw	r24, 0x01	; 1
    4c54:	f1 f7       	brne	.-4      	; 0x4c52 <main+0x138>
    4c56:	9c 83       	std	Y+4, r25	; 0x04
    4c58:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c5a:	8d 81       	ldd	r24, Y+5	; 0x05
    4c5c:	9e 81       	ldd	r25, Y+6	; 0x06
    4c5e:	01 97       	sbiw	r24, 0x01	; 1
    4c60:	9e 83       	std	Y+6, r25	; 0x06
    4c62:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c64:	8d 81       	ldd	r24, Y+5	; 0x05
    4c66:	9e 81       	ldd	r25, Y+6	; 0x06
    4c68:	00 97       	sbiw	r24, 0x00	; 0
    4c6a:	69 f7       	brne	.-38     	; 0x4c46 <main+0x12c>
    4c6c:	14 c0       	rjmp	.+40     	; 0x4c96 <main+0x17c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c6e:	6f 81       	ldd	r22, Y+7	; 0x07
    4c70:	78 85       	ldd	r23, Y+8	; 0x08
    4c72:	89 85       	ldd	r24, Y+9	; 0x09
    4c74:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c7a:	dc 01       	movw	r26, r24
    4c7c:	cb 01       	movw	r24, r22
    4c7e:	9e 83       	std	Y+6, r25	; 0x06
    4c80:	8d 83       	std	Y+5, r24	; 0x05
    4c82:	8d 81       	ldd	r24, Y+5	; 0x05
    4c84:	9e 81       	ldd	r25, Y+6	; 0x06
    4c86:	9a 83       	std	Y+2, r25	; 0x02
    4c88:	89 83       	std	Y+1, r24	; 0x01
    4c8a:	89 81       	ldd	r24, Y+1	; 0x01
    4c8c:	9a 81       	ldd	r25, Y+2	; 0x02
    4c8e:	01 97       	sbiw	r24, 0x01	; 1
    4c90:	f1 f7       	brne	.-4      	; 0x4c8e <main+0x174>
    4c92:	9a 83       	std	Y+2, r25	; 0x02
    4c94:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		if(chossen_option==OPEN_DOOR)
    4c96:	89 89       	ldd	r24, Y+17	; 0x11
    4c98:	8b 32       	cpi	r24, 0x2B	; 43
    4c9a:	19 f4       	brne	.+6      	; 0x4ca2 <main+0x188>
		{
			step_3_open_the_door();
    4c9c:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <step_3_open_the_door>
    4ca0:	77 cf       	rjmp	.-274    	; 0x4b90 <main+0x76>
		}
		else if(chossen_option==CHANGE_PASS)
    4ca2:	89 89       	ldd	r24, Y+17	; 0x11
    4ca4:	8d 32       	cpi	r24, 0x2D	; 45
    4ca6:	09 f0       	breq	.+2      	; 0x4caa <main+0x190>
    4ca8:	73 cf       	rjmp	.-282    	; 0x4b90 <main+0x76>
		{
			step_4_change_password();
    4caa:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <step_4_change_password>
    4cae:	70 cf       	rjmp	.-288    	; 0x4b90 <main+0x76>

00004cb0 <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    4cb0:	0f 93       	push	r16
    4cb2:	1f 93       	push	r17
    4cb4:	df 93       	push	r29
    4cb6:	cf 93       	push	r28
    4cb8:	00 d0       	rcall	.+0      	; 0x4cba <TWI_init+0xa>
    4cba:	cd b7       	in	r28, 0x3d	; 61
    4cbc:	de b7       	in	r29, 0x3e	; 62
    4cbe:	9a 83       	std	Y+2, r25	; 0x02
    4cc0:	89 83       	std	Y+1, r24	; 0x01
    TWBR = (F_CPU/(2*Config_Ptr->bit_rate))-8;
    4cc2:	00 e2       	ldi	r16, 0x20	; 32
    4cc4:	10 e0       	ldi	r17, 0x00	; 0
    4cc6:	e9 81       	ldd	r30, Y+1	; 0x01
    4cc8:	fa 81       	ldd	r31, Y+2	; 0x02
    4cca:	81 81       	ldd	r24, Z+1	; 0x01
    4ccc:	92 81       	ldd	r25, Z+2	; 0x02
    4cce:	a3 81       	ldd	r26, Z+3	; 0x03
    4cd0:	b4 81       	ldd	r27, Z+4	; 0x04
    4cd2:	9c 01       	movw	r18, r24
    4cd4:	ad 01       	movw	r20, r26
    4cd6:	22 0f       	add	r18, r18
    4cd8:	33 1f       	adc	r19, r19
    4cda:	44 1f       	adc	r20, r20
    4cdc:	55 1f       	adc	r21, r21
    4cde:	80 e0       	ldi	r24, 0x00	; 0
    4ce0:	92 e1       	ldi	r25, 0x12	; 18
    4ce2:	aa e7       	ldi	r26, 0x7A	; 122
    4ce4:	b0 e0       	ldi	r27, 0x00	; 0
    4ce6:	bc 01       	movw	r22, r24
    4ce8:	cd 01       	movw	r24, r26
    4cea:	0e 94 f7 26 	call	0x4dee	; 0x4dee <__udivmodsi4>
    4cee:	da 01       	movw	r26, r20
    4cf0:	c9 01       	movw	r24, r18
    4cf2:	88 50       	subi	r24, 0x08	; 8
    4cf4:	f8 01       	movw	r30, r16
    4cf6:	80 83       	st	Z, r24
	TWSR = 0x00; /*Zero pre_scaler*/
    4cf8:	e1 e2       	ldi	r30, 0x21	; 33
    4cfa:	f0 e0       	ldi	r31, 0x00	; 0
    4cfc:	10 82       	st	Z, r1
	

    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = Config_Ptr->address; // my address = 0x01 :)
    4cfe:	a2 e2       	ldi	r26, 0x22	; 34
    4d00:	b0 e0       	ldi	r27, 0x00	; 0
    4d02:	e9 81       	ldd	r30, Y+1	; 0x01
    4d04:	fa 81       	ldd	r31, Y+2	; 0x02
    4d06:	80 81       	ld	r24, Z
    4d08:	8c 93       	st	X, r24
    TWCR = (1<<TWEN); /* enable TWI */
    4d0a:	e6 e5       	ldi	r30, 0x56	; 86
    4d0c:	f0 e0       	ldi	r31, 0x00	; 0
    4d0e:	84 e0       	ldi	r24, 0x04	; 4
    4d10:	80 83       	st	Z, r24
}
    4d12:	0f 90       	pop	r0
    4d14:	0f 90       	pop	r0
    4d16:	cf 91       	pop	r28
    4d18:	df 91       	pop	r29
    4d1a:	1f 91       	pop	r17
    4d1c:	0f 91       	pop	r16
    4d1e:	08 95       	ret

00004d20 <TWI_start>:

void TWI_start(void)
{
    4d20:	df 93       	push	r29
    4d22:	cf 93       	push	r28
    4d24:	cd b7       	in	r28, 0x3d	; 61
    4d26:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    4d28:	e6 e5       	ldi	r30, 0x56	; 86
    4d2a:	f0 e0       	ldi	r31, 0x00	; 0
    4d2c:	84 ea       	ldi	r24, 0xA4	; 164
    4d2e:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    4d30:	e6 e5       	ldi	r30, 0x56	; 86
    4d32:	f0 e0       	ldi	r31, 0x00	; 0
    4d34:	80 81       	ld	r24, Z
    4d36:	88 23       	and	r24, r24
    4d38:	dc f7       	brge	.-10     	; 0x4d30 <TWI_start+0x10>
}
    4d3a:	cf 91       	pop	r28
    4d3c:	df 91       	pop	r29
    4d3e:	08 95       	ret

00004d40 <TWI_stop>:

void TWI_stop(void)
{
    4d40:	df 93       	push	r29
    4d42:	cf 93       	push	r28
    4d44:	cd b7       	in	r28, 0x3d	; 61
    4d46:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    4d48:	e6 e5       	ldi	r30, 0x56	; 86
    4d4a:	f0 e0       	ldi	r31, 0x00	; 0
    4d4c:	84 e9       	ldi	r24, 0x94	; 148
    4d4e:	80 83       	st	Z, r24
}
    4d50:	cf 91       	pop	r28
    4d52:	df 91       	pop	r29
    4d54:	08 95       	ret

00004d56 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    4d56:	df 93       	push	r29
    4d58:	cf 93       	push	r28
    4d5a:	0f 92       	push	r0
    4d5c:	cd b7       	in	r28, 0x3d	; 61
    4d5e:	de b7       	in	r29, 0x3e	; 62
    4d60:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    4d62:	e3 e2       	ldi	r30, 0x23	; 35
    4d64:	f0 e0       	ldi	r31, 0x00	; 0
    4d66:	89 81       	ldd	r24, Y+1	; 0x01
    4d68:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    4d6a:	e6 e5       	ldi	r30, 0x56	; 86
    4d6c:	f0 e0       	ldi	r31, 0x00	; 0
    4d6e:	84 e8       	ldi	r24, 0x84	; 132
    4d70:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    4d72:	e6 e5       	ldi	r30, 0x56	; 86
    4d74:	f0 e0       	ldi	r31, 0x00	; 0
    4d76:	80 81       	ld	r24, Z
    4d78:	88 23       	and	r24, r24
    4d7a:	dc f7       	brge	.-10     	; 0x4d72 <TWI_writeByte+0x1c>
}
    4d7c:	0f 90       	pop	r0
    4d7e:	cf 91       	pop	r28
    4d80:	df 91       	pop	r29
    4d82:	08 95       	ret

00004d84 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    4d84:	df 93       	push	r29
    4d86:	cf 93       	push	r28
    4d88:	cd b7       	in	r28, 0x3d	; 61
    4d8a:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    4d8c:	e6 e5       	ldi	r30, 0x56	; 86
    4d8e:	f0 e0       	ldi	r31, 0x00	; 0
    4d90:	84 ec       	ldi	r24, 0xC4	; 196
    4d92:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    4d94:	e6 e5       	ldi	r30, 0x56	; 86
    4d96:	f0 e0       	ldi	r31, 0x00	; 0
    4d98:	80 81       	ld	r24, Z
    4d9a:	88 23       	and	r24, r24
    4d9c:	dc f7       	brge	.-10     	; 0x4d94 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    4d9e:	e3 e2       	ldi	r30, 0x23	; 35
    4da0:	f0 e0       	ldi	r31, 0x00	; 0
    4da2:	80 81       	ld	r24, Z
}
    4da4:	cf 91       	pop	r28
    4da6:	df 91       	pop	r29
    4da8:	08 95       	ret

00004daa <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    4daa:	df 93       	push	r29
    4dac:	cf 93       	push	r28
    4dae:	cd b7       	in	r28, 0x3d	; 61
    4db0:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    4db2:	e6 e5       	ldi	r30, 0x56	; 86
    4db4:	f0 e0       	ldi	r31, 0x00	; 0
    4db6:	84 e8       	ldi	r24, 0x84	; 132
    4db8:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    4dba:	e6 e5       	ldi	r30, 0x56	; 86
    4dbc:	f0 e0       	ldi	r31, 0x00	; 0
    4dbe:	80 81       	ld	r24, Z
    4dc0:	88 23       	and	r24, r24
    4dc2:	dc f7       	brge	.-10     	; 0x4dba <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    4dc4:	e3 e2       	ldi	r30, 0x23	; 35
    4dc6:	f0 e0       	ldi	r31, 0x00	; 0
    4dc8:	80 81       	ld	r24, Z
}
    4dca:	cf 91       	pop	r28
    4dcc:	df 91       	pop	r29
    4dce:	08 95       	ret

00004dd0 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    4dd0:	df 93       	push	r29
    4dd2:	cf 93       	push	r28
    4dd4:	0f 92       	push	r0
    4dd6:	cd b7       	in	r28, 0x3d	; 61
    4dd8:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    4dda:	e1 e2       	ldi	r30, 0x21	; 33
    4ddc:	f0 e0       	ldi	r31, 0x00	; 0
    4dde:	80 81       	ld	r24, Z
    4de0:	88 7f       	andi	r24, 0xF8	; 248
    4de2:	89 83       	std	Y+1, r24	; 0x01
    return status;
    4de4:	89 81       	ldd	r24, Y+1	; 0x01
}
    4de6:	0f 90       	pop	r0
    4de8:	cf 91       	pop	r28
    4dea:	df 91       	pop	r29
    4dec:	08 95       	ret

00004dee <__udivmodsi4>:
    4dee:	a1 e2       	ldi	r26, 0x21	; 33
    4df0:	1a 2e       	mov	r1, r26
    4df2:	aa 1b       	sub	r26, r26
    4df4:	bb 1b       	sub	r27, r27
    4df6:	fd 01       	movw	r30, r26
    4df8:	0d c0       	rjmp	.+26     	; 0x4e14 <__udivmodsi4_ep>

00004dfa <__udivmodsi4_loop>:
    4dfa:	aa 1f       	adc	r26, r26
    4dfc:	bb 1f       	adc	r27, r27
    4dfe:	ee 1f       	adc	r30, r30
    4e00:	ff 1f       	adc	r31, r31
    4e02:	a2 17       	cp	r26, r18
    4e04:	b3 07       	cpc	r27, r19
    4e06:	e4 07       	cpc	r30, r20
    4e08:	f5 07       	cpc	r31, r21
    4e0a:	20 f0       	brcs	.+8      	; 0x4e14 <__udivmodsi4_ep>
    4e0c:	a2 1b       	sub	r26, r18
    4e0e:	b3 0b       	sbc	r27, r19
    4e10:	e4 0b       	sbc	r30, r20
    4e12:	f5 0b       	sbc	r31, r21

00004e14 <__udivmodsi4_ep>:
    4e14:	66 1f       	adc	r22, r22
    4e16:	77 1f       	adc	r23, r23
    4e18:	88 1f       	adc	r24, r24
    4e1a:	99 1f       	adc	r25, r25
    4e1c:	1a 94       	dec	r1
    4e1e:	69 f7       	brne	.-38     	; 0x4dfa <__udivmodsi4_loop>
    4e20:	60 95       	com	r22
    4e22:	70 95       	com	r23
    4e24:	80 95       	com	r24
    4e26:	90 95       	com	r25
    4e28:	9b 01       	movw	r18, r22
    4e2a:	ac 01       	movw	r20, r24
    4e2c:	bd 01       	movw	r22, r26
    4e2e:	cf 01       	movw	r24, r30
    4e30:	08 95       	ret

00004e32 <__prologue_saves__>:
    4e32:	2f 92       	push	r2
    4e34:	3f 92       	push	r3
    4e36:	4f 92       	push	r4
    4e38:	5f 92       	push	r5
    4e3a:	6f 92       	push	r6
    4e3c:	7f 92       	push	r7
    4e3e:	8f 92       	push	r8
    4e40:	9f 92       	push	r9
    4e42:	af 92       	push	r10
    4e44:	bf 92       	push	r11
    4e46:	cf 92       	push	r12
    4e48:	df 92       	push	r13
    4e4a:	ef 92       	push	r14
    4e4c:	ff 92       	push	r15
    4e4e:	0f 93       	push	r16
    4e50:	1f 93       	push	r17
    4e52:	cf 93       	push	r28
    4e54:	df 93       	push	r29
    4e56:	cd b7       	in	r28, 0x3d	; 61
    4e58:	de b7       	in	r29, 0x3e	; 62
    4e5a:	ca 1b       	sub	r28, r26
    4e5c:	db 0b       	sbc	r29, r27
    4e5e:	0f b6       	in	r0, 0x3f	; 63
    4e60:	f8 94       	cli
    4e62:	de bf       	out	0x3e, r29	; 62
    4e64:	0f be       	out	0x3f, r0	; 63
    4e66:	cd bf       	out	0x3d, r28	; 61
    4e68:	09 94       	ijmp

00004e6a <__epilogue_restores__>:
    4e6a:	2a 88       	ldd	r2, Y+18	; 0x12
    4e6c:	39 88       	ldd	r3, Y+17	; 0x11
    4e6e:	48 88       	ldd	r4, Y+16	; 0x10
    4e70:	5f 84       	ldd	r5, Y+15	; 0x0f
    4e72:	6e 84       	ldd	r6, Y+14	; 0x0e
    4e74:	7d 84       	ldd	r7, Y+13	; 0x0d
    4e76:	8c 84       	ldd	r8, Y+12	; 0x0c
    4e78:	9b 84       	ldd	r9, Y+11	; 0x0b
    4e7a:	aa 84       	ldd	r10, Y+10	; 0x0a
    4e7c:	b9 84       	ldd	r11, Y+9	; 0x09
    4e7e:	c8 84       	ldd	r12, Y+8	; 0x08
    4e80:	df 80       	ldd	r13, Y+7	; 0x07
    4e82:	ee 80       	ldd	r14, Y+6	; 0x06
    4e84:	fd 80       	ldd	r15, Y+5	; 0x05
    4e86:	0c 81       	ldd	r16, Y+4	; 0x04
    4e88:	1b 81       	ldd	r17, Y+3	; 0x03
    4e8a:	aa 81       	ldd	r26, Y+2	; 0x02
    4e8c:	b9 81       	ldd	r27, Y+1	; 0x01
    4e8e:	ce 0f       	add	r28, r30
    4e90:	d1 1d       	adc	r29, r1
    4e92:	0f b6       	in	r0, 0x3f	; 63
    4e94:	f8 94       	cli
    4e96:	de bf       	out	0x3e, r29	; 62
    4e98:	0f be       	out	0x3f, r0	; 63
    4e9a:	cd bf       	out	0x3d, r28	; 61
    4e9c:	ed 01       	movw	r28, r26
    4e9e:	08 95       	ret

00004ea0 <itoa>:
    4ea0:	fb 01       	movw	r30, r22
    4ea2:	9f 01       	movw	r18, r30
    4ea4:	e8 94       	clt
    4ea6:	42 30       	cpi	r20, 0x02	; 2
    4ea8:	c4 f0       	brlt	.+48     	; 0x4eda <itoa+0x3a>
    4eaa:	45 32       	cpi	r20, 0x25	; 37
    4eac:	b4 f4       	brge	.+44     	; 0x4eda <itoa+0x3a>
    4eae:	4a 30       	cpi	r20, 0x0A	; 10
    4eb0:	29 f4       	brne	.+10     	; 0x4ebc <itoa+0x1c>
    4eb2:	97 fb       	bst	r25, 7
    4eb4:	1e f4       	brtc	.+6      	; 0x4ebc <itoa+0x1c>
    4eb6:	90 95       	com	r25
    4eb8:	81 95       	neg	r24
    4eba:	9f 4f       	sbci	r25, 0xFF	; 255
    4ebc:	64 2f       	mov	r22, r20
    4ebe:	77 27       	eor	r23, r23
    4ec0:	0e 94 81 27 	call	0x4f02	; 0x4f02 <__udivmodhi4>
    4ec4:	80 5d       	subi	r24, 0xD0	; 208
    4ec6:	8a 33       	cpi	r24, 0x3A	; 58
    4ec8:	0c f0       	brlt	.+2      	; 0x4ecc <itoa+0x2c>
    4eca:	89 5d       	subi	r24, 0xD9	; 217
    4ecc:	81 93       	st	Z+, r24
    4ece:	cb 01       	movw	r24, r22
    4ed0:	00 97       	sbiw	r24, 0x00	; 0
    4ed2:	a1 f7       	brne	.-24     	; 0x4ebc <itoa+0x1c>
    4ed4:	16 f4       	brtc	.+4      	; 0x4eda <itoa+0x3a>
    4ed6:	5d e2       	ldi	r21, 0x2D	; 45
    4ed8:	51 93       	st	Z+, r21
    4eda:	10 82       	st	Z, r1
    4edc:	c9 01       	movw	r24, r18
    4ede:	0c 94 71 27 	jmp	0x4ee2	; 0x4ee2 <strrev>

00004ee2 <strrev>:
    4ee2:	dc 01       	movw	r26, r24
    4ee4:	fc 01       	movw	r30, r24
    4ee6:	67 2f       	mov	r22, r23
    4ee8:	71 91       	ld	r23, Z+
    4eea:	77 23       	and	r23, r23
    4eec:	e1 f7       	brne	.-8      	; 0x4ee6 <strrev+0x4>
    4eee:	32 97       	sbiw	r30, 0x02	; 2
    4ef0:	04 c0       	rjmp	.+8      	; 0x4efa <strrev+0x18>
    4ef2:	7c 91       	ld	r23, X
    4ef4:	6d 93       	st	X+, r22
    4ef6:	70 83       	st	Z, r23
    4ef8:	62 91       	ld	r22, -Z
    4efa:	ae 17       	cp	r26, r30
    4efc:	bf 07       	cpc	r27, r31
    4efe:	c8 f3       	brcs	.-14     	; 0x4ef2 <strrev+0x10>
    4f00:	08 95       	ret

00004f02 <__udivmodhi4>:
    4f02:	aa 1b       	sub	r26, r26
    4f04:	bb 1b       	sub	r27, r27
    4f06:	51 e1       	ldi	r21, 0x11	; 17
    4f08:	07 c0       	rjmp	.+14     	; 0x4f18 <__udivmodhi4_ep>

00004f0a <__udivmodhi4_loop>:
    4f0a:	aa 1f       	adc	r26, r26
    4f0c:	bb 1f       	adc	r27, r27
    4f0e:	a6 17       	cp	r26, r22
    4f10:	b7 07       	cpc	r27, r23
    4f12:	10 f0       	brcs	.+4      	; 0x4f18 <__udivmodhi4_ep>
    4f14:	a6 1b       	sub	r26, r22
    4f16:	b7 0b       	sbc	r27, r23

00004f18 <__udivmodhi4_ep>:
    4f18:	88 1f       	adc	r24, r24
    4f1a:	99 1f       	adc	r25, r25
    4f1c:	5a 95       	dec	r21
    4f1e:	a9 f7       	brne	.-22     	; 0x4f0a <__udivmodhi4_loop>
    4f20:	80 95       	com	r24
    4f22:	90 95       	com	r25
    4f24:	bc 01       	movw	r22, r24
    4f26:	cd 01       	movw	r24, r26
    4f28:	08 95       	ret

00004f2a <_exit>:
    4f2a:	f8 94       	cli

00004f2c <__stop_program>:
    4f2c:	ff cf       	rjmp	.-2      	; 0x4f2c <__stop_program>
